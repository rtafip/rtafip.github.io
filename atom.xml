<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[拖鞋党的拖鞋摊]]></title>
  <subtitle><![CDATA[写一些有的没的]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://en.ors-sro.com//"/>
  <updated>2017-03-26T13:04:26.901Z</updated>
  <id>http://en.ors-sro.com//</id>
  
  <author>
    <name><![CDATA[拖鞋党]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Monad Transformers]]></title>
    <link href="http://en.ors-sro.com/Monad-Transformers/"/>
    <id>http://en.ors-sro.com/Monad-Transformers/</id>
    <published>2017-03-26T11:22:50.000Z</published>
    <updated>2017-03-26T13:04:26.901Z</updated>
    <content type="html"><![CDATA[<p>组合两个 Monad 的 Monad</p>
<a id="more"></a>
<p>本文为 <a href="https://en.wikibooks.org/wiki/Haskell/Monad_transformers" target="_blank" rel="external">Monad Transformers</a> 的学习笔记。</p>
<h2 id="困境">困境</h2><p>有时候需要校验输入内容。比如验证是否为符合要求的密码</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> Data.Char</span></span><br><span class="line"><span class="import"><span class="keyword">import</span> Data.Maybe</span></span><br><span class="line"></span><br><span class="line"><span class="title">isValid</span> :: <span class="type">String</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isValid</span> s = length s &gt;= <span class="number">8</span></span><br><span class="line">            &amp;&amp; any isAlpha s</span><br><span class="line">            &amp;&amp; any isNumber s</span><br><span class="line">            &amp;&amp; any isPunctuation s</span><br></pre></td></tr></table></figure>
<p>获取输入</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 因为需要携带值，所以这里使用 Maybe String 而不是 Bool</span></span><br><span class="line"><span class="title">getPassphrase</span> :: <span class="type">IO</span> (<span class="type">Maybe</span> <span class="type">String</span>)</span><br><span class="line"><span class="title">getPassphrase</span> = <span class="keyword">do</span> s &lt;- getLine</span><br><span class="line">                   <span class="keyword">if</span> isValid s <span class="keyword">then</span> return $ <span class="type">Just</span> s</span><br><span class="line">                                <span class="keyword">else</span> return <span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<p>校验</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">askPassphrase</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">askPassphrase</span> = <span class="keyword">do</span> putStrLn <span class="string">"请输入密码："</span></span><br><span class="line">                   maybe_value &lt;- getPassphrase</span><br><span class="line">                   <span class="keyword">if</span> isJust maybe_value <span class="comment">-- 这里手动判断是否合法</span></span><br><span class="line">                     <span class="keyword">then</span> <span class="keyword">do</span> putStrLn maybe_value ++ <span class="string">" 是个不错的密码"</span> </span><br><span class="line">                     <span class="keyword">else</span> return ()</span><br></pre></td></tr></table></figure>
<p>代码中使用 <code>isJust</code> 判断是否合法。在数量比较少的情况下不是什么问题。通常使用 Maybe Monad 是不需要手动判断是否为 <code>Just</code> 。因为有 <code>&gt;&gt;=</code> 。</p>
<p>所以这里是否能使用 Maybe Monad 来避免手动检查呢。</p>
<p>假设去点 <code>isJust</code> 的三行判断代码。从新编写一个函数</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">askPassphrase</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">askPassphrase</span> = <span class="keyword">do</span> putStrLn <span class="string">"请输入密码："</span></span><br><span class="line">                   maybe_value &lt;- getPassphrase</span><br><span class="line">                   maybe_value &gt;&gt;= f</span><br></pre></td></tr></table></figure>
<p>这个 <code>f</code> 的类型是什么呢？</p>
<p>首先 <code>askPassphrase</code> 的类型是 <code>IO ()</code> 。所以 <code>f</code> 需要返回 <code>IO ()</code></p>
<p>而 <code>f</code> 又接受一个 <code>String</code> 类型的参数。</p>
<p>所以 <code>f</code> 的类型应该是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">String</span> -&gt; <span class="type">IO</span> ()</span><br></pre></td></tr></table></figure>
<p>但是这样不能用于 <code>maybe_value &gt;&gt;= f</code> 因为 <code>&gt;&gt;=</code> 的类型是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t (&gt;&gt;=)</span><br><span class="line">(&gt;&gt;=) :: <span class="type">Monad</span> m =&gt; m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure>
<p>所以要使用 <code>&gt;&gt;=</code> ，<code>f</code> 的类型必须是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">String</span> -&gt; <span class="type">Maybe</span> <span class="type">String</span></span><br></pre></td></tr></table></figure>
<p>显然两个类型冲突了，所以写不出来。</p>
<p>所以需要一个能够组合 Maybe Monad 和 IO Monad 的类型。</p>
<p>这个就是 Monad Transformers</p>
<h2 id="定义">定义</h2><p>定义 Maybe Monad 的 Monad Transformer <code>MaybeT</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">newtype</span> <span class="type">MaybeT</span> m a = <span class="type">MaybeT</span> <span class="container">&#123; <span class="title">runMaybeT</span> :: <span class="title">m</span> (<span class="type">Maybe</span> <span class="title">a</span>) &#125;</span></span></span><br></pre></td></tr></table></figure>
<p>其中 m 可以为任意 Monad</p>
<p>Monad Transformer 本身也是 Monad 。所以需要实现 <code>return</code> 和 <code>&gt;&gt;=</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">Monad</span> <span class="container">(<span class="type">MaybeT</span> <span class="title">m</span>)</span> <span class="keyword">where</span></span></span><br><span class="line">    return  = <span class="type">MaybeT</span> . return . <span class="type">Just</span></span><br><span class="line">    <span class="comment">-- return a = MaybeT . return . Just a</span></span><br></pre></td></tr></table></figure>
<p><code>Just</code> 将 a 转化为 <code>Maybe a</code> 类型</p>
<p><code>return</code> 将 <code>Maybe a</code> 转化为 <code>m (Maybe a)</code> 类型</p>
<p><code>MaybeT</code> 将 <code>m (Maybe a)</code> 转化为 <code>MaybeT m (Maybe a)</code> 类型。</p>
<p>接着实现 <code>&gt;&gt;=</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- (&gt;&gt;=) 定义中的 m 为 MaybeT m</span></span><br><span class="line">(&gt;&gt;=) :: <span class="type">MaybeT</span> m a -&gt; (a -&gt; <span class="type">MaybeT</span> m b) -&gt; <span class="type">MaybeT</span> m b</span><br><span class="line"></span><br><span class="line"><span class="title">x</span> &gt;&gt;= f = <span class="type">MaybeT</span> $ <span class="keyword">do</span> maybe_value &lt;- runMaybeT x</span><br><span class="line">                      <span class="keyword">case</span> maybe_value <span class="keyword">of</span></span><br><span class="line">                           <span class="type">Nothing</span>    -&gt; return <span class="type">Nothing</span></span><br><span class="line">                           <span class="type">Just</span> value -&gt; runMaybeT $ f value</span><br></pre></td></tr></table></figure>
<p>为了使用方便，顺便实现相应的 MonadPlus 和 MonadTrans</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">MonadPlus</span> <span class="container">(<span class="type">MaybeT</span> <span class="title">m</span>)</span> <span class="keyword">where</span></span></span><br><span class="line">    mzero     = <span class="type">MaybeT</span> $ return <span class="type">Nothing</span></span><br><span class="line">    mplus x y = <span class="type">MaybeT</span> $ <span class="keyword">do</span> maybe_value &lt;- runMaybeT x</span><br><span class="line">                            <span class="keyword">case</span> maybe_value <span class="keyword">of</span></span><br><span class="line">                                 <span class="type">Nothing</span>    -&gt; runMaybeT y</span><br><span class="line">                                 <span class="type">Just</span> _     -&gt; return maybe_value</span><br><span class="line"><span class="class"></span><br><span class="line"><span class="keyword">instance</span> <span class="type">MonadTrans</span> <span class="type">MaybeT</span> <span class="keyword">where</span></span></span><br><span class="line">    lift = <span class="type">MaybeT</span> . (liftM <span class="type">Just</span>)</span><br></pre></td></tr></table></figure>
<h2 id="改写">改写</h2><p>有了 <code>MaybeT</code> 代码可以这么写</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">getValidPassphrase</span> :: <span class="type">MaybeT</span> <span class="type">IO</span> <span class="type">String</span></span><br><span class="line"><span class="title">getValidPassphrase</span> = <span class="keyword">do</span> s &lt;- lift getLine <span class="comment">-- 将 IO String 提升为 Maybe (IO String)</span></span><br><span class="line">                        guard (isValid s) <span class="comment">-- MonadPlus 类型类使我们能够使用 guard. 这里 s 为 String 类型</span></span><br><span class="line">                        return s</span><br><span class="line"></span><br><span class="line"><span class="title">askPassphrase</span> :: <span class="type">MaybeT</span> <span class="type">IO</span> ()</span><br><span class="line"><span class="title">askPassphrase</span> = <span class="keyword">do</span> lift $ putStrLn <span class="string">"输入新密码:"</span> <span class="comment">-- 将 IO () 提升为 Maybe (IO ())</span></span><br><span class="line">                   value &lt;- getValidPassphrase <span class="comment">-- value 为 String 类型</span></span><br><span class="line">                   lift $ putStrLn <span class="string">"储存中..."</span></span><br></pre></td></tr></table></figure>
<p>没有了检查的过程，因为全都藏在 <code>MaybeT</code> 的 <code>&gt;&gt;=</code> 里面了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>组合两个 Monad 的 Monad</p>]]>
    
    </summary>
    
      <category term="Haskell" scheme="http://en.ors-sro.com/tags/Haskell/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ES6 Generator]]></title>
    <link href="http://en.ors-sro.com/ES6-Generator/"/>
    <id>http://en.ors-sro.com/ES6-Generator/</id>
    <published>2017-03-19T10:09:15.000Z</published>
    <updated>2017-03-19T10:46:01.827Z</updated>
    <content type="html"><![CDATA[<p>类似 C# 的 IEmulator</p>
<a id="more"></a>
<h2 id="定义">定义</h2><p>ES6 新增了 Generator ，类似于 C# 的 IEmulator 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 函数前面加 * 表示是 generator 函数</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span> <span class="comment">// yield 返回一个值</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// undefine</span></span><br></pre></td></tr></table></figure>
<p>Generator 可以是无限的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">Fibonacci</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="pi">  "use strict"</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line">    <span class="keyword">let</span> sum = a + b</span><br><span class="line">    a = b</span><br><span class="line">    b = sum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印前十个斐波那契数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = Fibonacci();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(f.next().value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 1 1 2 3 5 8 13 21 54</span></span><br></pre></td></tr></table></figure>
<p>Generator 可以嵌套</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span>* AnotherGen()</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">AnotherGen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"a"</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"b"</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">"c"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// "a"</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// "b"</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// "c"</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>Generator 可以模拟线程调度实现携程的效果，因为 Generator 可以让出控制权，达到暂停的效果。</p>
<h2 id="参考">参考</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="external">MDN</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>类似 C# 的 IEmulator</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://en.ors-sro.com/tags/JavaScript/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[迁移到 ES6+]]></title>
    <link href="http://en.ors-sro.com/Migrate-to-es6/"/>
    <id>http://en.ors-sro.com/Migrate-to-es6/</id>
    <published>2017-03-12T08:23:40.000Z</published>
    <updated>2017-03-12T08:39:23.988Z</updated>
    <content type="html"><![CDATA[<p>记录一些迁移到 ES6 、ES7 的笔记，主要参考了 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a></p>
<p>新增了很多内容，这里只记录常用的。</p>
<a id="more"></a>
<h2 id="变量声明">变量声明</h2><p>ES6 新增了两个变量声明的关键词 <code>let</code> 和 <code>const</code></p>
<p><code>let</code> 用于代替 <code>var</code> 。</p>
<p><code>let</code> 不会像 <code>var</code> 那样声明为全局变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>所以也不需要 IIFE 了。因为 <code>let</code> 声明相当于块级作用域</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>const</code> 用于声明只读的常量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>
<p><a href="/Airbnb-es6-style-guide/#引用">详情</a></p>
<h2 id="解构">解构</h2><p>ES6 增加了变量解构赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>解构赋值很灵活</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<p>解构赋值可用于多值返回，参数解构等</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;z: <span class="number">3</span>, y: <span class="number">2</span>, x: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="字符串">字符串</h2><p>字符串操作新增了很多方法，主要说几个常用的。</p>
<p><code>includes()</code> 判断是否包含特定字符串</p>
<p><code>startsWith()</code> 判断是否以特定字符串开头</p>
<p><code>endsWith()</code> 判断是否以特定字符串结尾</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p> ES6 还新增了模板字符串，用``` 包裹 。模板字符串中的空格和换行都会保留。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`string text line 1</span><br><span class="line">string text line 2`</span>);</span><br></pre></td></tr></table></figure>
<p>还可以用作插值表达式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串中嵌入变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure>
<h2 id="数值">数值</h2><p>ES6 新增二进制和八进制的表示法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b10000000000</span> === <span class="number">1024</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">0o2000</span> === <span class="number">1024</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>还新增了一些处理数字的方法，常用的有</p>
<p><code>Number.isNan()</code> 判断是否为 <code>NaN</code> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">15</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'15'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">true</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="number">9</span>/<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'true'</span>/<span class="number">0</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'true'</span>/<span class="string">'true'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><code>Math.truct()</code> 截断小数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.1</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="number">4.9</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">4.1</span>) <span class="comment">// -4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">4.9</span>) <span class="comment">// -4</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(-<span class="number">0.1234</span>) <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'123.456'</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="literal">NaN</span>);      <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.trunc(<span class="string">'foo'</span>);    <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.trunc();         <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p><code>Math.sign()</code> 判断正负</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.sign(-<span class="number">5</span>) <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">5</span>) <span class="comment">// +1</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="number">0</span>) <span class="comment">// +0</span></span><br><span class="line"><span class="built_in">Math</span>.sign(-<span class="number">0</span>) <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="literal">NaN</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.sign(<span class="string">'foo'</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Math</span>.sign();      <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>此外还新增了指数运算符 <code>**</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> <span class="comment">// 4</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">a **= <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 等同于 a = a ** 2 = a * a;</span></span><br></pre></td></tr></table></figure>
<h2 id="数组">数组</h2><p>数组也新增了方法，常用的有</p>
<p><code>Array.from()</code> 用于将类数组转为数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NodeList对象</span></span><br><span class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"><span class="built_in">Array</span>.from(ps).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Array.of()</code> 将一组值转化为数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><code>find()</code> 返回符合条件的元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, -<span class="number">5</span>, <span class="number">10</span>].find((n) =&gt; n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br></pre></td></tr></table></figure>
<p><code>findIndex()</code> 返回符合条件的元素索引</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>所以以后使用 <code>indexOf</code> 时优先考虑使用 <code>includes()</code> 、<code>find()</code> 、<code>findIndex()</code> </p>
<h2 id="函数声明">函数声明</h2><p>ES6 新增了胖箭头函数用于声明 $\lambda$ 表达式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = v =&gt; v;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = () =&gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = (num1, num2) =&gt; num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用箭头函数还有一个好处就是不用手动绑定 <code>this</code> 。</p>
<p>ES6 新增了对参数默认值的支持</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log(x, y = 'World') &#123;</span><br><span class="line">  console.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log('Hello') // Hello World</span><br><span class="line">log('Hello', 'China') // Hello China</span><br><span class="line">log('Hello', '') // Hello</span><br></pre></td></tr></table></figure>
<p>可以和解构赋值搭配使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = 5&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(&#123;&#125;) <span class="comment">// undefined, 5</span></span><br><span class="line">foo(&#123;x: <span class="number">1</span>&#125;) <span class="comment">// 1, 5</span></span><br><span class="line">foo(&#123;x: <span class="number">1</span>, y: <span class="number">2</span>&#125;) <span class="comment">// 1, 2</span></span><br><span class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></span><br></pre></td></tr></table></figure>
<p>还新增了不定参数的支持</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p>新增扩展运算符，将数组化为元素序列</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</span><br><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure>
<p>可以用于合并数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].concat(more)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure>
<p>还可以搭配解构赋值使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> a = list[<span class="number">0</span>], rest = list.slice(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> [a, ...rest] = list</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<h2 id="对象">对象</h2><p>ES6 新增对象声明语法糖 <code>class</code></p>
<p>用传统的原型链声明一个对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>用 <code>class</code> 语法糖</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还可以使用 <code>extends</code> 来继承，使用 <code>super()</code> 调用父类函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新增了一些简化表示法</p>
<p>属性简写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">var</span> baz = &#123;foo&#125;;</span><br><span class="line">baz <span class="comment">// &#123;foo: "bar"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> baz = &#123;foo: foo&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;x: x, y: y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// Object &#123;x: 1, y: 2&#125;</span></span><br></pre></td></tr></table></figure>
<p>方法简写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  method() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a href="/Airbnb-es6-style-guide/#对象">详情</a></p>
<h2 id="Promise">Promise</h2><p><a href="/Promise">ES6 Promise</a></p>
<h2 id="迭代">迭代</h2><p>新增了 <code>for ... of</code> 迭代，相当于其他语言的 <code>for each</code> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还可搭配新增的 <code>entries()</code> 、<code>key()</code> 、<code>value()</code> 使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure>
<h2 id="代码风格">代码风格</h2><p>两空格缩进，不添加分号。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记录一些迁移到 ES6 、ES7 的笔记，主要参考了 <a href="http://es6.ruanyifeng.com/">ECMAScript 6 入门</a></p>
<p>新增了很多内容，这里只记录常用的。</p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://en.ors-sro.com/tags/JavaScript/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Haskell 代码片段]]></title>
    <link href="http://en.ors-sro.com/Haskell-codes/"/>
    <id>http://en.ors-sro.com/Haskell-codes/</id>
    <published>2017-03-05T08:22:01.000Z</published>
    <updated>2017-03-05T08:27:14.665Z</updated>
    <content type="html"><![CDATA[<p>一些零碎的代码,摘自 《 Haskell 趣学指南》，包含常用函数等。</p>
<a id="more"></a>
<h4 id="succ">succ</h4><p><code>succ</code> 返回后继</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; succ <span class="number">8</span>  </span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<h4 id="max">max</h4><p><code>max</code> 返回最大值</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; max <span class="number">100</span> <span class="number">101</span>  </span><br><span class="line"><span class="number">101</span></span><br></pre></td></tr></table></figure>
<h4 id="min">min</h4><p><code>min</code> 返回最小值</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; min <span class="number">9</span> <span class="number">10</span>  </span><br><span class="line"><span class="number">9</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; min <span class="number">3.4</span> <span class="number">3.2</span>  </span><br><span class="line"><span class="number">3.2</span></span><br></pre></td></tr></table></figure>
<h4 id="!!">!!</h4><p><code>!!</code> 按索引获取元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="string">"Steve Buscemi"</span> !! <span class="number">6</span>  </span><br><span class="line">'<span class="type">B'</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">9.4</span>,<span class="number">33.2</span>,<span class="number">96.2</span>,<span class="number">11.2</span>,<span class="number">23.25</span>] !! <span class="number">1</span>  </span><br><span class="line"><span class="number">33.2</span></span><br></pre></td></tr></table></figure>
<h4 id="head">head</h4><p><code>head</code> 取列表的第一个元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; head [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<h4 id="tail">tail</h4><p><code>tail</code> 取列表除了第一个元素的所有元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; tail [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h4 id="last">last</h4><p><code>last</code> 取列表的最后一个元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; last [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="init">init</h4><p><code>init</code> 取列表除了最后一个元素的所有元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; init [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h4 id="inits">inits</h4><p><code>inits</code> 重复取 <code>init</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; inits <span class="string">"w00t"</span>  </span><br><span class="line">[<span class="string">""</span>,<span class="string">"w"</span>,<span class="string">"w0"</span>,<span class="string">"w00"</span>,<span class="string">"w00t"</span>]</span><br></pre></td></tr></table></figure>
<h4 id="tails">tails</h4><p><code>tails</code> 重复取 <code>tail</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; tails <span class="string">"w00t"</span>  </span><br><span class="line">[<span class="string">"w00t"</span>,<span class="string">"00t"</span>,<span class="string">"0t"</span>,<span class="string">"t"</span>,<span class="string">""</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> w = <span class="string">"w00t"</span> <span class="keyword">in</span> zip (inits w) (tails w)  </span><br><span class="line">[(<span class="string">""</span>,<span class="string">"w00t"</span>),(<span class="string">"w"</span>,<span class="string">"00t"</span>),(<span class="string">"w0"</span>,<span class="string">"0t"</span>),(<span class="string">"w00"</span>,<span class="string">"t"</span>),(<span class="string">"w00t"</span>,<span class="string">""</span>)]</span><br></pre></td></tr></table></figure>
<h4 id="length">length</h4><p><code>length</code> 获取列表的长度</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; length [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<h4 id="null">null</h4><p><code>null</code> 判断列表是否为空</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; null [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="type">False</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; null []  </span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure>
<h4 id="reverse">reverse</h4><p><code>reverse</code> 反转一个列表</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; reverse [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h4 id="take">take</h4><p><code>take</code> 拿取一定数量的元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; take <span class="number">3</span> [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; take <span class="number">1</span> [<span class="number">3</span>,<span class="number">9</span>,<span class="number">3</span>]  </span><br><span class="line">[<span class="number">3</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; take <span class="number">5</span> [<span class="number">1</span>,<span class="number">2</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; take <span class="number">0</span> [<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]  </span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<h4 id="drop">drop</h4><p><code>drop</code> 抛弃一定数量的元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; drop <span class="number">3</span> [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; drop <span class="number">0</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; drop <span class="number">100</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<h4 id="maximum">maximum</h4><p><code>maximum</code> 返回列表最大值</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; maximum [<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<h4 id="minimum">minimum</h4><p><code>minimum</code> 返回列表最小值</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; minimum [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="sum">sum</h4><p><code>sum</code> 列表求和</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sum [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]  </span><br><span class="line"><span class="number">31</span></span><br></pre></td></tr></table></figure>
<h4 id="product">product</h4><p><code>product</code> 列表求积</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; product [<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]  </span><br><span class="line"><span class="number">24</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; product [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">0</span>]  </span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="elem">elem</h4><p><code>elem</code> 判断元素是否存在</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">10</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<h4 id="elemIndex">elemIndex</h4><p><code>elemIndex</code> 返回第一个指定元素索引</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :t elemIndex  </span><br><span class="line"><span class="title">elemIndex</span> :: (<span class="type">Eq</span> a) =&gt; a -&gt; [a] -&gt; <span class="type">Maybe</span> <span class="type">Int</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> `elemIndex` [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">3</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">10</span> `elemIndex` [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<h4 id="elemIndices">elemIndices</h4><p><code>elemIndices</code> 返回所有指定元素索引</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; ' ' `elemIndices` <span class="string">"Where are the spaces?"</span>  </span><br><span class="line">[<span class="number">5</span>,<span class="number">9</span>,<span class="number">13</span>]</span><br></pre></td></tr></table></figure>
<h4 id="find">find</h4><p><code>find</code> 查找符合条件的元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; find (&gt;<span class="number">4</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">5</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; find (&gt;<span class="number">9</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">Nothing</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; :t find  </span><br><span class="line"><span class="title">find</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; <span class="type">Maybe</span> a</span><br></pre></td></tr></table></figure>
<h4 id="findIndex">findIndex</h4><p><code>findIndex</code> 返回符合条件的元素索引</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; findIndex (==<span class="number">4</span>) [<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">5</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; findIndex (==<span class="number">7</span>) [<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="type">Nothing</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; findIndices (`elem` ['<span class="type">A'</span>..'<span class="type">Z'</span>]) <span class="string">"Where Are The Caps?"</span>  </span><br><span class="line">[<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>]</span><br></pre></td></tr></table></figure>
<h4 id="cycle">cycle</h4><p><code>cycle</code> 循环拼接列表</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (cycle [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; take <span class="number">12</span> (cycle <span class="string">"LOL "</span>)  </span><br><span class="line"><span class="string">"LOL LOL LOL "</span></span><br></pre></td></tr></table></figure>
<h4 id="repeat">repeat</h4><p><code>repeat</code> 重复指定元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (repeat <span class="number">5</span>)  </span><br><span class="line">[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h4 id="zip">zip</h4><p><code>zip</code> 压缩函数，类似拉链</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]  </span><br><span class="line">[(<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">5</span>)]  </span><br><span class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1</span> .. <span class="number">5</span>] [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>]  </span><br><span class="line">[(<span class="number">1</span>,<span class="string">"one"</span>),(<span class="number">2</span>,<span class="string">"two"</span>),(<span class="number">3</span>,<span class="string">"three"</span>),(<span class="number">4</span>,<span class="string">"four"</span>),(<span class="number">5</span>,<span class="string">"five"</span>)]  </span><br><span class="line"><span class="title">ghci</span>&gt; zip [<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>] [<span class="string">"im"</span>,<span class="string">"a"</span>,<span class="string">"turtle"</span>]  </span><br><span class="line">[(<span class="number">5</span>,<span class="string">"im"</span>),(<span class="number">3</span>,<span class="string">"a"</span>),(<span class="number">2</span>,<span class="string">"turtle"</span>)]  </span><br><span class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1.</span>.] [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"cherry"</span>, <span class="string">"mango"</span>]  </span><br><span class="line">[(<span class="number">1</span>,<span class="string">"apple"</span>),(<span class="number">2</span>,<span class="string">"orange"</span>),(<span class="number">3</span>,<span class="string">"cherry"</span>),(<span class="number">4</span>,<span class="string">"mango"</span>)]</span><br></pre></td></tr></table></figure>
<h4 id="zipWith">zipWith</h4><p><code>zipWith</code> 用指定的方式 <code>zip</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zipWith (+) [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>] [<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">[<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; zipWith max [<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] [<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; zipWith (++) [<span class="string">"foo "</span>, <span class="string">"bar "</span>, <span class="string">"baz "</span>] [<span class="string">"fighters"</span>, <span class="string">"hoppers"</span>, <span class="string">"aldrin"</span>]  </span><br><span class="line">[<span class="string">"foo fighters"</span>,<span class="string">"bar hoppers"</span>,<span class="string">"baz aldrin"</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; zipWith (*) (replicate <span class="number">5</span> <span class="number">2</span>) [<span class="number">1.</span>.]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; zipWith (zipWith (*)) [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]] [[<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]]  </span><br><span class="line">[[<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">9</span>,<span class="number">20</span>,<span class="number">30</span>],[<span class="number">10</span>,<span class="number">12</span>,<span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<h4 id="zip3">zip3</h4><p><code>zip3</code> 是 <code>zip</code> 的 3 个参数版本</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zip3 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>] [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>] [<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>] </span><br><span class="line">[(<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)]</span><br></pre></td></tr></table></figure>
<h4 id="zipWith3">zipWith3</h4><p><code>zipWith3</code> 是 <code>zipWith</code> 的 3 个参数版本</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zipWith3 (\x y z -&gt; x + y + z) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] [<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>] [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">[<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<h4 id="map">map</h4><p><code>map</code> 对列表每个元素应用函数</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map (+<span class="number">3</span>) [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>]  </span><br><span class="line">[<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; map (++ <span class="string">"!"</span>) [<span class="string">"BIFF"</span>, <span class="string">"BANG"</span>, <span class="string">"POW"</span>]  </span><br><span class="line">[<span class="string">"BIFF!"</span>,<span class="string">"BANG!"</span>,<span class="string">"POW!"</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; map (replicate <span class="number">3</span>) [<span class="number">3.</span>.<span class="number">6</span>]  </span><br><span class="line">[[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; map (map (^<span class="number">2</span>)) [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">36</span>],[<span class="number">49</span>,<span class="number">64</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; map fst [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">6</span>),(<span class="number">2</span>,<span class="number">5</span>)]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h4 id="filter">filter</h4><p><code>filter</code> 过滤出列表中复合条件的元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; filter (&gt;<span class="number">3</span>) [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; filter (==<span class="number">3</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">3</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; filter even [<span class="number">1.</span>.<span class="number">10</span>]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> notNull x = not (null x) <span class="keyword">in</span> filter notNull [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">2</span>],[],[],[]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">2</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; filter (`elem` ['a'..'z']) <span class="string">"u LaUgH aT mE BeCaUsE I aM diFfeRent"</span>  </span><br><span class="line"><span class="string">"uagameasadifeent"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; filter (`elem` ['<span class="type">A'</span>..'<span class="type">Z'</span>]) <span class="string">"i lauGh At You BecAuse u r aLL the Same"</span>  </span><br><span class="line"><span class="string">"GAYBALLS"</span></span><br></pre></td></tr></table></figure>
<h4 id="takeWhile">takeWhile</h4><p><code>takeWhile</code> 一直 <code>take</code> 直到条件不满足</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; takeWhile (/=' ') <span class="string">"elephants know how to party"</span></span><br><span class="line"><span class="string">"elephants"</span></span><br><span class="line"><span class="title">ghci</span>&gt; sum (takeWhile (&lt;<span class="number">10000</span>) (filter odd (map (^<span class="number">2</span>) [<span class="number">1.</span>.])))  </span><br><span class="line"><span class="number">166650</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; sum (takeWhile (&lt;<span class="number">10000</span>) [n^<span class="number">2</span> | n &lt;- [<span class="number">1.</span>.], odd (n^<span class="number">2</span>)])  </span><br><span class="line"><span class="number">166650</span></span><br></pre></td></tr></table></figure>
<h4 id="dropWhile">dropWhile</h4><p><code>dropWhile</code> 一直 <code>drop</code> 直到条件不满足</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; dropWhile (/=' ') <span class="string">"This is a sentence"</span>  </span><br><span class="line"><span class="string">" is a sentence"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; dropWhile (&lt;<span class="number">3</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h4 id="intersperse">intersperse</h4><p><code>intersperse</code> 在列表元素之间插入指定元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; intersperse '.' <span class="string">"MONKEY"</span>  </span><br><span class="line"><span class="string">"M.O.N.K.E.Y"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; intersperse <span class="number">0</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<h4 id="intercalate">intercalate</h4><p><code>intercalate</code> 将一个列表插入到另一个列表元素之间</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; intercalate <span class="string">" "</span> [<span class="string">"hey"</span>,<span class="string">"there"</span>,<span class="string">"guys"</span>]  </span><br><span class="line"><span class="string">"hey there guys"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; intercalate [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<h4 id="transpose">transpose</h4><p><code>transpose</code> 转置矩阵</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; transpose [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; transpose [<span class="string">"hey"</span>,<span class="string">"there"</span>,<span class="string">"guys"</span>]  </span><br><span class="line">[<span class="string">"htg"</span>,<span class="string">"ehu"</span>,<span class="string">"yey"</span>,<span class="string">"rs"</span>,<span class="string">"e"</span>]</span><br></pre></td></tr></table></figure>
<h4 id="concat">concat</h4><p><code>concat</code> 拍扁列表</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; concat [<span class="string">"foo"</span>,<span class="string">"bar"</span>,<span class="string">"car"</span>]  </span><br><span class="line"><span class="string">"foobarcar"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; concat [[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h4 id="concatMap">concatMap</h4><p><code>concatMap</code> 先 <code>map</code> 后 <code>concat</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; concatMap (replicate <span class="number">4</span>) [<span class="number">1.</span>.<span class="number">3</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h4 id="and">and</h4><p><code>and</code> 返回列表是否全是 <code>true</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; and $ map (&gt;<span class="number">4</span>) [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; and $ map (==<span class="number">4</span>) [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<h4 id="or">or</h4><p><code>or</code> 返回列表是否存在 true</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; or $ map (==<span class="number">4</span>) [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; or $ map (&gt;<span class="number">4</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<h4 id="any">any</h4><p><code>any</code> 返回列表是否存在元素满足条件</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; any (==<span class="number">4</span>) [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; any (`elem` ['<span class="type">A'</span>..'<span class="type">Z'</span>]) <span class="string">"HEYGUYSwhatsup"</span>  </span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure>
<h4 id="all">all</h4><p><code>all</code> 返回列表是否全部元素满足条件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghci&#62; all (&#62;4) [6,9,10]  &#10;True  &#10;ghci&#62; all (`elem` [&#39;A&#39;..&#39;Z&#39;]) &#34;HEYGUYSwhatsup&#34;  &#10;False</span><br></pre></td></tr></table></figure>
<h4 id="iterate">iterate</h4><p><code>iterate</code> 返回重复迭代的结果</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> $ iterate (*<span class="number">2</span>) <span class="number">1</span>  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">256</span>,<span class="number">512</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; take <span class="number">3</span> $ iterate (++ <span class="string">"haha"</span>) <span class="string">"haha"</span>  </span><br><span class="line">[<span class="string">"haha"</span>,<span class="string">"hahahaha"</span>,<span class="string">"hahahahahaha"</span>]</span><br></pre></td></tr></table></figure>
<h4 id="splitAt">splitAt</h4><p><code>splitAt</code> 在指定位置分隔数组</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; splitAt <span class="number">3</span> <span class="string">"heyman"</span>  </span><br><span class="line">(<span class="string">"hey"</span>,<span class="string">"man"</span>)  </span><br><span class="line"><span class="title">ghci</span>&gt; splitAt <span class="number">100</span> <span class="string">"heyman"</span>  </span><br><span class="line">(<span class="string">"heyman"</span>,<span class="string">""</span>)  </span><br><span class="line"><span class="title">ghci</span>&gt; splitAt (-<span class="number">3</span>) <span class="string">"heyman"</span>  </span><br><span class="line">(<span class="string">""</span>,<span class="string">"heyman"</span>)  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> (a,b) = splitAt <span class="number">3</span> <span class="string">"foobar"</span> <span class="keyword">in</span> b ++ a  </span><br><span class="line"><span class="string">"barfoo"</span></span><br></pre></td></tr></table></figure>
<h4 id="span">span</h4><p><code>span</code> 将列表分割为满足条件的列表和不满足条件的列表</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; span (/=<span class="number">4</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]  </span><br><span class="line">([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br></pre></td></tr></table></figure>
<h4 id="break">break</h4><p><code>break</code> 在满足条件时分割列表</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; break (==<span class="number">4</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]  </span><br><span class="line">([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br></pre></td></tr></table></figure>
<h4 id="partition">partition</h4><p><code>partition</code> 类似 <code>span</code> 和 <code>break</code> 不过会对整个列表进行过滤。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; partition (`elem` ['<span class="type">A'</span>..'<span class="type">Z'</span>]) <span class="string">"BOBsidneyMORGANeddy"</span>  </span><br><span class="line">(<span class="string">"BOBMORGAN"</span>,<span class="string">"sidneyeddy"</span>)  </span><br><span class="line"><span class="title">ghci</span>&gt; partition (&gt;<span class="number">3</span>) [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">7</span>]  </span><br><span class="line">([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>])  </span><br><span class="line"><span class="title">ghci</span>&gt; span (`elem` ['<span class="type">A'</span>..'<span class="type">Z'</span>]) <span class="string">"BOBsidneyMORGANeddy"</span>  </span><br><span class="line">(<span class="string">"BOB"</span>,<span class="string">"sidneyMORGANeddy"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="sort">sort</h4><p><code>sort</code> 列表排序</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sort [<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sort <span class="string">"This will be sorted soon"</span>  </span><br><span class="line"><span class="string">"    Tbdeehiillnooorssstw"</span></span><br></pre></td></tr></table></figure>
<h4 id="group">group</h4><p><code>group</code> 列表分组</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; group [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">5</span>],[<span class="number">6</span>],[<span class="number">7</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; map (\l@(x:xs) -&gt; (x,length l)) . group . sort $ [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]  </span><br><span class="line">[(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
<h4 id="isPrefixOf">isPrefixOf</h4><p><code>isPrefixOf</code> 判断是否为前缀</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="string">"hey"</span> `isPrefixOf` <span class="string">"hey there!"</span>  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="string">"hey"</span> `isPrefixOf` <span class="string">"oh hey there!"</span>  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<h4 id="isInfixOf">isInfixOf</h4><p><code>isInfixOf</code> 判断是否为中缀</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="string">"cat"</span> `isInfixOf` <span class="string">"im a cat burglar"</span>  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="string">"Cat"</span> `isInfixOf` <span class="string">"im a cat burglar"</span>  </span><br><span class="line"><span class="type">False</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="string">"cats"</span> `isInfixOf` <span class="string">"im a cat burglar"</span>  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<h4 id="isSuffixOf">isSuffixOf</h4><p><code>isSuffixOf</code> 判断是否为后缀</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="string">"there!"</span> `isSuffixOf` <span class="string">"oh hey there!"</span>  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="string">"there!"</span> `isSuffixOf` <span class="string">"oh hey there"</span>  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<h4 id="lines">lines</h4><p><code>lines</code> 将字符串拆为多行</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; lines <span class="string">"first line\nsecond line\nthird line"</span>  </span><br><span class="line">[<span class="string">"first line"</span>,<span class="string">"second line"</span>,<span class="string">"third line"</span>]</span><br></pre></td></tr></table></figure>
<h4 id="unlines">unlines</h4><p><code>unlines</code> 与 <code>lines</code> 相反</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; unlines [<span class="string">"first line"</span>, <span class="string">"second line"</span>, <span class="string">"third line"</span>]  </span><br><span class="line"><span class="string">"first line\nsecond line\nthird line\n"</span></span><br></pre></td></tr></table></figure>
<h4 id="words">words</h4><p><code>words</code> 将字符串拆成多个词组</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; words <span class="string">"hey these are the words in this sentence"</span>  </span><br><span class="line">[<span class="string">"hey"</span>,<span class="string">"these"</span>,<span class="string">"are"</span>,<span class="string">"the"</span>,<span class="string">"words"</span>,<span class="string">"in"</span>,<span class="string">"this"</span>,<span class="string">"sentence"</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; words <span class="string">"hey these           are    the words in this\nsentence"</span>  </span><br><span class="line">[<span class="string">"hey"</span>,<span class="string">"these"</span>,<span class="string">"are"</span>,<span class="string">"the"</span>,<span class="string">"words"</span>,<span class="string">"in"</span>,<span class="string">"this"</span>,<span class="string">"sentence"</span>]</span><br></pre></td></tr></table></figure>
<h4 id="unwords">unwords</h4><p><code>unwords</code> 与 <code>words</code> 相反</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; unwords [<span class="string">"hey"</span>,<span class="string">"there"</span>,<span class="string">"mate"</span>]  </span><br><span class="line"><span class="string">"hey there mate"</span></span><br></pre></td></tr></table></figure>
<h4 id="nub">nub</h4><p><code>nub</code> 移除重复元素，获得最小核心</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; nub [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; nub <span class="string">"Lots of words and stuff"</span>  </span><br><span class="line"><span class="string">"Lots fwrdanu"</span></span><br></pre></td></tr></table></figure>
<h4 id="delete">delete</h4><p><code>delete</code> 移除第一个指定元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; delete 'h' <span class="string">"hey there ghang!"</span>  </span><br><span class="line"><span class="string">"ey there ghang!"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; delete 'h' . delete 'h' $ <span class="string">"hey there ghang!"</span>  </span><br><span class="line"><span class="string">"ey tere ghang!"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; delete 'h' . delete 'h' . delete 'h' $ <span class="string">"hey there ghang!"</span>  </span><br><span class="line"><span class="string">"ey tere gang!"</span></span><br></pre></td></tr></table></figure>
<h4 id="\\">\\</h4><p><code>\\</code> 去除共同部分</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1.</span>.<span class="number">10</span>] \\ [<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="string">"Im a big baby"</span> \\ <span class="string">"big"</span>  </span><br><span class="line"><span class="string">"Im a  baby"</span></span><br></pre></td></tr></table></figure>
<h4 id="union">union</h4><p><code>union</code> 集合并</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="string">"hey man"</span> `union` <span class="string">"man what's up"</span>  </span><br><span class="line"><span class="string">"hey manwt'sup"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1.</span>.<span class="number">7</span>] `union` [<span class="number">5.</span>.<span class="number">10</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<h4 id="intersect">intersect</h4><p><code>intersect</code> 集合交</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1.</span>.<span class="number">7</span>] `intersect` [<span class="number">5.</span>.<span class="number">10</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<h4 id="fst">fst</h4><p><code>fst</code> 获取二元组的第一个元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fst (<span class="number">8</span>,<span class="number">11</span>)  </span><br><span class="line"><span class="number">8</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; fst (<span class="string">"Wow"</span>, <span class="type">False</span>)  </span><br><span class="line"><span class="string">"Wow"</span></span><br></pre></td></tr></table></figure>
<h4 id="snd">snd</h4><p><code>snd</code> 获取二元组的第二个元素</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; snd (<span class="number">8</span>,<span class="number">11</span>)  </span><br><span class="line"><span class="number">11</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; snd (<span class="string">"Wow"</span>, <span class="type">False</span>)  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<h4 id="flip">flip</h4><p><code>flip</code> 返回函数的翻转版本</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; flip zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="string">"hello"</span>  </span><br><span class="line">[('h',<span class="number">1</span>),('e',<span class="number">2</span>),('l',<span class="number">3</span>),('l',<span class="number">4</span>),('o',<span class="number">5</span>)]  </span><br><span class="line"><span class="title">ghci</span>&gt; zipWith (flip' div) [<span class="number">2</span>,<span class="number">2.</span>.] [<span class="number">10</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h4 id="when">when</h4><p><code>when</code> 相当于没有 <code>else</code> 的 <code>if</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> Control.Monad   </span></span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    c &lt;- getChar  </span><br><span class="line">    when (c /= ' ') $ <span class="keyword">do</span>  </span><br><span class="line">        putChar c  </span><br><span class="line">        main</span><br></pre></td></tr></table></figure>
<h4 id="sequence">sequence</h4><p><code>sequence</code> 执行一系列的输入输出操作</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    a &lt;- getLine  </span><br><span class="line">    b &lt;- getLine  </span><br><span class="line">    c &lt;- getLine  </span><br><span class="line">    print [a,b,c]  </span><br><span class="line"><span class="comment">-- 相当于</span></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    rs &lt;- sequence [getLine, getLine, getLine]  </span><br><span class="line">    print rs</span><br></pre></td></tr></table></figure>
<h4 id="mapM">mapM</h4><p><code>mapM</code> 先进行 <code>map</code> 再遍历返回的 Monad</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sequence (map print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])  </span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  </span><br><span class="line"><span class="number">3</span>  </span><br><span class="line"><span class="number">4</span>  </span><br><span class="line"><span class="number">5</span>  </span><br><span class="line">[(),(),(),(),()]  </span><br><span class="line"><span class="comment">-- 相当于</span></span><br><span class="line"><span class="title">ghci</span>&gt; mapM print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  </span><br><span class="line"><span class="number">3</span>  </span><br><span class="line">[(),(),()]</span><br></pre></td></tr></table></figure>
<p>mapM_</p>
<p><code>mapM_</code> 类似 <code>mapM</code> 只是不关心返回的结果</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mapM_ print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>一些零碎的代码,摘自 《 Haskell 趣学指南》，包含常用函数等。</p>]]>
    
    </summary>
    
      <category term="Haskell" scheme="http://en.ors-sro.com/tags/Haskell/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[逆变和协变]]></title>
    <link href="http://en.ors-sro.com/Covariant-and-Contravariant/"/>
    <id>http://en.ors-sro.com/Covariant-and-Contravariant/</id>
    <published>2017-02-25T09:00:51.000Z</published>
    <updated>2017-02-25T10:24:24.994Z</updated>
    <content type="html"><![CDATA[<p>$$<br>\dfrac{T_1 \leq S_1 \quad S_2 \leq T_2}{S_1 \rightarrow S_2 \leq T_1 \rightarrow T_2}<br>$$</p>
<a id="more"></a>
<h2 id="简单的代换">简单的代换</h2><p>假设有三个类，Animal ，Cat，Dog。其中 Cat 和 Dog 是 Animal 的子类。</p>
<p>有一段这样的转换代码</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">Cat b = <span class="keyword">new</span> Animal();</span><br><span class="line">Dog c = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure>
<p>有哪些可以通过编译呢？</p>
<p>显然对面向对象有基本了解到人都能很快答出只有第一行能编译通过。</p>
<p>第二行因为不是所有 Animal 都是 Cat 。所以在赋值的时候转换失败。</p>
<p>第三行因为 Dog 和 Cat 是不同的类，除非定义转换方式或者内存分布一致，否则通常是失败的。</p>
<p>第一行是可以编译通过是因为面向对象的继承特性。</p>
<p>继承允许子类拥有父类相同的行为，又可以有自己独特的行为。</p>
<p>所以子类替换父类，也就是熟悉的里氏代换原则。</p>
<h2 id="复合类型">复合类型</h2><p>除了基本的类型比如 int ，bool 等，还有一种复合类型比如 int[]，List&lt; int &gt; 等。</p>
<p>复合类型通常由类型构造器和类型参数组合而成，类似与函数和参数的关系。</p>
<p>比如 List&lt; int &gt; 的类型构造器是 List ，参数为 int</p>
<p>简单类型的替换非常直观，子类能够替换父类，父类不能替换子类。</p>
<p>复合类型的替换就不是那么直观了。</p>
<p>比如对于类型 Animal[] Animal数组和Cat[] Cat数组，这两个类型。</p>
<p>这个两个类型是什么关系？是否与 Animal 和 Cat 的关系有关？</p>
<p>答案是这两个类型没有任何关系。</p>
<p>仔细想想就能发现</p>
<p>Cat[] 并不能替换所有 Animal[] 。因为 Animal[] 可以装入 Dog 的实例，而 Cat[] 不可以。</p>
<p>Animal[] 也不能替换所有 Cat[] 。因为 Cat[] 中的 Cat 可以调用 Cat 类独有的方法，替换为 Animal 后，Animal 没有这个独有的方法，调用失败。</p>
<p>所以 Animal[] 和 Cat[] 是没有关系的。</p>
<p>是不是所有的 Animal 的复合类型和 Cat 的复合类型都没有关系呢？</p>
<p>其实不是的。</p>
<p>对于 Reader <code>(-&gt;)</code> 有</p>
<p>(Animal -&gt; Cat) 是 (Animal -&gt; Animal) 的子类型</p>
<p>(Animal -&gt; Animal) 是 (Cat -&gt; Animal) 的子类型</p>
<p>先说比较直观的第一个</p>
<p>要想说明 (Animal -&gt; Cat) 是 (Animal -&gt; Animal) 的子类型，需要子类能够替换父类。</p>
<p>显然父类 (Animal -&gt; Animal) 的返回值是 Animal ，如果替换成子类 (Animal -&gt; Cat)</p>
<p>输入类型 Animal 不变没问题，输出变成了Cat 。因为 Cat 能够替换 Animal 所以是没问题的。</p>
<p>所以 (Animal -&gt; Cat) 可以替换 (Animal -&gt; Animal) </p>
<p>所以 (Animal -&gt; Cat) 是 (Animal -&gt; Animal) 的子类型。</p>
<p>再看第二个</p>
<p>如果 (Animal -&gt; Animal) 替换 (Cat -&gt; Animal)。</p>
<p>输出都是 Animal 没问题。</p>
<p>输入变成了 Animal。看起来似乎是有问题的，因为 (Cat -&gt; Animal) 中有可能调用 Cat 的独有方法</p>
<p>其实是没问题的，因为替换成 (Animal -&gt; Animal) 后，(Animal -&gt; Animal) 没有 Cat 的独有方法，所以不会报错。</p>
<p>而且原本的输入 Cat 是可以转成现在的输入 Animal 的。</p>
<p>所以 (Animal -&gt; Animal) 可以替换 (Cat -&gt; Animal) 。</p>
<p>所以 (Animal -&gt; Animal) 是 (Cat -&gt; Animal) 的子类型。</p>
<p>(Animal -&gt; Cat) 替换 (Animal -&gt; Animal) 中用 Cat 替换 Animal 与原本的继承关系 Cat 替换 Animal 一致，所以称为协变。</p>
<p>(Animal -&gt; Animal) 替换 (Cat -&gt; Animal) 中用 Animal 替换 Cat 与原本的继承关系 Cat 替换 Animal 相反，所以称为逆变。</p>
<h2 id="继承">继承</h2><p>C++ 和 Java 允许通过继承父类重载函数实现返回值的协变</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Frog : Animal &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Parent </span><br><span class="line">&#123;</span><br><span class="line">    Animal a;</span><br><span class="line">    <span class="function">Animal <span class="title">GetAnAnimal</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child : Parent</span><br><span class="line">&#123;</span><br><span class="line">    Frog f;</span><br><span class="line">    <span class="function">Frog <span class="title">GetAnAnimal</span><span class="params">()</span> <span class="comment">// 返回值协变</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="参数化多态">参数化多态</h2><p>C# 支持在参数化多态中使用 <code>in</code> 和 <code>out</code> 标记逆变和协变</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">OutExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Method</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">int</span> i</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        i = <span class="number">44</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">value</span>;</span><br><span class="line">        Method(<span class="keyword">out</span> <span class="keyword">value</span>);</span><br><span class="line">        <span class="comment">// value is now 44</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不对，走错片场了。是这个</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GrandParent</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Parent</span> : <span class="title">GrandParent</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Child</span> : <span class="title">Parent</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">delegate</span> TResult Demo&lt;<span class="keyword">in</span> T, <span class="keyword">out</span> TResult&gt;(T argument);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Child <span class="title">Sample</span>(<span class="params">GrandParent person</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Child();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">// 参数逆变，返回值协变</span></span><br><span class="line">            Demo&lt;Parent, Parent&gt; d = Sample;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考链接">参考链接</h2><p><a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)" target="_blank" rel="external">逆变和协变的维基百科</a><br><a href="https://msdn.microsoft.com/zh-cn/library/t3c3bfhx.aspx" target="_blank" rel="external">C# Out</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>$$<br>\dfrac{T_1 \leq S_1 \quad S_2 \leq T_2}{S_1 \rightarrow S_2 \leq T_1 \rightarrow T_2}<br>$$</p>]]>
    
    </summary>
    
      <category term="逆变" scheme="http://en.ors-sro.com/tags/%E9%80%86%E5%8F%98/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SICP 2.1 数据抽象导论]]></title>
    <link href="http://en.ors-sro.com/SICP-2-1-Introduction-to-Data-Bbstraction/"/>
    <id>http://en.ors-sro.com/SICP-2-1-Introduction-to-Data-Bbstraction/</id>
    <published>2017-02-19T07:35:10.000Z</published>
    <updated>2017-02-19T09:04:58.014Z</updated>
    <content type="html"><![CDATA[<p>翻车到坑里</p>
<a id="more"></a>
<h2 id="笔记">笔记</h2><p>这一小节主要将数据封装的抽象，类似接口的感觉。</p>
<h2 id="习题">习题</h2><h3 id="习题_2-1">习题 2.1</h3><blockquote>
<p><strong>Exercise 2.1.</strong>  Define a better version of make-rat that handles both positive and negative arguments. Make-ratshould normalize the sign so that if the rational number is positive, both  the numerator and denominator are positive, and if the rational number is negative, only the numerator is negative.</p>
</blockquote>
<p>想要得到最简的表达式需要两个步骤，一个是需要除以最大公约数，第二个是符号处理。</p>
<p>最大公约数很简单，直接用前面小节的程序即可。</p>
<p>接着处理符号，考虑到负负得正，而题目中已经说明如果整个分式是负数，则分子保留负号。</p>
<p>那只需要判断分母符号就可以了。因为分母不可以有负号。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">0</span>)</span></span><br><span class="line">      a</span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> b <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> a b)</span>)</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> a b)</span></span><br><span class="line">      a</span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> a b)</span> b)</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">nagetive?</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> x <span class="number">0</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">make-rat</span> n d)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> g <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> n)</span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> d)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">nagetive?</span> d)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> n g)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> d g)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> n g)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> d g)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">make-rat</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;=&gt; (1 . 2)</span></span><br><span class="line"><span class="list">(<span class="keyword">make-rat</span> <span class="number">2</span> <span class="number">-4</span>)</span></span><br><span class="line"><span class="comment">;=&gt; (-1 . 2)</span></span><br><span class="line"><span class="list">(<span class="keyword">make-rat</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;=&gt; (-1 . 2)</span></span><br><span class="line"><span class="list">(<span class="keyword">make-rat</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">4</span>)</span>)</span></span><br><span class="line"><span class="comment">;=&gt; (1 . 2)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-2">习题 2.2</h3><blockquote>
<p><strong>Exercise 2.2.</strong>  Consider the problem of representing line segments in a plane. Each segment is represented as a pair of points: a starting point and an ending point. Define a constructor make-segment and selectors start-segment and end-segment that define the representation of segments in terms of points. Furthermore, a point can be represented as a pair of numbers: the <em>x</em> coordinate and the <em>y</em> coordinate. Accordingly, specify a constructor make-point and selectors x-point and y-point that define this representation. Finally, using your selectors and constructors, define a procedure midpoint-segment that takes a line segment as argument and returns its midpoint (the point whose coordinates are the average of the coordinates of the endpoints). To try your procedures, you’ll need a way to print points:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">print-point</span> p)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">newline</span></span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">"("</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="list">(<span class="keyword">x-point</span> p)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">","</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="list">(<span class="keyword">y-point</span> p)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">")"</span>)</span>)</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>点只需要记录 $x$，$y$。</p>
<p>线段只需要记录起点和终点。</p>
<p>直接用 <code>cons</code> 记录即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">make-point</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> x y)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">x-point</span> p)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">car</span></span> p)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">y-point</span> p)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cdr</span></span> p)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">print-point</span> p)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">"("</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="list">(<span class="keyword">x-point</span> p)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">","</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="list">(<span class="keyword">y-point</span> p)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">")"</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">newline</span></span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">make-segment</span> begin end)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> begin end)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">begin-segment</span> line)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">car</span></span> line)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">end-segment</span> line)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cdr</span></span> line)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">mid-point</span> line)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">average</span> x y)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">make-point</span> <span class="list">(<span class="keyword">average</span> <span class="list">(<span class="keyword">x-point</span> <span class="list">(<span class="keyword">begin-segment</span> line)</span>)</span> <span class="list">(<span class="keyword">x-point</span> <span class="list">(<span class="keyword">end-segment</span> line)</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">average</span> <span class="list">(<span class="keyword">y-point</span> <span class="list">(<span class="keyword">begin-segment</span> line)</span>)</span> <span class="list">(<span class="keyword">y-point</span> <span class="list">(<span class="keyword">end-segment</span> line)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">print-point</span> <span class="list">(<span class="keyword">mid-point</span> <span class="list">(<span class="keyword">make-segment</span> <span class="list">(<span class="keyword">make-point</span> <span class="number">1</span> <span class="number">1</span>)</span> <span class="list">(<span class="keyword">make-point</span> <span class="number">2</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;=&gt; (1.5 . 1.5)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-3">习题 2.3</h3><blockquote>
<p><strong>Exercise 2.3.</strong>  Implement a representation for rectangles in a plane. (Hint: You may want to make use of exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-14.html#%_thm_2.2" target="_blank" rel="external">2.2</a>.) In terms of your constructors and selectors, create procedures that compute the perimeter and the area of a given rectangle. Now implement a different representation for rectangles. Can you design your system with suitable abstraction barriers, so that the same perimeter and area procedures will work using either representation?</p>
</blockquote>
<p>确定一个矩形，只需要对角线上的两点即可。</p>
<p>通过构建抽象屏障（接口）使得实现和抽象分离。这样即使换了矩形的实现方式也不会影响。</p>
<p>这里选择的抽象屏障是矩形的长和宽，也就是无论矩形底层怎么实现，只要实现了长和宽接口就行。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">make-rectangle</span> p1 p2)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> p1 p2)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">begin-point</span> rect)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">car</span></span> rect)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">end-point</span> rect)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cdr</span></span> rect)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">x-length</span> rect)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">y-point</span> <span class="list">(<span class="keyword">begin-point</span> rect)</span>)</span> <span class="list">(<span class="keyword">y-point</span> <span class="list">(<span class="keyword">end-point</span> rect)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">y-lenth</span> rect)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">x-point</span> <span class="list">(<span class="keyword">begin-point</span> rect)</span>)</span> <span class="list">(<span class="keyword">x-point</span> <span class="list">(<span class="keyword">end-point</span> rect)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">perimeter</span> rect)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">x-lenth</span> rect)</span> <span class="list">(<span class="keyword">y-length</span> rect)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">area</span> rect)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">x-lenth</span> rect)</span> <span class="list">(<span class="keyword">y-length</span> rect)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">perimeter</span> <span class="list">(<span class="keyword">make-rectangle</span> <span class="list">(<span class="keyword">make-point</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword">make-point</span> <span class="number">2</span> <span class="number">4</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">; =&gt; 6</span></span><br><span class="line"><span class="list">(<span class="keyword">area</span> <span class="list">(<span class="keyword">make-rectangle</span> <span class="list">(<span class="keyword">make-point</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword">make-point</span> <span class="number">2</span> <span class="number">4</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">; =&gt; 2</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-4">习题 2.4</h3><blockquote>
<p><strong>Exercise 2.4.</strong>  Here is an alternative procedural representation of pairs. For this representation, verify that <code>(car (cons x y))</code> yields x for any objects x and y.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">m</span>)</span> <span class="list">(<span class="keyword">m</span> x y)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">car</span></span> z)</span></span><br><span class="line">  <span class="list">(<span class="keyword">z</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">p</span> q)</span> p)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>What is the corresponding definition of cdr? (Hint: To verify that this works, make use of the substitution model of section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.5" target="_blank" rel="external">1.1.5</a>.)</p>
</blockquote>
<p>按 Applicative-Order 展开即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">car</span></span> any-cons)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">any-cons</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">p</span> q)</span> p)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">m</span>)</span> <span class="list">(<span class="keyword">m</span> x y)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">p</span> q)</span> p)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">p</span> q)</span> p)</span> x y)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span> y)</span> x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; x</span></span><br></pre></td></tr></table></figure>
<p>观察 <code>(lambda (p q) p)</code> </p>
<p>把 <code>(p q)</code> 视为一个 <code>cons</code> 那么 <code>cdr cons</code> 就是 <code>cdr (p q)</code> </p>
<p>结果是 <code>q</code> ，写成 lambda 表达式</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">cdr</span></span> z)</span></span><br><span class="line">  <span class="list">(<span class="keyword">z</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">p</span> q)</span> q)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-5">习题 2.5</h3><blockquote>
<p><strong>Exercise 2.5.</strong>  Show that we can represent pairs of nonnegative integers using only numbers and arithmetic operations if we represent the pair $a$ and $b$ as the integer that is the product $2^a$ $3^b$. Give the corresponding definitions of the procedures cons, car, and cdr.</p>
</blockquote>
<p>先写 <code>cons</code> ，根据 $a$ , $b$ 构造数字</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> a b)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">expt</span></span> <span class="number">2</span> a)</span></span><br><span class="line">	   <span class="list">(<span class="keyword"><span class="built_in">expt</span></span> <span class="number">3</span> b)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>因为数字是由 $2^a \cdot 3^b$ 的形式构建的，所以一直除以 2 就能得到有多少个 2 相乘</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cars</span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">odd?</span></span> x)</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="list">(<span class="keyword">cars</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="number">2</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>类似的</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cdrs</span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">not</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> x <span class="number">3</span>)</span> <span class="number">0</span>)</span>)</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="list">(<span class="keyword">cdrs</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="number">3</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-6">习题 2.6</h3><blockquote>
<p><strong>Exercise 2.6.</strong>  In case representing pairs as procedures wasn’t mind-boggling enough, consider that, in a language that can manipulate procedures, we can get by without numbers (at least insofar as nonnegative integers are concerned) by implementing 0 and the operation of adding 1 as</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> zero <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> x)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">add-1</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="list">(<span class="keyword">n</span> f)</span> x)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>This representation is known as <em>Church numerals</em>, after its inventor, Alonzo Church, the logician who invented the $\lambda$ calculus.</p>
<p>Define one and two directly (not in terms of zero and add-1). (Hint: Use substitution to evaluate <code>(add-1 zero)</code>). Give a direct definition of the addition procedure + (not in terms of repeated application of add-1).</p>
</blockquote>
<p>直接代入展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">add-1</span> zero)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 为了方便这里先展开 add-1</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="list">(<span class="keyword">zero</span> f)</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 展开 zero 得</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> x)</span>)</span> f)</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 将 zero 中的 f 代入得</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> x)</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 将 x 带入得</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>所以定义 one 为</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> one <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>用类似的方法</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">add-1</span> one)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="list">(<span class="keyword">one</span> f)</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span> f)</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>所以定义 two 为</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> two <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-7">习题 2.7</h3><blockquote>
<p><strong>Exercise 2.7.</strong>  Alyssa’s program is incomplete because she has not specified the implementation of the interval abstraction. Here is a definition of the interval constructor:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">make-interval</span> a b)</span> <span class="list">(<span class="keyword"><span class="built_in">cons</span></span> a b)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Define selectors upper-bound and lower-bound to complete the implementation.</p>
</blockquote>
<p>因为是 <code>cons</code> 结构。所以直接调用 <code>car</code> 和 <code>cdr</code> 即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">upper-bound</span> interval)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cdr</span></span> interval)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">lower-bound</span> interval)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">car</span></span> interval)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-8">习题 2.8</h3><blockquote>
<p><strong>Exercise 2.8.</strong>  Using reasoning analogous to Alyssa’s, describe how the difference of two intervals may be computed. Define a corresponding subtraction procedure, called sub-interval.</p>
</blockquote>
<p>区间减法最小值为下界减上界</p>
<p>最大值为上界减下界</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sub-interval</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">lower-bound</span> x)</span> <span class="list">(<span class="keyword">upper-bound</span> y)</span>)</span></span><br><span class="line">                 <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">upper-bound</span> x)</span> <span class="list">(<span class="keyword">lower-bound</span> y)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>还可以用 <code>(add-interval)</code> 实现。</p>
<h3 id="习题_2-9">习题 2.9</h3><blockquote>
<p><strong>Exercise 2.9.</strong>  The <em>width</em> of an interval is half of the difference between its upper and lower bounds. The width is a measure of the uncertainty of the number specified by the interval. For some arithmetic operations the width of the result of combining two intervals is a function only of the widths of the argument intervals, whereas for others the width of the combination is not a function of the widths of the argument intervals. Show that the width of the sum (or difference) of two intervals is a function only of the widths of the intervals being added (or subtracted). Give examples to show that this is not true for multiplication or division.</p>
</blockquote>
<p>区间 $[2,4]$ 宽度为 $(4-2) \div 2 = 1$</p>
<p>区间 $[4,8]$ 宽度为 $(8-4) \div 2 = 2$</p>
<p>两个区间的乘积为 $[8,32]$ ，宽度为 $(32-8) \div = 12$</p>
<p>区间 $[4,6]$ 宽度为 $(6-4) \div 2 = 1$</p>
<p>区间 $[6,10]$ 宽度为 $(10-6) \div 2 = 2$</p>
<p>两个区间的乘积为 $[24,60]$ ，宽度为 $(60-24) \div 2 = 18$</p>
<p>可见同样的区间长度，一个是 $12$ ，另一个是 $18$ ，不仅仅由原本的区间宽度决定。   </p>
<h3 id="习题_2-10">习题 2.10</h3><blockquote>
<p><strong>Exercise 2.10.</strong>  Ben Bitdiddle, an expert systems programmer, looks over Alyssa’s shoulder and comments that it is not clear what it means to divide by an interval that spans zero. Modify Alyssa’s code to check for this condition and to signal an error if it occurs.</p>
</blockquote>
<p>区间包含零那么区间异号</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">div-interval</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">or</span></span> <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword">lower-bound</span> x)</span> <span class="number">0</span>)</span></span><br><span class="line">               <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="list">(<span class="keyword">upper-bound</span> x)</span> <span class="number">0</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword">lower-bound</span> y)</span> <span class="number">0</span>)</span></span><br><span class="line">               <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="list">(<span class="keyword">upper-bound</span> y)</span> <span class="number">0</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">error</span> <span class="string">"interval span zero"</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">mul-interval</span> x </span><br><span class="line">                <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">1.0</span> <span class="list">(<span class="keyword">upper-bound</span> y)</span>)</span></span><br><span class="line">                               <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">1.0</span> <span class="list">(<span class="keyword">lower-bound</span> y)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-11">习题 2.11</h3><blockquote>
<p><strong>Exercise 2.11.</strong>  In passing, Ben also cryptically comments: ``By testing the signs of the endpoints of the intervals, it is possible to break mul-interval into nine cases, only one of which requires more than two multiplications.’’ Rewrite this procedure using Ben’s suggestion.</p>
</blockquote>
<p>假设有四个正数 $a$ , $b$ , $c$ , $d$ 组成两个区间 $x(a,b)$ ，$y(c,d)$ 。</p>
<p>理论上有 $ 2 \times 2 \times 2 \times 2 = 16$ 种排列组合。</p>
<p>但是 $(a,-b)$ 和 $(c,-d)$ 的情况不符合区间上界大于下界的要求。</p>
<p>排除这两种组合后有 $3 \times 3 = 9$ 种组合。</p>
<p>按符号分类讨论</p>
<table>
<thead>
<tr>
<th>组合</th>
<th>Max</th>
<th>Min</th>
</tr>
</thead>
<tbody>
<tr>
<td>$(a,b)$ $(c,d)$</td>
<td>$b \cdot d$</td>
<td>$a \cdot c$</td>
</tr>
<tr>
<td>$(-a,b)$ $(c,d)$</td>
<td>$b \cdot d$</td>
<td>$-a \cdot d$</td>
</tr>
<tr>
<td>$(-a,-b)$ $(c,d)$</td>
<td>$-b \cdot c$</td>
<td>$-a \cdot d$</td>
</tr>
<tr>
<td>$(a,b)$ $(-c,d)$</td>
<td>$b \cdot d$</td>
<td>$b \cdot -c$</td>
</tr>
<tr>
<td>$(-a,b)$ $(-c,d)$</td>
<td>$-a \cdot -c$ 或 $b \cdot d$</td>
<td>$-a \cdot -c$ 或 $ b \cdot  d$</td>
</tr>
<tr>
<td>$(-a,-b)$ $(-c,-d)$</td>
<td>$-a \cdot -c$</td>
<td>$-b \cdot -d$</td>
</tr>
<tr>
<td>$(a,b)$ $(-c,-d)$</td>
<td>$a \cdot -d$</td>
<td>$b \cdot -c$</td>
</tr>
<tr>
<td>$(-a,b)$ $(-c,-d)$</td>
<td>$-a \cdot -c$</td>
<td>$b \cdot -c$</td>
</tr>
<tr>
<td>$(-a,-b)$ $(-c,-d)$</td>
<td>$-a \cdot -c$</td>
<td>$-b \cdot -d$</td>
</tr>
</tbody>
</table>
<h3 id="习题_2-12">习题 2.12</h3><blockquote>
<p><strong>Exercise 2.12.</strong>  Define a constructor make-center-percent that takes a center and a percentage tolerance and produces the desired interval. You must also define a selector percent that produces the percentage tolerance for a given interval. The center selector is the same as the one shown above.</p>
</blockquote>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">make-center-percent</span> c p)</span></span><br><span class="line">  <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> c <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">1</span> p)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> c <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> p)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">percent</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword">upper-bound</span> x)</span> <span class="list">(<span class="keyword">center</span> x)</span>)</span> <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_2-13">习题 2.13</h3><blockquote>
<p><strong>Exercise 2.13.</strong>  Show that under the assumption of small percentage tolerances there is a simple formula for the approximate percentage tolerance of the product of two intervals in terms of the tolerances of the factors. You may simplify the problem by assuming that all numbers are positive.</p>
</blockquote>
<p>题目要求找出一个估计区间乘法误差的公式。</p>
<p>按题目中的假设有两个区间 $x(c_x,p_x)$ , $y(c_y,p_y)$ ，所有数都是正数。</p>
<p>那么乘法的最大值是 $(c_x + c_x p_x)(c_y + c_y p_y)$</p>
<p>展开为 $c_x c_y + c_x c_y p_y + c_x c_y p_x + c_x c_y p_x p_y$ </p>
<p>提取公因式 $c_x c_y(1 + p_y + p_x + p_x p_y)$ </p>
<p>乘法的最小值是 $(c_x - c_x p_x)(c_y - c_y p_y)$ </p>
<p>展开为 $c_x c_y (1 - p_y - p_x + p_x p_y)$ </p>
<p>跟最大值的式子很像。将两个式子改写为</p>
<p>最大值 $c_x c_y (1 + p_x p_y) + c_x c_y (p_x + p_y)$</p>
<p>最小值 $c_x c_y (1 + p_x p_y)  - c_x c_y (p_x + p_y)$</p>
<p>显然中点为 $c_x c_y (1 + p_x p_y)$ ，宽度为 $c_x c_y (p_x + p_y)$</p>
<p>所以乘法区间的误差为<br>$$<br>\begin{align}<br>\frac {c_x c_y (p_x + p_y)}{c_x c_y(1 + p_x p_y)} = \frac{p_x + p_y}{1 + p_x p_y} \approx p_x + p_y<br>\end{align}<br>$$</p>
<h3 id="习题_2-14">习题 2.14</h3><blockquote>
<p><strong>Exercise 2.14.</strong>  Demonstrate that Lem is right. Investigate the behavior of the system on a variety of arithmetic expressions. Make some intervals <em>A</em> and <em>B</em>, and use them in computing the expressions <em>A</em>/<em>A</em> and <em>A</em>/<em>B</em>. You will get the most insight by using intervals whose width is a small percentage of the center value. Examine the results of the computation in center-percent form (see exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-14.html#%_thm_2.12" target="_blank" rel="external">2.12</a>).</p>
</blockquote>
<p>显然这种说法是对的</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">par1</span> <span class="list">(<span class="keyword">make-center-percent</span> <span class="number">5</span> <span class="number">0.01</span>)</span> <span class="list">(<span class="keyword">make-center-percent</span> <span class="number">10</span> <span class="number">0.01</span>)</span>)</span></span><br><span class="line"><span class="comment">; =&gt; (3.2346534653465353 . 3.4346801346801343)</span></span><br><span class="line"><span class="list">(<span class="keyword">par2</span> <span class="list">(<span class="keyword">make-center-percent</span> <span class="number">5</span> <span class="number">0.01</span>)</span> <span class="list">(<span class="keyword">make-center-percent</span> <span class="number">10</span> <span class="number">0.01</span>)</span>)</span></span><br><span class="line"><span class="comment">; =&gt; (3.3 . 3.3666666666666663)</span></span><br></pre></td></tr></table></figure>
<p>最直接的原因是区间除法 $A / A \ne 1$ 。</p>
<p>所以 $\frac{1}{R_1}$ 通分的时候 $\frac{1}{R_1} \cdot \frac{R_2}{R_2} \ne \frac{R_2}{R_1R_2} $ 。</p>
<p>因此最后的结果会有偏差。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>翻车到坑里</p>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://en.ors-sro.com/tags/SICP/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Polyglot]]></title>
    <link href="http://en.ors-sro.com/Polyglot/"/>
    <id>http://en.ors-sro.com/Polyglot/</id>
    <published>2017-02-12T07:14:54.000Z</published>
    <updated>2017-02-12T08:40:19.350Z</updated>
    <content type="html"><![CDATA[<p>混源</p>
<a id="more"></a>
<h2 id="初见端倪">初见端倪</h2><p>同一个符号在不同的编程语言中意义不同。比如 <code>;</code> 在 C 语言家族中是语句的结束符，在 Lisp 语言家族中是注释符号。</p>
<p>这也就是一个语言的代码通常不能通过另一个语言编译的原因。</p>
<p>利用这一点，实现多语言混写。即一段能通过多语言编译的代码。</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># define x u /*      v &#10;# :::::::::::::::::::&#62;&#62;&#62;&#62;&#62;&#62;&#62;$$$a&#34;muroftih&#34;#[&#62;:#,_@] &#10;eval &#39;echo &#34;hitforum&#34;;exit&#39;;sub echo &#123; print &#34;@_\n&#34;&#125;       &#10;__END__&#62;++++++++++&#62;++++++++++[&#62;+++++++++++&#62;++++++++++  &#10;+&#60;&#60;-]&#62;------.+.&#62;++++++.&#60;---.+++++++++.&#62;--.+++             &#10;.&#60;--.&#60;&#60;. */ &#10;main() &#123; printf (&#34;hitforum\n&#34;); &#125;</span><br></pre></td></tr></table></figure>
<p>这段代码可以在 C 、Shell 、Perl 、<a href="/BrainFuck">BrainFuck</a> 、Befunge 、<a href="/WhiteSpace">Whitespace</a>  6 个语言环境下运行。</p>
<p>在 C 语言相当于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># define x u /*      v </span><br><span class="line"># :::::::::::::::::::&gt;&gt;&gt;&gt;&gt;&gt;&gt;$$$a"muroftih"#[&gt;:#,_@] </span><br><span class="line">eval 'echo "hitforum";exit';sub echo &#123; print "@_\n"&#125;       </span><br><span class="line">__END__&gt;++++++++++&gt;++++++++++[&gt;+++++++++++&gt;++++++++++  </span><br><span class="line">+&lt;&lt;-]&gt;------.+.&gt;++++++.&lt;---.+++++++++.&gt;--.+++             </span><br><span class="line">.&lt;--.&lt;&lt;. */ </span><br><span class="line">main() &#123; printf ("hitforum\n"); &#125;</span><br></pre></td></tr></table></figure>
<p>因为 <code>/**/</code> 是 C 语言的注释符号。</p>
<p>所以在 C 下代码相当于</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># <span class="keyword">define</span> x u</span></span><br><span class="line">main() &#123; <span class="built_in">printf</span> (<span class="string">"hitforum\n"</span>); &#125;</span><br></pre></td></tr></table></figure>
<p>在 Shell 下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define x u /*      v </span></span><br><span class="line"><span class="comment"># :::::::::::::::::::&gt;&gt;&gt;&gt;&gt;&gt;&gt;$$$a"muroftih"#[&gt;:#,_@] </span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">'echo "hitforum";exit'</span>;sub <span class="built_in">echo</span> &#123; <span class="built_in">print</span> <span class="string">"@_\n"</span>&#125;       </span><br><span class="line">__END__&gt;++++++++++&gt;++++++++++[&gt;+++++++++++&gt;++++++++++  </span><br><span class="line">+&lt;&lt;-]&gt;------.+.&gt;++++++.&lt;---.+++++++++.&gt;--.+++             </span><br><span class="line">.&lt;--.&lt;&lt;. */ </span><br><span class="line"><span class="function"><span class="title">main</span></span>() &#123; <span class="built_in">printf</span> (<span class="string">"hitforum\n"</span>); &#125;</span><br></pre></td></tr></table></figure>
<p><code>#</code> 是 Shell 的注释符号，所以后面的内容视为注释忽略了。</p>
<p><code>exit</code> 退出 Shell 。所以后面的内容没有意义了。</p>
<p>所以在 Shell 下代码相当于</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">'echo "hitforum";exit'</span></span><br></pre></td></tr></table></figure>
<p>在 BrainFuck 下</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span> <span class="comment">define</span> <span class="comment">x</span> <span class="comment">u</span> <span class="comment">/*</span>      <span class="comment">v</span> </span><br><span class="line"><span class="comment">#</span> <span class="comment">:::::::::::::::::::</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="comment">$$$a"muroftih"#</span><span class="title">[</span>&gt;<span class="comment">:#</span><span class="string">,</span><span class="comment">_@</span><span class="title">]</span> </span><br><span class="line"><span class="comment">eval</span> <span class="comment">'echo</span> <span class="comment">"hitforum";exit';sub</span> <span class="comment">echo</span> <span class="comment">&#123;</span> <span class="comment">print</span> <span class="comment">"@_\n"&#125;</span>       </span><br><span class="line"><span class="comment">__END__</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>  </span><br><span class="line"><span class="literal">+</span>&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>             </span><br><span class="line"><span class="string">.</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;&lt;<span class="string">.</span> <span class="comment">*/</span> </span><br><span class="line"><span class="comment">main()</span> <span class="comment">&#123;</span> <span class="comment">printf</span> <span class="comment">("hitforum\n");</span> <span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p>因为 <a href="/Brainfuck">BrainFuck 的原语只有 8 个符号</a> 所以其他符号都会被忽略。</p>
<p>所以在 BrainFuck 下代码相当于</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="title">[</span>&gt;<span class="string">,</span><span class="title">]</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span>&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="string">.</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;&lt;<span class="string">.</span></span><br></pre></td></tr></table></figure>
<p>在 Whitespace 下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># define x u /*      v &#10;# :::::::::::::::::::&#62;&#62;&#62;&#62;&#62;&#62;&#62;$$$a&#34;muroftih&#34;#[&#62;:#,_@] &#10;eval &#39;echo &#34;hitforum&#34;;exit&#39;;sub echo &#123; print &#34;@_\n&#34;&#125;       &#10;__END__&#62;++++++++++&#62;++++++++++[&#62;+++++++++++&#62;++++++++++  &#10;+&#60;&#60;-]&#62;------.+.&#62;++++++.&#60;---.+++++++++.&#62;--.+++             &#10;.&#60;--.&#60;&#60;. */ &#10;main() &#123; printf (&#34;hitforum\n&#34;); &#125;</span><br></pre></td></tr></table></figure>
<p>因为 <a href="/Whitespace">Whitespace 的原语只有空格，制表符，换行</a> ，所以其他字符都会被忽略。</p>
<p>所以在 Whitespace 下相当于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Space][Space][Space][Space][Tab][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Space][Space][Space][Space][Space][Space][Tab][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Tab][Tab][Space][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Space][Space][Space][Space][Tab][Space][Space][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Tab][Tab][Space][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Tab][Tab][Space][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Tab][Tab][Space][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Tab][Tab][Space][Space][Space][LF]&#10;[Space][Space][LF]&#10;[Tab][Tab][LF]&#10;[Space][Space][LF]&#10;[Space][Space][Space][LF]&#10;[LF]&#10;[LF]</span><br></pre></td></tr></table></figure>
<h2 id="百花齐放">百花齐放</h2><p>除了 C 语言的混源，还有更多语言的混合。</p>
<p>比如 40 中语言的混合</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    #  1"16" 3//v\(@#/;"14"\Dv</span><br><span class="line">#/*`3 auaaZ&lt;&gt;16/"&lt;"6/b.q@")(22)S#  ␉␉␉␉ </span><br><span class="line">#yy␉;36!@</span><br><span class="line">### ␉</span><br><span class="line">#=␉&gt;</span><br><span class="line">#[#yy#yy0l0mx01k1k0l0ix0jx0h0h1d111P0eU0bx0b0o1d0b0e0e00x1d0i0fx0g0n0n11x0o0n0cx0c0o0f0c0gx0g0f0h0j0j0i0001k10mx0m0l11111100(^_)</span><br><span class="line">#`&lt;`␉|</span><br><span class="line">print((eval("1\x2f2")and( 9 )or(13 ))-(0and 4)^1&lt;&lt;(65)&gt;&gt;(62))or'(\&#123;(\&#123;&#125;)(\&#123;&#125;[()])&#125;\&#123;&#125;\&#123;&#125;\&#123;&#125;)'#46(8+9+9+9+9+=!)#1111|=/=1/24=x=9[&lt;$+@+-@@@@=&gt;+&lt;@@@=&gt;+&lt;?#&gt;+.--.]/</span><br><span class="line">__DATA__=1#//</span><br><span class="line">#.\."12"*␉</span><br><span class="line">###; console.log  39</span><br><span class="line">""""#//</span><br><span class="line">=begin␉//</span><br><span class="line">#*/</span><br><span class="line">#define␉z  sizeof 'c'-1?"38":"37"</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()  /*/</span><br><span class="line">#()`#`\'*/&#123;puts(z);;&#125;/*'``</span><br><span class="line">$'main'␉//</span><br><span class="line">#-3o4o#$$$</span><br><span class="line">&lt;&gt;3N.&lt;&gt;␉//</span><br><span class="line">#xx\"R++++++++++++++++++\"++++++++++++++++++.----.</span><br><span class="line">#x%~~~+␉+~*ttt*.x</span><br><span class="line">#xx++U++++++++++++++++v&lt;L&gt;4n;</span><br><span class="line">=end   #//</span><br><span class="line">"""#"#//</span><br><span class="line">#0]#echo 21#/(\[FAC,1&lt;-#2FAC,1SUB#1&lt;-#52FAC,1SUB#2&lt;-#32FACLEGEREEX,1PLEASEGIVEUPPLEASE)  ap</span><br><span class="line">#_|#o51~nJ\   </span><br><span class="line">#0␛dggi2␛`␉|1|6$//''25  &gt;&gt;&gt;#&gt;27.say# =#print(17)###^_^_7LEintndus(&#123;&#125;)!&lt;&gt;+]/*///Z/&#125;23!@222999"26</span><br></pre></td></tr></table></figure>
<p>详情参见 <a href="http://codegolf.stackexchange.com/questions/102370/add-a-language-to-a-polyglot" target="_blank" rel="external">Polyglot 在 Stackoverflow 上的讨论</a> 。</p>
<h2 id="参考链接">参考链接</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Polyglot_(computing)" target="_blank" rel="external">polyglot</a></li>
<li><a href="http://www.retas.de/thomas/computer/programs/useless/misc/polyglot/index.html" target="_blank" rel="external">A polyglot in 6 different languages</a> </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>混源</p>]]>
    
    </summary>
    
      <category term="polyglot" scheme="http://en.ors-sro.com/tags/polyglot/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Whitespace]]></title>
    <link href="http://en.ors-sro.com/Whitespace/"/>
    <id>http://en.ors-sro.com/Whitespace/</id>
    <published>2017-02-05T08:47:48.000Z</published>
    <updated>2017-02-05T09:41:21.241Z</updated>
    <content type="html"><![CDATA[<p>介绍一个很干净的语言。</p>
<pre style="background: initial;">




















</pre>

<a id="more"></a>
<h2 id="Hello_World">Hello World</h2><p>先看它的 Hello World 。</p>
<pre>






























</pre>

<p>没看错。这个 <strong>Whitespace</strong> 语言的原语只有空格，制表符，还有换行。</p>
<h2 id="语法">语法</h2><p>参考<a href="http://compsoc.dur.ac.uk/whitespace/tutorial.html" target="_blank" rel="external"> Whitespace 语言官方教程</a> 整理的 BNF 如下。</p>
<figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">Program ::= &lt;Statement&gt;&#123;Statement&#125;</span><br><span class="line"></span><br><span class="line">Statement ::= &lt;IMP&gt;</span><br><span class="line"></span><br><span class="line">IMP :: = <span class="attribute">&lt;StackManipulation&gt;</span><span class="attribute">&lt;SMCommand&gt;</span> | <span class="attribute">&lt;Arithmetic&gt;</span><span class="attribute">&lt;AriCommand&gt;</span> | <span class="attribute">&lt;HeapAccess&gt;</span><span class="attribute">&lt;HACommand&gt;</span> | <span class="attribute">&lt;FlowControl&gt;</span><span class="attribute">&lt;FCCommand&gt;</span> | <span class="attribute">&lt;I/O&gt;</span><span class="attribute">&lt;IOCommand&gt;</span></span><br><span class="line"></span><br><span class="line">StackManipulation ::= &lt;Space&gt;</span><br><span class="line"></span><br><span class="line">SMCommand ::= &lt;Push&gt;&lt;Number&gt; | &lt;Duplicate&gt; | &lt;Swap&gt; | &lt;Discard&gt;</span><br><span class="line"></span><br><span class="line">Push ::= &lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Number ::= &lt;Sign&gt;&lt;Digit&gt;&lt;End&gt;</span><br><span class="line"></span><br><span class="line">Sign ::= &lt;Space&gt; | &lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">Digit ::= &lt;Space&gt;&#123;Digit&#125;|&lt;Tab&gt;&#123;Digit&#125;</span><br><span class="line"></span><br><span class="line">End ::= &lt;LF&gt;</span><br><span class="line"></span><br><span class="line">Duplicate ::= &lt;LF&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Swap ::= &lt;LF&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">Discard ::= &lt;LF&gt;&lt;LF&gt;</span><br><span class="line"></span><br><span class="line">Duplicate ::= &lt;LF&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Arithmetic ::= &lt;Tab&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">AriCommand ::= &lt;Addition&gt; | &lt;Subtraction&gt; | &lt;Multiplication&gt; | &lt;IntegerDivision&gt; | &lt;Modulo&gt;</span><br><span class="line"></span><br><span class="line">Addition ::= &lt;Space&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Subtraction ::= &lt;Space&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">Multiplication ::= &lt;Space&gt;&lt;LF&gt;</span><br><span class="line"></span><br><span class="line">IntegerDivision ::= &lt;Tab&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Modulo ::= &lt;Tab&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">HeapAccess ::= &lt;Tab&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">HACommand ::= &lt;Store&gt;&lt;Retrieve&gt;</span><br><span class="line"></span><br><span class="line">Store ::= &lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Retrieve ::= &lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">FlowControl ::= &lt;LF&gt;</span><br><span class="line"></span><br><span class="line">FCCommand ::= &lt;Mark&gt;&lt;Label&gt; | &lt;Call&gt;&lt;Label&gt; | &lt;Jmp&gt;&lt;Label&gt; | &lt;Jz&gt;&lt;Label&gt; | &lt;Js&gt;&lt;Label&gt; | &lt;SubroutineEnd&gt; | &lt;ProgramEnd&gt;</span><br><span class="line"></span><br><span class="line">Mark ::= &lt;Space&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Label ::= &lt;LabelName&gt;&lt;End&gt;</span><br><span class="line"></span><br><span class="line">LabelName ::= &lt;Space&gt;&#123;LabelName&#125;|&lt;Tab&gt;&#123;LabelName&#125;</span><br><span class="line"></span><br><span class="line">Call ::= &lt;Space&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">Jmp ::= &lt;Space&gt;&lt;LF&gt;</span><br><span class="line"></span><br><span class="line">Jz ::= &lt;Tab&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">Js ::= &lt;Tab&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">SubroutineEnd ::= &lt;Tab&gt;&lt;LF&gt;</span><br><span class="line"></span><br><span class="line">ProgrameEnd ::= &lt;LF&gt;&lt;LF&gt;</span><br><span class="line"></span><br><span class="line">I/O ::= &lt;Tab&gt;&lt;LF&gt;</span><br><span class="line"></span><br><span class="line">IOCommand ::= &lt;OutputChar&gt; | &lt;OutputNumber&gt; | &lt;ReadChar&gt; | &lt;ReadNumber&gt;</span><br><span class="line"></span><br><span class="line">OutputChar ::= &lt;Space&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">OutputNumber ::= &lt;Space&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">ReadChar ::= &lt;Tab&gt;&lt;Space&gt;</span><br><span class="line"></span><br><span class="line">ReadNumber ::= &lt;Tab&gt;&lt;Tab&gt;</span><br><span class="line"></span><br><span class="line">Space ::= <span class="string">" "</span></span><br><span class="line"></span><br><span class="line">Tab ::= <span class="string">"\t"</span></span><br><span class="line"></span><br><span class="line">LF ::= <span class="string">"\n"</span></span><br></pre></td></tr></table></figure>
<p>不熟悉 BNF 可以直接看下面的图表。</p>
<table>
<thead>
<tr>
<th>IMP</th>
<th>Command</th>
<th>Meaning</th>
<th>IMP  Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>[Space]</td>
<td>[Space][Number]</td>
<td>Push the number onto the stack</td>
<td>Stack Manipulation</td>
</tr>
<tr>
<td>[Space]</td>
<td>[LF][Space]</td>
<td>Duplicate the top item on the stack</td>
<td>Stack Manipulation</td>
</tr>
<tr>
<td>[Space]</td>
<td>[LF][Tab]</td>
<td>Swap the top two items on the stack</td>
<td>Stack Manipulation</td>
</tr>
<tr>
<td>[Space]</td>
<td>[LF][LF]</td>
<td>Discard the top item on the stack</td>
<td>Stack Manipulation</td>
</tr>
<tr>
<td>[Tab][Space]</td>
<td>[Space][Space]</td>
<td>Addition</td>
<td>Arithmetic</td>
</tr>
<tr>
<td>[Tab][Space]</td>
<td>[Space][Tab]</td>
<td>Subtraction</td>
<td>Arithmetic</td>
</tr>
<tr>
<td>[Tab][Space]</td>
<td>[Space][LF]</td>
<td>Multiplication</td>
<td>Arithmetic</td>
</tr>
<tr>
<td>[Tab][Space]</td>
<td>[Tab][Space]</td>
<td>Integer Division</td>
<td>Arithmetic</td>
</tr>
<tr>
<td>[Tab][Space]</td>
<td>[Tab][Tab]</td>
<td>Modulo</td>
<td>Arithmetic</td>
</tr>
<tr>
<td>[Tab][Tab]</td>
<td>[Space]</td>
<td>Store</td>
<td>Heap access</td>
</tr>
<tr>
<td>[Tab][Tab]</td>
<td>[Tab]</td>
<td>Retrieve</td>
<td>Heap access</td>
</tr>
<tr>
<td>[LF]</td>
<td>[Space][Space]<label></label></td>
<td>Mark a location in    the program</td>
<td>Flow Control</td>
</tr>
<tr>
<td>[LF]</td>
<td>[Space][Tab]<label></label></td>
<td>Call a    subroutine</td>
<td>Flow Control</td>
</tr>
<tr>
<td>[LF]</td>
<td>[Space][LF]<label></label></td>
<td>Jump unconditionally to a label</td>
<td>Flow Control</td>
</tr>
<tr>
<td>[LF]</td>
<td>[Tab][Space]<label></label></td>
<td>Jump to a label if the top of the stack is zero</td>
<td>Flow    Control</td>
</tr>
<tr>
<td>[LF]</td>
<td>[Tab][Tab]<label></label></td>
<td>Jump to a label if the    top of the stack is negative</td>
<td>Flow    Control</td>
</tr>
<tr>
<td>[LF]</td>
<td>[Tab][LF]</td>
<td>End a subroutineand transfer control back to the caller</td>
<td>Flow Control</td>
</tr>
<tr>
<td>[LF]</td>
<td>[LF][LF]</td>
<td>End the program</td>
<td>Flow Control</td>
</tr>
<tr>
<td>[Tab][LF]</td>
<td>[Space][Space]</td>
<td>Output the character at the top of the stack</td>
<td>I/O</td>
</tr>
<tr>
<td>[Tab][LF]</td>
<td>[Space][Tab]</td>
<td>Output the number at the top of the stack</td>
<td>I/O</td>
</tr>
<tr>
<td>[Tab][LF]</td>
<td>[Tab][Space]</td>
<td>Read a character and place it in the location given by the top of the stack</td>
<td>I/O</td>
</tr>
<tr>
<td>[Tab][LF]</td>
<td>[Tab][Tab]</td>
<td>Read a number and place it in the location given by the top of the stack</td>
<td>I/O</td>
</tr>
</tbody>
</table>
<p>所以这是一个将特定序列的空白符转成指令的语言。</p>
<p>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Tab][LF][Space][Space]</span><br></pre></td></tr></table></figure>
<p>表示将栈顶数字以 ASCII 的形式输出。</p>
<h2 id="解析_Hello_World">解析 Hello World</h2><p>空白符看起来比较不方便，将 Hello World 代码中空格替换为 [Space] ，制表符替换为 [Tab] ，换行替换为 [LF] 。</p>
<p>整理后如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Space][Space][Space][Tab][Space][Space][Tab][Space][Space][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 0100 1000 &#20063;&#23601;&#26159;&#25968;&#23383; 72 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 72 &#20063;&#23601;&#26159; H&#10;&#10;[Space][Space][Space][Tab][Tab][Space][Space][Tab][Space][Tab][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0110 0101 &#20063;&#23601;&#26159;&#25968;&#23383; 101 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 101 &#20063;&#23601;&#26159; e&#10;&#10;[Space][Space][Space][Tab][Tab][Space][Tab][Tab][Space][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0110 1100 &#20063;&#23601;&#26159;&#25968;&#23383; 108 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 108 &#20063;&#23601;&#26159; l&#10;&#10;[Space][Space][Space][Tab][Tab][Space][Tab][Tab][Space][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0110 1100 &#20063;&#23601;&#26159;&#25968;&#23383; 108 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 108 &#20063;&#23601;&#26159; l&#10;&#10;[Space][Space][Space][Tab][Tab][Space][Tab][Tab][Tab][Tab][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0110 1111 &#20063;&#23601;&#26159;&#25968;&#23383; 111 &#21387;&#26632; &#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 111 &#20063;&#23601;&#26159; o&#10;&#10;[Space][Space][Space][Tab][Space][Tab][Tab][Space][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 0 0010 1100 &#20063;&#23601;&#26159;&#25968;&#23383; 44 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 44 &#20063;&#23601;&#26159; &#65292;&#10;&#10;[Space][Space][Space][Tab][Space][Space][Space][Space][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 0 0010 0000 &#20063;&#23601;&#26159;&#25968;&#23383; 32 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 32 &#20063;&#23601;&#26159; &#31354;&#26684;&#10;&#10;[Space][Space][Space][Tab][Tab][Tab][Space][Tab][Tab][Tab][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0111 0111 &#20063;&#23601;&#26159;&#25968;&#23383; 119 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 119 &#20063;&#23601;&#26159; w&#10;&#10;[Space][Space][Space][Tab][Tab][Space][Tab][Tab][Tab][Tab][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0110 1111 &#20063;&#23601;&#26159;&#25968;&#23383; 111 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 111 &#20063;&#23601;&#26159; o&#10;&#10;[Space][Space][Space][Tab][Tab][Tab][Space][Space][Tab][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0111 0010 &#20063;&#23601;&#26159;&#25968;&#23383; 114 &#36755;&#20986;&#23383;&#31526; r&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 114 &#20063;&#23601;&#26159; r&#10;&#10;[Space][Space][Space][Tab][Tab][Space][Tab][Tab][Space][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0110 1100 &#20063;&#23601;&#26159;&#25968;&#23383; 108 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 108 &#20063;&#23601;&#26159; l&#10;&#10;[Space][Space][Space][Tab][Tab][Space][Space][Tab][Space][Space][LF]&#10;&#25968;&#23383;&#21387;&#26632; 00 0110 0100 &#20063;&#23601;&#26159;&#25968;&#23383; 100 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 100 &#20063;&#23601;&#26159; d&#10;&#10;[Space][Space][Space][Tab][Space][Space][Space][Space][Tab][LF]&#10;&#25968;&#23383;&#21387;&#26632; 0 0010 0001 &#20063;&#23601;&#26159;&#25968;&#23383; 33 &#21387;&#26632;&#10;[Tab][LF][Space][Space]&#10;&#36755;&#20986;&#26632;&#39030;&#23383;&#31526; ASCII 33 &#20063;&#23601;&#26159; &#65281;&#10;&#10;[LF][LF][LF]&#10;&#31243;&#24207;&#32467;&#26463;&#31526;&#21495;</span><br></pre></td></tr></table></figure>
<p>这个 Hello World 代码很简单，只是简单的入栈出栈，没有用到跳转等复杂的功能。</p>
<h2 id="最后">最后</h2><p>这个语言最大的作用是……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>介绍一个很干净的语言。</p>
<pre style="background: initial;">




















</pre>]]>
    
    </summary>
    
      <category term="Whitespace" scheme="http://en.ors-sro.com/tags/Whitespace/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SICP 1.3 用更高阶的过程阐述抽象]]></title>
    <link href="http://en.ors-sro.com/SICP-1-3-Formulating-Abstractions-with-Higher-Order-Procedures/"/>
    <id>http://en.ors-sro.com/SICP-1-3-Formulating-Abstractions-with-Higher-Order-Procedures/</id>
    <published>2017-01-29T10:43:42.000Z</published>
    <updated>2017-02-05T10:13:59.588Z</updated>
    <content type="html"><![CDATA[<p>再次填坑。<br><a id="more"></a></p>
<h2 id="笔记">笔记</h2><p>本章主要讲了过程作为第一公民的用法与作用。</p>
<p>主要有四点</p>
<ul>
<li>过程可以通过变量命名</li>
<li>过程可以通过参数传递</li>
<li>过程可以通过过程返回</li>
<li>过程可以包含在结构中</li>
</ul>
<p>Scheme 语言在这方面比较灵活。不像有的语言想要传递一个过程还得要先封装一个类才能通过实例传递。更不像有的语言一个 lambda 设计得那么复杂又没有品味。</p>
<h2 id="习题">习题</h2><h3 id="习题_1-29">习题 1.29</h3><blockquote>
<p><strong>Exercise 1.29.</strong>  Simpson’s Rule is a more accurate method of numerical integration than the method illustrated above. Using Simpson’s Rule, the integral of a function $f$ between $a$ and $b$ is approximated as<br>$$<br>\frac{h}{3}[y_0 + 4y_1 + 2y_2 + 4y_3 + 2y_4 + …+ 2y_{n-2} + 4y_{n-1} + y_n]<br>$$<br>where $h = (b - a)/n$ , for some even integer $n$, and $y_k = f(a + kh)$. (Increasing $n$ increases the accuracy of the approximation.) Define a procedure that takes as arguments $f$, $a$, $b$, and $n$ and returns the value of the integral, computed using Simpson’s Rule. Use your procedure to integrate cube between 0 and 1 (with $n = 100$ and $n = 1000$), and compare the results to those of theintegral procedure shown above.</p>
</blockquote>
<p>这道题要用到之前的求和函数。</p>
<p>显然需要的求和的部分就是一系列的 $y$ 。</p>
<p>范围为 $[0,n]$ 。</p>
<p>通过观察可以发现 $y_m$ 前面的系数 $times$ 的规律为<br>$$<br>times =<br>\begin{cases}<br>1, &amp; m = 0,n<br>\\2, &amp; m \bmod 2 = 0<br>\\4, &amp; m \bmod 2 = 1<br>\end{cases}<br>$$<br>然后按照公式翻译成代码就可以了。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">term</span> a)</span></span><br><span class="line">         <span class="list">(<span class="keyword">sum</span> term <span class="list">(<span class="keyword">next</span> a)</span> next b)</span>)</span>)</span>)</span></span><br><span class="line">         </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">integral</span> f a b n)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> h <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> b a)</span> n)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">y</span> k)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> k h)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">times</span> m)</span></span><br><span class="line">            <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> m)</span> <span class="number">2</span> <span class="number">4</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">item</span> m)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> m <span class="number">0</span>)</span> <span class="list">(<span class="keyword">y</span> m)</span>)</span></span><br><span class="line">              <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> m n)</span> <span class="list">(<span class="keyword">y</span> n)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">times</span> m)</span> <span class="list">(<span class="keyword">y</span> m)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> h <span class="number">3</span>)</span> <span class="list">(<span class="keyword">sum</span> item <span class="number">0</span> inc n)</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x x)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">integral</span> cube <span class="number">0</span> <span class="number">1</span> <span class="number">100</span>)</span></span><br><span class="line"><span class="comment">; 1/4</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-30">习题 1.30</h3><blockquote>
<p><strong>Exercise 1.30.</strong>  The sum procedure above generates a linear recursion. The procedure can be rewritten so that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the following definition:</p>
</blockquote>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iter</span> a result)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> &lt;??&gt;</span><br><span class="line">        &lt;??&gt;</span><br><span class="line">        <span class="list">(<span class="keyword">iter</span> &lt;??&gt; &lt;??&gt;)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> &lt;??&gt; &lt;??&gt;)</span>)</span></span><br></pre></td></tr></table></figure>
<p>这道题只需要找出迭代的退出边界和迭代的等式就可以了。</p>
<p>显然退出的条件与递归一致，当下边界 $a$ 大于上边界 $b$ 时退出。</p>
<p>递推式为<br>$$<br>result = result + term(a)<br>$$<br>所以答案是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iter</span> a result)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">        result</span><br><span class="line">        <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">next</span> a)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> result <span class="list">(<span class="keyword">term</span> a)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> a <span class="number">0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">identity</span> x)</span> x)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">sum</span> identity <span class="number">1</span> inc <span class="number">100</span>)</span></span><br><span class="line"><span class="comment">; 5050</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-31">习题 1.31</h3><blockquote>
<p><strong>Exercise 1.31.</strong><br>a.  The sum procedure is only the simplest of a vast number of similar abstractions that can be captured as higher-order procedures.<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#footnote_Temp_95" target="_blank" rel="external">51</a> Write an analogous procedure called product that returns the product of the values of a function at points over a given range. Show how to define factorial in terms of product. Also use product to compute approximations to $\pi$ using the formula <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#footnote_Temp_96" target="_blank" rel="external">52</a></p>
<p>$$<br>\frac{\pi}{4} = \frac{2 \cdot 4 \cdot 4 \cdot 6 \cdot 6 \cdot 8 \cdot …}{3 \cdot 3 \cdot 5 \cdot 5 \cdot 7 \cdot 7 \cdot …}<br>$$<br>b.  If your product procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</p>
</blockquote>
<p>仿照 <code>sum</code> 编写，把其中的 <code>+</code> 替换成 <code>*</code> 即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">product</span> term a next b)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">term</span> a)</span></span><br><span class="line">            <span class="list">(<span class="keyword">product</span> term <span class="list">(<span class="keyword">next</span> a)</span> next b)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>接着求 $\pi$ 的近似值。</p>
<p>$\frac{\pi}{4}$ 的展开式可以拆成一个个分数连乘，也可以看作两个连乘做除法。</p>
<p>这里选择当作两个连乘序列来处理。</p>
<p>分子序列 $n_k$ 通过观察可得<br>$$<br>n_k =  \lfloor k / 2\rfloor \times 2 + 2<br>$$<br>分母序列 $m_k$ 通过观察可得<br>$$<br>m_k = \lfloor (k+1)/2 \rfloor \times 2 + 1<br>$$<br>做除法即可</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">n</span> k)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">quotient</span></span> k <span class="number">2</span>)</span> <span class="number">2</span>)</span> <span class="number">2.0</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">m</span> k)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">quotient</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> k <span class="number">1</span>)</span> <span class="number">2</span>)</span> <span class="number">2</span>)</span> <span class="number">1.0</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">identity</span> x)</span> x)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">pi</span> k)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">4</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword">product</span> n <span class="number">1</span> inc k)</span></span><br><span class="line">            <span class="list">(<span class="keyword">product</span> m <span class="number">1</span> inc k)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">pi</span> <span class="number">100</span>)</span></span><br><span class="line"><span class="comment">; 3.1570301764551667</span></span><br><span class="line"><span class="comment">; 收敛得很慢</span></span><br></pre></td></tr></table></figure>
<p>接着实现阶乘。</p>
<p>阶乘的定义为<br>$$<br>n! = n \times (n-1) \times (n-2) \times … \times 2 \times 1<br>$$<br>所以从 $1$ 乘到 $n$ 即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">factorial</span> n)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">identity</span> x)</span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">product</span> identity <span class="number">1</span> inc n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">factorial</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">; 120</span></span><br></pre></td></tr></table></figure>
<p>然后把递归形式改成迭代形式。参照 <code>sum</code> 可得</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">product</span> term a next b)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iter</span> a result)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">            result</span><br><span class="line">            <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">next</span> a)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> result <span class="list">(<span class="keyword">term</span> a)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">iter</span> a <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-32">习题 1.32</h3><blockquote>
<p><strong>Exercise 1.32.</strong>  a. Show that sum and product(exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.31" target="_blank" rel="external">1.31</a>) are both special cases of a still more general notion called accumulate that combines a collection of terms, using some general accumulation function:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">accumulate</span> combiner null-value term a next b)</span></span><br></pre></td></tr></table></figure>
<p>Accumulate takes as arguments the same term and range specifications as sum and product, together with a combiner procedure (of two arguments) that specifies how the current term is to be combined with the accumulation of the preceding terms and a null-value that specifies what base value to use when the terms run out. Write accumulate and show how sum and product can both be defined as simple calls to accumulate.</p>
<p>b. If your accumulate procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</p>
</blockquote>
<p>提取出 <code>sum</code> 和 <code>product</code> 的共同部分即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">accumulate</span> combiner null-value term a next b)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">        null-value</span><br><span class="line">        <span class="list">(<span class="keyword">combiner</span> <span class="list">(<span class="keyword">term</span> a)</span></span><br><span class="line">                  <span class="list">(<span class="keyword">accumulate</span> combiner null-value term <span class="list">(<span class="keyword">next</span> a)</span> next b)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">product</span> term a next b)</span></span><br><span class="line">    <span class="list">(<span class="keyword">accumulate</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span> y)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x y)</span>)</span> <span class="number">1</span> term a next b)</span>)</span></span><br></pre></td></tr></table></figure>
<p>迭代版</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">accumulate</span> combiner null-value term a next b)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iter</span> a result)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">            result</span><br><span class="line">            <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">next</span> a)</span> <span class="list">(<span class="keyword">combiner</span> result <span class="list">(<span class="keyword">term</span> a)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">iter</span> a null-value)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-33">习题 1.33</h3><blockquote>
<p><strong>Exercise 1.33.</strong>  You can obtain an even more general version of accumulate (exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.32" target="_blank" rel="external">1.32</a>) by introducing the notion of a <em>filter</em> on the terms to be combined. That is, combine only those terms derived from values in the range that satisfy a specified condition. The resulting filtered-accumulate abstraction takes the same arguments as accumulate, together with an additional predicate of one argument that specifies the filter. Write filtered-accumulate as a procedure. Show how to express the following using filtered-accumulate:</p>
<p>a. the sum of the squares of the prime numbers in the interval $a$ to $b$ (assuming that you have a prime? predicate already written)</p>
<p>b. the product of all the positive integers less than $n$ that are relatively prime to $n$ (i.e., all positive integers $i &lt; n$ such that $GCD(i,n) = 1$).</p>
</blockquote>
<p>先实现 <code>filtered-accumulate</code> </p>
<p>这个只需要在 <code>accumulate</code> 的基础上加上一个 filter 如果通过过滤则 <code>(term a)</code> 没有就是 <code>null-value</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">filtered-accumulate</span> filter combiner null-value term a next b)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">        null-value</span><br><span class="line">        <span class="list">(<span class="keyword">combiner</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">filter</span> a)</span> <span class="list">(<span class="keyword">term</span> a)</span> null-value)</span></span><br><span class="line">                  <span class="list">(<span class="keyword">filtered-accumulate</span> filter combiner null-value term <span class="list">(<span class="keyword">next</span> a)</span> next b)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>用 <code>filtered-accumulate</code> 实现 <code>accumulate</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">accumulate</span> combiner null-value term a next b)</span></span><br><span class="line">  	<span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">no-filter</span> x)</span> <span class="literal">#t</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">filtered-accumulate</span> no-filter combiner null-value term a next b)</span>)</span></span><br></pre></td></tr></table></figure>
<p>再用 <code>accumulate</code> 实现 <code>sum</code> 和 <code>product</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum</span> term a next b)</span></span><br><span class="line">  	<span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">plus</span> x y)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span></span><br><span class="line">  	<span class="list">(<span class="keyword">accumulate</span> plus <span class="number">1</span> term a next b)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">product</span> term a next b)</span></span><br><span class="line">  	<span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">times</span> x y)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x y)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">accumulate</span> times <span class="number">1</span> term a next b)</span>)</span></span><br></pre></td></tr></table></figure>
<p>现在解决第一个问题，求 a 到 b 所有素数的平方和</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum-of-square-primes</span> primes? a b)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">plus</span> x y)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">filtered-accumulate</span> primes? plus <span class="number">0</span> square a inc b)</span>)</span></span><br></pre></td></tr></table></figure>
<p>然后解决第二个问题</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">product-of-all-positive-integer-less-than</span> n)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">relative-prime?</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">not</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">0</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> x n)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">times</span> x y)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x y)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">identity</span> x)</span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">filtered-accumulate</span> relative-prime? times <span class="number">1</span> identity <span class="number">0</span> inc n)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-34">习题 1.34</h3><blockquote>
<p><strong>Exercise 1.34.</strong>  Suppose we define the procedure<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> g)</span></span><br><span class="line">  <span class="list">(<span class="keyword">g</span> <span class="number">2</span>)</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>Then we have<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">f</span> square)</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">z</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> z <span class="list">(<span class="keyword"><span class="built_in">+</span></span> z <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p>
<p>What happens if we (perversely) ask the interpreter to evaluate the combination <code>(f f)</code>? Explain.</p>
</blockquote>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">f</span> f)</span></span><br><span class="line"><span class="comment">; 先对一个 f 求值，返回函数</span></span><br><span class="line"><span class="comment">; 对第二个 f 求值，返回函数</span></span><br><span class="line"><span class="comment">; 应用整个列表</span></span><br><span class="line"><span class="comment">; 将第二个 f 当作参数传给第一个 f</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">2</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">; 非法调用，2 不是一个函数。</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-35">习题 1.35</h3><blockquote>
<p><strong>Exercise 1.35.</strong>  Show that the golden ratio $\phi$ (section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a>) is a fixed point of the transformation $  x \rightarrow 1 + 1/x$, and use this fact to compute $\phi$ by means of the fixed-point procedure.</p>
</blockquote>
<p>直接调用<code>fixed-point</code>即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">1</span> x)</span>)</span>)</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">; 987/610 = 1.618032786885246</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-36">习题 1.36</h3><blockquote>
<p><strong>Exercise 1.36.</strong>  Modify fixed-point so that it prints the sequence of approximations it generates, using the newline and display primitives shown in exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.22" target="_blank" rel="external">1.22</a>. Then find a solution to $x^x = 1000$ by finding a fixed point of $x \rightarrow \log{1000}/\log{x}$. (Use Scheme’s primitive log procedure, which computes natural logarithms.) Compare the number of steps this takes with and without average damping. (Note that you cannot start fixed-point with a guess of 1, as this would cause division by $\log{1} = 0$.)</p>
</blockquote>
<p>直接套用<code>fixed-point</code>即可。初始值不要选 $1$ 。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fixed-point</span> f first-guess)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">close-enough?</span> v1 v2)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> v1 v2)</span>)</span> tolerance)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">try</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">display</span></span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">newline</span></span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="keyword">next</span> <span class="list">(<span class="keyword">f</span> guess)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">close-enough?</span> guess next)</span></span><br><span class="line">          next</span><br><span class="line">          <span class="list">(<span class="keyword">try</span> next)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">try</span> first-guess)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">log</span></span> <span class="number">1000</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">log</span></span> x)</span>)</span>)</span> <span class="number">1.1</span>)</span></span><br><span class="line"><span class="comment">; 4.555538934848503</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-37">习题 1.37</h3><blockquote>
<p><strong>Exercise 1.37.</strong>  a. An infinite <em>continued fraction</em>is an expression of the form<br>$$<br>f = \cfrac{N_1}{D_1+\cfrac{N_2}{D_2 + \cfrac{N_3}{D_3+ …}}}<br>$$<br>As an example, one can show that the infinite continued fraction expansion with the $N_i$ and the $D_i$ all equal to 1 produces $1/\phi$ , where $\phi$ is the golden ratio (described in section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a>). One way to approximate an infinite continued fraction is to truncate the expansion after a given number of terms. Such a truncation — a so-called <em>k-term finite continued fraction</em> — has the form<br>$$<br>\cfrac{N_1}{D_1+\cfrac{N_2}{… + \cfrac{N_K}{D_K}}}<br>$$</p>
<p>Suppose that $n$ and $d$ are procedures of one argument (the term index $i$) that return the $N_i$ and $D_i$ of the terms of the continued fraction. Define a procedure cont-frac such that evaluating <code>(cont-frac n d k)</code> computes the value of the <em>k</em>-term finite continued fraction. Check your procedure by approximating  $1/\phi$ using<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">cont-frac</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span></span><br><span class="line">           <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span></span><br><span class="line">           k)</span></span><br></pre></td></tr></table></figure></p>
<p>for successive values of $k$. How large must you make $k$ in order to get an approximation that is accurate to 4 decimal places?</p>
<p>b. If your cont-frac procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</p>
</blockquote>
<p>先根据递推式编写连分数代码。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cont-frac</span> n d k)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> k <span class="number">1</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword">n</span> <span class="number">1</span>)</span> <span class="list">(<span class="keyword">d</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword">n</span> k)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">d</span> k)</span> <span class="list">(<span class="keyword">cont-frac</span> n d <span class="list">(<span class="keyword"><span class="built_in">-</span></span> k <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>黄金分割率的 $D_i$ 和 $N_i$ 都是 $1$ </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cont-frac-golden-ratio</span> k)</span></span><br><span class="line">    <span class="list">(<span class="keyword">cont-frac</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span></span><br><span class="line">               <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span></span><br><span class="line">               k)</span>)</span></span><br></pre></td></tr></table></figure>
<p>接着解决精度问题。</p>
<p>计算不同的 $k$ 当两个值的差在误差之内则是想要的结果。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">how-much</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> tolerance <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">cont-frac-golden-ratio</span> guess)</span></span><br><span class="line">                             <span class="list">(<span class="keyword">cont-frac-golden-ratio</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> guess <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">        guess</span><br><span class="line">        <span class="list">(<span class="keyword">how-much</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> guess)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">how-much</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">; 12</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">cont-frac-golden-ratio</span> <span class="number">12</span>)</span></span><br><span class="line"><span class="comment">; 0.6180257510729613</span></span><br></pre></td></tr></table></figure>
<p>迭代版</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cont-frac</span> n d k)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iter</span> n d k result)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> k <span class="number">0</span>)</span></span><br><span class="line">            result</span><br><span class="line">            <span class="list">(<span class="keyword">iter</span> n d <span class="list">(<span class="keyword"><span class="built_in">-</span></span> k <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword">n</span> k)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">d</span> k)</span> result)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">iter</span> n d k <span class="number">0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-38">习题 1.38</h3><blockquote>
<p><strong>Exercise 1.38.</strong>  In 1737, the Swiss mathematician Leonhard Euler published a memoir <em>De Fractionibus Continuis</em>, which included a continued fraction expansion for $e - 2$, where $e$ is the base of the natural logarithms. In this fraction, the $N_i$ are all 1, and the $D_i$ are successively 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, …. Write a program that uses your cont-frac procedure from exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.37" target="_blank" rel="external">1.37</a> to approximate $e$, based on Euler’s expansion.</p>
</blockquote>
<p>观察 $D_i$ 可得<br>$$<br>D_i =<br>\begin{cases}<br>1, &amp; i = 1, i \bmod 3 \ne 2<br>\\2 \times (\lfloor i/3 \rfloor + 1),  &amp;\text{otherwise}<br>\end{cases}<br>$$<br>程序如下</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">d</span> i)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> i <span class="number">1</span>)</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> i <span class="number">3</span>)</span> <span class="number">2</span>)</span></span><br><span class="line">            <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">quotient</span></span> i <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line">            <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">euler-method</span> k)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="list">(<span class="keyword">cont-frac</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span></span><br><span class="line">                    d</span><br><span class="line">                    k)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">euler-method</span> <span class="number">100</span>)</span></span><br><span class="line"><span class="comment">; 2.7182818284590455</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-39">习题 1.39</h3><blockquote>
<p><strong>Exercise 1.39.</strong>  A continued fraction representation of the tangent function was published in 1770 by the German mathematician J.H. Lambert:<br>$$<br>\tan x = \cfrac{x}{1-\cfrac{x^2}{3-\cfrac{x^2}{5-…}}}<br>$$<br>where $x$ is in radians. Define a procedure <code>(tan-cf x k)</code> that computes an approximation to the tangent function based on Lambert’s formula. K specifies the number of terms to compute, as in exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.37" target="_blank" rel="external">1.37</a>.</p>
</blockquote>
<p>观察分子 $n_i$  可得<br>$$<br>n_i =<br>\begin{cases}<br>x &amp; i = 1<br>\\x^2 &amp; i \ne 1<br>\end{cases}<br>$$<br>$D_i$ 规律为<br>$$<br>D_i = (i - 1) \times 2 + 1<br>$$<br>仿照上面 <code>cont-frac</code> 的代码得</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cont-frac</span> n d k)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iter</span> n d k result)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> k <span class="number">0</span>)</span></span><br><span class="line">            result</span><br><span class="line">            <span class="list">(<span class="keyword">iter</span> n d <span class="list">(<span class="keyword"><span class="built_in">-</span></span> k <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword">n</span> k)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">d</span> k)</span> result)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">iter</span> n d k <span class="number">0</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">tan-cf</span> x k)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">n</span> i)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> i <span class="number">1</span>)</span></span><br><span class="line">            x</span><br><span class="line">            <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">d</span> i)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2.0</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> i <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">cont-frac</span> n d k)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">tan-cf</span> <span class="number">1</span> <span class="number">100</span>)</span></span><br><span class="line"><span class="comment">; 1.557407724654902</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-40">习题 1.40</h3><blockquote>
<p><strong>Exercise 1.40.</strong>  Define a procedure cubic that can be used together with the newtons-method procedure in expressions of the form<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">newtons-method</span> <span class="list">(<span class="keyword">cubic</span> a b c)</span> <span class="number">1</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>to approximate zeros of the cubic $x^3 + ax^2 + bx +c$ .</p>
</blockquote>
<p>将多项式写成代码即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fixed-point</span> f first-guess)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">close-enough?</span> v1 v2)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> v1 v2)</span>)</span> tolerance)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">try</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="keyword">next</span> <span class="list">(<span class="keyword">f</span> guess)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">close-enough?</span> guess next)</span></span><br><span class="line">          next</span><br><span class="line">          <span class="list">(<span class="keyword">try</span> next)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">try</span> first-guess)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> dx <span class="number">0.00001</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">deriv</span> g)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">g</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x dx)</span>)</span> <span class="list">(<span class="keyword">g</span> x)</span>)</span></span><br><span class="line">       dx)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">newton-transform</span> g)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">-</span></span> x <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword">g</span> x)</span> <span class="list">(<span class="list">(<span class="keyword">deriv</span> g)</span> x)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">newtons-method</span> g guess)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="keyword">newton-transform</span> g)</span> guess)</span>)</span></span><br><span class="line">  </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cubic</span> a b c )</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x x)</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b x)</span></span><br><span class="line">                   c)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">newtons-method</span> <span class="list">(<span class="keyword">cubic</span> <span class="number">1</span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">39</span>)</span>)</span> <span class="number">1.0</span>)</span></span><br><span class="line"><span class="comment">; 3.00000000000019504</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-41">习题 1.41</h3><blockquote>
<p><strong>Exercise 1.41.</strong>  Define a procedure double that takes a procedure of one argument as argument and returns a procedure that applies the original procedure twice. For example, if inc is a procedure that adds 1 to its argument, then <code>(double inc)</code> should be a procedure that adds 2. What value is returned by<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="list">(<span class="keyword">double</span> <span class="list">(<span class="keyword">double</span> double)</span>)</span> inc)</span> <span class="number">5</span>)</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">double</span> f)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="list">(<span class="list">(<span class="keyword">double</span> <span class="list">(<span class="keyword">double</span> double)</span>)</span> inc)</span> <span class="number">5</span>)</span></span><br></pre></td></tr></table></figure>
<p>分析</p>
<p><code>double(f)(x)</code> 等于 $f(f(x))$ 也就是 $f^2(x)$ </p>
<p>所以 <code>(double double)(f)(x)</code> 等于 $f^2(f^2(x))$ 也就是 $f^4(x)$ </p>
<p>那么 <code>(double (double double))(f)(x)</code> 等于 $f^4(f^4(x))$ 也就是 $f^{16}(x)$ </p>
<p><code>inc</code> 应用 16 次 则为 +16 。</p>
<p>$ 16 + 5 = 21 $ </p>
<p>所以答案是 21</p>
<h3 id="习题_1-42">习题 1.42</h3><blockquote>
<p><strong>Exercise 1.42.</strong>  Let $f$ and $g$ be two one-argument functions. The <em>composition</em> $f$ after $g$ is defined to be the function $x \rightarrow  f(g(x))$ . Define a procedure compose that implements composition. For example, if inc is a procedure that adds 1 to its argument<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword">compose</span> square inc)</span> <span class="number">6</span>)</span></span><br><span class="line"><span class="number">49</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>返回一个函数即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">compose</span> f g)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">g</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword">compose</span> square inc)</span> <span class="number">6</span>)</span></span><br><span class="line"><span class="comment">; 49</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-43">习题 1.43</h3><blockquote>
<p><strong>Exercise 1.43.</strong>  If $f$ is a numerical function and $n$ is a positive integer, then we can form the $n$th repeated application of $f$, which is defined to be the function whose value at $x$ is $f(f(…(f(x))…))$ .  For example, if $f$ is the function $x \rightarrow x + 1$ , then the $n$th repeated application of $f$ is the function $x \rightarrow x + n$. If <em>f</em> is the operation of squaring a number, then the $n$th repeated application of $f$ is the function that raises its argument to the $2^n$th power. Write a procedure that takes as inputs a procedure that computes $f$ and a positive integer $n$ and returns the procedure that computes the $n$th repeated application of $f$. Your procedure should be able to be used as follows:<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword">repeated</span> square <span class="number">2</span>)</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="number">625</span></span><br></pre></td></tr></table></figure></p>
<p>Hint: You may find it convenient to use composefrom exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.42" target="_blank" rel="external">1.42</a>.</p>
</blockquote>
<p>重复应用的递推式为<br>$$<br>f^n(x) = f(f^{n-1}(x))<br>$$<br>代码如下</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">inc</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">repeat</span> f n)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> n <span class="number">1</span>)</span></span><br><span class="line">        f</span><br><span class="line">        <span class="list">(<span class="keyword">compose</span> f <span class="list">(<span class="keyword">repeat</span> f <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword">repeat</span> inc <span class="number">10</span>)</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">; 12</span></span><br><span class="line"><span class="list">(<span class="list">(<span class="keyword">repeat</span> square <span class="number">2</span>)</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">; 625</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-44">习题 1.44</h3><blockquote>
<p><strong>Exercise 1.44.</strong>  The idea of <em>smoothing</em> a function is an important concept in signal processing. If $f$ is a function and $dx$ is some small number, then the smoothed version of $f$ is the function whose value at a point $x$ is the average of $f(x - dx)$ ,$f(x)$, and $f(x + dx)$ . Write a procedure smooth that takes as input a procedure that computes $f$ and returns a procedure that computes the smoothed $f$. It is sometimes valuable to repeatedly smooth a function (that is, smooth the smoothed function, and so on) to obtained the <em>n-fold smoothed function</em>. Show how to generate the <em>n</em>-fold smoothed function of any given function usingsmooth and repeated from exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.43" target="_blank" rel="external">1.43</a>.</p>
</blockquote>
<p>这个比较简单，直接按定义写代码即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">smooth</span> f)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> dx <span class="number">0.00001</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">average</span> x y z)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x y z)</span> <span class="number">3</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> </span><br><span class="line">        <span class="list">(<span class="keyword">average</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> x dx)</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x dx)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fold-smooth</span> f n)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">repeat</span> smooth n)</span> f)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">((smooth square) 2)</span><br><span class="line">; 4.000000000006667</span><br><span class="line">(fold-smooth square 10) 2)</span><br><span class="line">; 4.000000000666667</span><br></pre></td></tr></table></figure>
<h3 id="习题_1-45">习题 1.45</h3><blockquote>
<p><strong>Exercise 1.45.</strong>  We saw in section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.3" target="_blank" rel="external">1.3.3</a> that attempting to compute square roots by naively finding a fixed point of $y \rightarrow  x/y$  does not converge, and that this can be fixed by average damping. The same method works for finding cube roots as fixed points of the average-damped $y \rightarrow x/y^2$ . Unfortunately, the process does not work forfourth roots — a single average damp is not enough to make a fixed-point search for $y \rightarrow x/y^3$ converge. On the other hand, if we average damp twice (i.e., use the average damp of the average damp of $y \rightarrow x/y^3$) the fixed-point search does converge. Do some experiments to determine how many average damps are required to compute $n$th roots as a fixed-point search based upon repeated average damping of $y \rightarrow x/y^{n-1}$. Use this to implement a simple procedure for computing $n$th roots using fixed-point, average-damp, and the repeatedprocedure of exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_thm_1.43" target="_blank" rel="external">1.43</a>. Assume that any arithmetic operations you need are available as primitives.</p>
</blockquote>
<p>组合之前的 <code>repeat</code> <code>fixed-point</code> 和 <code>average-damp</code> 即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fixed-point</span> f first-guess)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">close-enough?</span> v1 v2)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> v1 v2)</span>)</span> tolerance)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">try</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">let</span></span> <span class="list">(<span class="list">(<span class="keyword">next</span> <span class="list">(<span class="keyword">f</span> guess)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">close-enough?</span> guess next)</span></span><br><span class="line">          next</span><br><span class="line">          <span class="list">(<span class="keyword">try</span> next)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">try</span> first-guess)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">average-damp</span> f)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">average</span> x <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">nth-root</span> n x)</span></span><br><span class="line">    <span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="list">(<span class="keyword">repeat</span> average-damp n)</span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">y</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="list">(<span class="keyword"><span class="built_in">expt</span></span> y <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>经测试重复 n 次是可以的。</p>
<p>重复 $\frac{n}{2}$ 也是可以的。</p>
<p>但应该还有一个更确切的下界。需要通过数学推导得到。</p>
<h3 id="习题_1-46">习题 1.46</h3><blockquote>
<p><strong>Exercise 1.46.</strong>  Several of the numerical methods described in this chapter are instances of an extremely general computational strategy known as <em>iterative improvement</em>. Iterative improvement says that, to compute something, we start with an initial guess for the answer, test if the guess is good enough, and otherwise improve the guess and continue the process using the improved guess as the new guess. Write a procedure iterative-improvethat takes two procedures as arguments: a method for telling whether a guess is good enough and a method for improving a guess. Iterative-improveshould return as its value a procedure that takes a guess as argument and keeps improving the guess until it is good enough. Rewrite the sqrtprocedure of section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.7" target="_blank" rel="external">1.1.7</a> and the fixed-pointprocedure of section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.3" target="_blank" rel="external">1.3.3</a> in terms of iterative-improve.</p>
</blockquote>
<p>提取出共同部分即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">iterative-improve</span> good-enough? improve)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> guess)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess)</span></span><br><span class="line">            guess</span><br><span class="line">            <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">improve</span> guess)</span>)</span>)</span>)</span></span><br><span class="line">    f)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fixed-point</span> f first-guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.00001</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> x)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> x <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span> tolerance)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> x)</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">iterative-improve</span> good-enough? improve)</span> first-guess)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.001</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess next)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> guess next)</span>)</span> tolerance)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">        <span class="list">(<span class="keyword">average</span> guess <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x guess)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">average</span> a b)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">iterative-improve</span> good-enough? improve)</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fixed-point</span> cos <span class="number">1.0</span>)</span></span><br><span class="line"><span class="comment">; 0.7390822985224024</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">9</span>)</span></span><br><span class="line"><span class="comment">; 3.000000001396984</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>再次填坑。<br>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://en.ors-sro.com/tags/SICP/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Haskell 趣学指南》 笔记]]></title>
    <link href="http://en.ors-sro.com/Learn-you-a-Haskell-for-great-good-notes/"/>
    <id>http://en.ors-sro.com/Learn-you-a-Haskell-for-great-good-notes/</id>
    <published>2017-01-22T08:42:08.000Z</published>
    <updated>2017-03-05T08:30:38.426Z</updated>
    <content type="html"><![CDATA[<p><a href="http://learnyouahaskell.com/chapters" target="_blank" rel="external">《Haskell 趣学指南》</a>是一本非常简洁明了的入门书。</p>
<a id="more"></a>
<h2 id="Introduction">Introduction</h2><p><strong>Haskell</strong> 是一门纯函数式编程语言。</p>
<p>函数式，相对于命令式，解决问题的方式是定义问题，而不是定义如何做。</p>
<p>纯函数，说的是没有副作用。也就是函数的执行不会依赖和改变状态（变量的值等）。只依赖输入。两次相同输入对应同一个输出。</p>
<p>Haskell 是<strong>惰性</strong>的。</p>
<p>表达式的值只会在需要的时候才会求值。所以使用无限长度的列表也不会有问题。</p>
<p>Haskell 基于<strong>静态类型</strong>。</p>
<p>也就是 Haskell 编译期能够在运行前推断出值的类型。</p>
<p>Haskell 是一帮博士设计的语言。第一版语言报告在 2003 年公布。</p>
<p>Haskell 的一个运行平台是 GHC (Glasgow Haskell Complier) 。文件后缀为 <code>.hs</code> </p>
<p>类型名称使用大驼峰。</p>
<p>变量使用小驼峰。</p>
<p>变量名称中可以使用 <code>&#39;</code> 和 <code>_</code> 字符。</p>
<p><code>&#39;</code> 表示稍微修改的版本。</p>
<p><code>_</code> 表示不关注该变量。</p>
<p>GHC 的一些命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:l</td>
<td>加载文件 (Load)</td>
</tr>
<tr>
<td>:r</td>
<td>重新加载文件</td>
</tr>
<tr>
<td>:t</td>
<td>查看类型</td>
</tr>
<tr>
<td>:set prompt</td>
<td>改变 prelude 提示字符</td>
</tr>
<tr>
<td>:m + 模块名称</td>
<td>加载模块的某一部分</td>
</tr>
<tr>
<td>it</td>
<td>上一个表达式结果</td>
</tr>
<tr>
<td>ghc —make xxx.hs</td>
<td>编译文件</td>
</tr>
<tr>
<td>runhaskell xxx.hs</td>
<td>跳过编译临时运行</td>
</tr>
</tbody>
</table>
<h2 id="Starting_Out">Starting Out</h2><p>支持大部分算术符号。使用负数需要用括号括起来。使用括号可以改变优先级</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法</td>
</tr>
<tr>
<td>-</td>
<td>减法，负数</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
</tr>
<tr>
<td>/</td>
<td>除法，结果为小数</td>
</tr>
<tr>
<td>()</td>
<td>括号，改变优先级</td>
</tr>
<tr>
<td>True</td>
<td>布尔值真</td>
</tr>
<tr>
<td>False</td>
<td>布尔值假</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>布尔运算且</td>
</tr>
<tr>
<td>&#124;&#124;</td>
<td>布尔运算或</td>
</tr>
<tr>
<td>not</td>
<td>布尔运算非</td>
</tr>
<tr>
<td>==</td>
<td>判断是否相等</td>
</tr>
<tr>
<td>/=</td>
<td>判断是否不等</td>
</tr>
</tbody>
</table>
<p>Haskell 不会自动隐式类型转换。所以 <code>5 + True</code> 会报错。<code>5 + 4.0</code> 也是会报错的。因为一个是整数一个是浮点数。</p>
<p>以上操作符均为中缀操作符。</p>
<p>函数调用使用前缀表达式。函数名后跟参数，以空格区分。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; succ <span class="number">8</span>  </span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>函数调用优先级最高。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; succ <span class="number">9</span> + max <span class="number">5</span> <span class="number">4</span> + <span class="number">1</span>  </span><br><span class="line"><span class="number">16</span>  </span><br><span class="line"><span class="comment">-- 相当于下面的式子</span></span><br><span class="line"><span class="title">ghci</span>&gt; (succ <span class="number">9</span>) + (max <span class="number">5</span> <span class="number">4</span>) + <span class="number">1</span>  </span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure>
<p>函数使用反引号「`」包裹后可使用中缀的表达式</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; div <span class="number">92</span> <span class="number">10</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">92</span> `div` <span class="number">10</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>函数嵌套需要括号括住</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; succ (succ <span class="number">7</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>函数定义格式为，函数名，参数列表，=，表达式。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">doubleMe</span> x = x + x</span><br></pre></td></tr></table></figure>
<p>函数定义不需要手动提升。先定义的函数可以调用后定义的函数</p>
<p>条件判断操作符为 <code>if ... then ... else ...</code> 。没有大括号，必须有 <code>else</code> 分支以保证 <code>if</code> 表达式一定有值。</p>
<p>条件判断操作符可以换行，但要注意缩进。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">doubleSmallNumber</span> x = <span class="keyword">if</span> x &gt; <span class="number">100</span>  </span><br><span class="line">                        <span class="keyword">then</span> x  </span><br><span class="line">                        <span class="keyword">else</span> x*<span class="number">2</span>   </span><br><span class="line"></span><br><span class="line"><span class="title">doubleSmallNumber'</span> x = (<span class="keyword">if</span> x &gt; <span class="number">100</span> <span class="keyword">then</span> x <span class="keyword">else</span> x*<span class="number">2</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>通常在函数后面加 <code>&#39;</code> 表示稍微修改的函数。</p>
<p>字符串使用双引号，字符使用单引号。</p>
<p>变量绑定使用 <code>let</code> 关键字。不需要声明类型。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">let</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>列表使用 <code>[]</code> ，元素用 <code>,</code> 分隔</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['h','e','l','l','o']</span><br></pre></td></tr></table></figure>
<p>列表使用 <code>++</code> 函数拼接。字符串是字符列表所以用 <code>++</code> 拼接</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] ++ [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="string">"hello"</span> ++ <span class="string">" "</span> ++ <span class="string">"world"</span>  </span><br><span class="line"><span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>
<p><code>:</code> 用于向列表最前端插入一个元素。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; '<span class="type">A'</span>:<span class="string">" SMALL CAT"</span>  </span><br><span class="line"><span class="string">"A SMALL CAT"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">5</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><code>!!</code> 用于取出元素，长度不够会报错。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="string">"Steve Buscemi"</span> !! <span class="number">6</span>  </span><br><span class="line">'<span class="type">B'</span></span><br></pre></td></tr></table></figure>
<p><code>head</code> 获得列表头元素。 <code>tail</code> 获得尾列表</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; head [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="title">ghci</span>&gt; tail [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><code>elem</code> 用于判断元素是否在列表中</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">True</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">10</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </span><br><span class="line"><span class="type">False</span></span><br></pre></td></tr></table></figure>
<p><code>..</code> 在列表中表示范围</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1.</span>.<span class="number">20</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; ['<span class="type">K'</span>..'<span class="type">Z'</span>]  </span><br><span class="line"><span class="string">"KLMNOPQRSTUVWXYZ"</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">2</span>,<span class="number">4.</span>.<span class="number">20</span>]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</span><br></pre></td></tr></table></figure>
<p><code>replicate</code> 用于重复相同元素一定的次数。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; replicate <span class="number">3</span> <span class="number">10</span></span><br><span class="line">[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<p>其他函数参见<strong>常用函数</strong></p>
<p>列表解析式（List comprehensions）是 Haskell 中一种特殊的列表构造方式，类似于数学中的集合。</p>
<p>比如集合 $S = \lbrace  2 \cdot x | x \in \Bbb{N} , x \le 10 \rbrace $ 对应的 Haskell 代码</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span>.<span class="number">10</span>]]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</span><br></pre></td></tr></table></figure>
<p><code>|</code> 左边为集合元素表达式，右边为过滤条件。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span>.<span class="number">10</span>], x*<span class="number">2</span> &gt;= <span class="number">12</span>]  </span><br><span class="line">[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [ x | x &lt;- [<span class="number">50.</span>.<span class="number">100</span>], x `mod` <span class="number">7</span> == <span class="number">3</span>]  </span><br><span class="line">[<span class="number">52</span>,<span class="number">59</span>,<span class="number">66</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">87</span>,<span class="number">94</span>]   </span><br><span class="line"><span class="title">ghci</span>&gt; [ <span class="keyword">if</span> x &lt; <span class="number">10</span> <span class="keyword">then</span> <span class="string">"BOOM!"</span> <span class="keyword">else</span> <span class="string">"BANG!"</span> | x &lt;- [<span class="number">1.</span>.<span class="number">10</span>], odd x] </span><br><span class="line">[<span class="string">"BOOM!"</span>,<span class="string">"BOOM!"</span>,<span class="string">"BOOM!"</span>,<span class="string">"BOOM!"</span>,<span class="string">"BOOM!"</span>]</span><br></pre></td></tr></table></figure>
<p>支持多个元素（变量）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [ x*y | x &lt;- [<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>], y &lt;- [<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>]]  </span><br><span class="line">[<span class="number">16</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">110</span>]   </span><br><span class="line"><span class="title">ghci</span>&gt; [ (a,b,c) | c &lt;- [<span class="number">1.</span>.<span class="number">10</span>], b &lt;- [<span class="number">1.</span>.c], a &lt;- [<span class="number">1.</span>.b], a^<span class="number">2</span> + b^<span class="number">2</span> == c^<span class="number">2</span>] </span><br><span class="line">[(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)]</span><br></pre></td></tr></table></figure>
<p>元组用于保存不同类型变量。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"Christopher"</span>, <span class="string">"Walken"</span>, <span class="number">55</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Types_and_Typeclasses">Types and Typeclasses</h2><p>Haskell 使用 Hindley-Milner 类型系统。格式为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#20989;&#25968;&#21517;&#23383; :: (&#31867;&#22411;&#32422;&#26463;) =&#62; &#21442;&#25968;1 -&#62; &#21442;&#25968;2 ... -&#62; &#21442;&#25968;n</span><br></pre></td></tr></table></figure>
<p>比如加法的类型签名为</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :t (+)</span><br><span class="line">(+) :: <span class="type">Num</span> a =&gt; a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<p>其中 <code>a</code> 为类型变量。<code>Num a</code> 表示 <code>a</code> 为数字类型，可以是 <code>int</code> ，<code>Integer</code> 等。</p>
<p>Haskell 的常见类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Int</td>
<td>整数，[$ -2^{31}$,$2^{31} - 1 $ ]</td>
</tr>
<tr>
<td>Integer</td>
<td>整数，无范围限制</td>
</tr>
<tr>
<td>Float</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>Double</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>Bool</td>
<td>布尔类型</td>
</tr>
<tr>
<td>Char</td>
<td>字符</td>
</tr>
</tbody>
</table>
<p>类型类（Typeclass） 指的是类型的类型。是对类型的再一次归类。如 <code>int</code> 可以是 <code>Eq</code> 类，也可以是 <code>Ord</code> 类。</p>
<p>Haskell 的常见类型类</p>
<table>
<thead>
<tr>
<th>类型类</th>
<th>描述</th>
<th>支持的操作符</th>
</tr>
</thead>
<tbody>
<tr>
<td>Eq</td>
<td>可比较是否相等</td>
<td>== /= elem</td>
</tr>
<tr>
<td>Ord</td>
<td>可比较顺序</td>
<td>&lt; &gt; &lt;= &gt;=</td>
</tr>
<tr>
<td>Show</td>
<td>任意类型转为可显示的字符串</td>
<td>show</td>
</tr>
<tr>
<td>Read</td>
<td>字符串解析为特定类型</td>
<td>read</td>
</tr>
<tr>
<td></td>
<td>可枚举类型类</td>
<td>.. succ pred</td>
</tr>
<tr>
<td>Bounded</td>
<td>有界类型类</td>
<td>minBound maxBound</td>
</tr>
<tr>
<td>Num</td>
<td>数字类型类</td>
<td>+ - *</td>
</tr>
<tr>
<td>Integral</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Floating</td>
<td>小数类型类</td>
<td></td>
</tr>
<tr>
<td>Functor</td>
<td>函子</td>
<td>fmap</td>
</tr>
<tr>
<td>Applicative Functor</td>
<td>可相互应用的函子</td>
<td>pure &lt;*&gt;</td>
</tr>
<tr>
<td>Monad</td>
<td>单子</td>
<td>return &gt;&gt;=</td>
</tr>
</tbody>
</table>
<h2 id="Syntax_in_Functions">Syntax in Functions</h2><p>模式匹配类似于命令式语言中的 <code>Switch ... case</code> 匹配，不过匹配的源表达式更复杂。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">lucky</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">lucky</span> <span class="number">8</span> = <span class="string">"LUCKY NUMBER EIGHT!"</span>  </span><br><span class="line"><span class="title">lucky</span> x = <span class="string">"Sorry, you're out of luck, pal!"</span></span><br></pre></td></tr></table></figure>
<p>匹配顺序从上到下，匹配失败会报错。</p>
<p>模式匹配经常于递归搭配使用，先写出递归的边界条件，然后匹配剩下的递归</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">factorial</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; a  </span><br><span class="line"><span class="title">factorial</span> <span class="number">0</span> = <span class="number">1</span>  </span><br><span class="line"><span class="title">factorial</span> n = n * factorial (n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>模式匹配还可用于元组和列表</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">addVectors</span> :: (<span class="type">Num</span> a) =&gt; (a, a) -&gt; (a, a) -&gt; (a, a)  </span><br><span class="line"><span class="title">addVectors</span> a b = (fst a + fst b, snd a + snd b)  </span><br><span class="line"><span class="comment">-- 使用模式匹配后</span></span><br><span class="line"><span class="title">addVectors</span> :: (<span class="type">Num</span> a) =&gt; (a, a) -&gt; (a, a) -&gt; (a, a)  </span><br><span class="line"><span class="title">addVectors</span> (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)  </span><br><span class="line"><span class="comment">-- 列表的模式匹配</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> xs = [(<span class="number">1</span>,<span class="number">3</span>), (<span class="number">4</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">4</span>), (<span class="number">5</span>,<span class="number">3</span>), (<span class="number">5</span>,<span class="number">6</span>), (<span class="number">3</span>,<span class="number">1</span>)]  </span><br><span class="line"><span class="title">ghci</span>&gt; [a+b | (a,b) &lt;- xs]  </span><br><span class="line">[<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">4</span>]   </span><br><span class="line"></span><br><span class="line"><span class="title">head'</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head'</span> [] = error <span class="string">"Can't call head on an empty list, dummy!"</span>  </span><br><span class="line"><span class="title">head'</span> (x:_) = x  </span><br><span class="line"></span><br><span class="line"><span class="title">length'</span> :: (<span class="type">Num</span> b) =&gt; [a] -&gt; b  </span><br><span class="line"><span class="title">length'</span> [] = <span class="number">0</span>  </span><br><span class="line"><span class="title">length'</span> (_:xs) = <span class="number">1</span> + length' xs</span><br></pre></td></tr></table></figure>
<p>模式匹配支持 <code>all@pattern</code> 的方式匹配。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">capital</span> :: <span class="type">String</span> -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">capital</span> <span class="string">""</span> = <span class="string">"Empty string, whoops!"</span>  </span><br><span class="line"><span class="title">capital</span> all@(x:xs) = <span class="string">"The first letter of "</span> ++ all ++ <span class="string">" is "</span> ++ [x]</span><br></pre></td></tr></table></figure>
<p>如果说模式匹配类似于 <code>Switch ... case</code> ，那么条件匹配（Guards）类似于 <code>if ... then ... else</code></p>
<p>条件匹配可以支持一个范围区间，而模式匹配不可以，除非手写范围区间内所有情况。</p>
<p>条件匹配用 <code>|</code> 分隔条件。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bmiTell</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">bmiTell</span> bmi  </span><br><span class="line">    | bmi &lt;= <span class="number">18.5</span> = <span class="string">"You're underweight, you emo, you!"</span>  </span><br><span class="line">    | bmi &lt;= <span class="number">25.0</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>  </span><br><span class="line">    | bmi &lt;= <span class="number">30.0</span> = <span class="string">"You're fat! Lose some weight, fatty!"</span>  </span><br><span class="line">    | otherwise   = <span class="string">"You're a whale, congratulations!"</span></span><br></pre></td></tr></table></figure>
<p> 与 <code>if</code> 类似，条件匹配必须有 <code>otherwise</code> 保证表达式一定有值。</p>
<p>定义函数时可以使用反引号「`」</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">myCompare</span> :: (<span class="type">Ord</span> a) =&gt; a -&gt; a -&gt; <span class="type">Ordering</span>  </span><br><span class="line"><span class="title">a</span> `myCompare` b  </span><br><span class="line">    | a &gt; b     = <span class="type">GT</span>  </span><br><span class="line">    | a == b    = <span class="type">EQ</span>  </span><br><span class="line">    | otherwise = <span class="type">LT</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">3</span> `myCompare` <span class="number">2</span>  </span><br><span class="line"><span class="type">GT</span></span><br></pre></td></tr></table></figure>
<p>限定语句（Where） ，可用于声明变量。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bmiTell</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">bmiTell</span> weight height  </span><br><span class="line">    | bmi &lt;= skinny = <span class="string">"You're underweight, you emo, you!"</span>  </span><br><span class="line">    | bmi &lt;= normal = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>  </span><br><span class="line">    | bmi &lt;= fat    = <span class="string">"You're fat! Lose some weight, fatty!"</span>  </span><br><span class="line">    | otherwise     = <span class="string">"You're a whale, congratulations!"</span>  </span><br><span class="line">    <span class="keyword">where</span> bmi = weight / height ^ <span class="number">2</span>  </span><br><span class="line">          (skinny, normal, fat) = (<span class="number">18.5</span>, <span class="number">25.0</span>, <span class="number">30.0</span>)</span><br></pre></td></tr></table></figure>
<p>绑定语句（Let），与限定语句对应，用于在开头绑定变量。</p>
<p>形式为 <code>Let &lt;binding&gt; in &lt;expression&gt;</code>  。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cylinder</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; a  </span><br><span class="line"><span class="title">cylinder</span> r h = </span><br><span class="line">    <span class="keyword">let</span> sideArea = <span class="number">2</span> * pi * r * h  </span><br><span class="line">        topArea = pi * r ^<span class="number">2</span>  </span><br><span class="line">    <span class="keyword">in</span>  sideArea + <span class="number">2</span> * topArea</span><br></pre></td></tr></table></figure>
<p>绑定语句很灵活，不仅仅在函数定义中使用，还可以在列表等多处地方使用。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="keyword">let</span> square x = x * x <span class="keyword">in</span> (square <span class="number">5</span>, square <span class="number">3</span>, square <span class="number">2</span>)]  </span><br><span class="line">[(<span class="number">25</span>,<span class="number">9</span>,<span class="number">4</span>)]</span><br></pre></td></tr></table></figure>
<p><code>case</code> 语句。类似于命令式语言的 <code>case</code> 。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head'</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head'</span> xs = <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; error <span class="string">"No head for empty lists!"</span>  </span><br><span class="line">                      (x:_) -&gt; x</span><br></pre></td></tr></table></figure>
<h2 id="Recursion">Recursion</h2><p>Haskell 的函数定义支持递归</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">quicksort</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; [a]  </span><br><span class="line"><span class="title">quicksort</span> [] = []  </span><br><span class="line"><span class="title">quicksort</span> (x:xs) = quicksort [a | a &lt;- xs, a &lt;= x] ++ [x] ++ quicksort [a | a &lt;- xs, a &gt; x]</span><br></pre></td></tr></table></figure>
<p>有了递归之后常见函数都可以使用递归实现</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">replicate'</span> :: (<span class="type">Num</span> i, <span class="type">Ord</span> i) =&gt; i -&gt; a -&gt; [a]  </span><br><span class="line"><span class="title">replicate'</span> n x  </span><br><span class="line">    | n &lt;= <span class="number">0</span>    = []  </span><br><span class="line">    | otherwise = x:replicate' (n-<span class="number">1</span>) x  </span><br><span class="line">    </span><br><span class="line"><span class="title">take'</span> :: (<span class="type">Num</span> i, <span class="type">Ord</span> i) =&gt; i -&gt; [a] -&gt; [a]  </span><br><span class="line"><span class="title">take'</span> n _  </span><br><span class="line">    | n &lt;= <span class="number">0</span>   = []  </span><br><span class="line"><span class="title">take'</span> _ []     = []  </span><br><span class="line"><span class="title">take'</span> n (x:xs) = x : take' (n-<span class="number">1</span>) xs  </span><br><span class="line"></span><br><span class="line"><span class="title">reverse'</span> :: [a] -&gt; [a]  </span><br><span class="line"><span class="title">reverse'</span> [] = []  </span><br><span class="line"><span class="title">reverse'</span> (x:xs) = reverse' xs ++ [x]  </span><br><span class="line"></span><br><span class="line"><span class="title">repeat'</span> :: a -&gt; [a]  </span><br><span class="line"><span class="title">repeat'</span> x = x:repeat' x</span><br></pre></td></tr></table></figure>
<h2 id="Higher_order_functions">Higher order functions</h2><p>柯里化是一种将多参函数化为多个单参函数的奇数。Haskell 中函数只支持一个参数，通过柯里化就能实现支持多个参数的函数。多参函数的调用过程可以视为单参函数的逐步填充过程。调用函数却没有给够参数的过程称为部分应用（partially apply）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; max <span class="number">4</span> <span class="number">5</span>  </span><br><span class="line"><span class="number">5</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; (max <span class="number">4</span>) <span class="number">5</span>  <span class="comment">-- (max 4) 是一个函数</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>接收或返回函数的一类函数称为高阶函数。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">applyTwice</span> :: (a -&gt; a) -&gt; a -&gt; a  </span><br><span class="line"><span class="title">applyTwice</span> f x = f (f x)  </span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; applyTwice (+<span class="number">3</span>) <span class="number">10</span>  </span><br><span class="line"><span class="number">16</span>  </span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; applyTwice (++ <span class="string">" HAHA"</span>) <span class="string">"HEY"</span>  </span><br><span class="line"><span class="string">"HEY HAHA HAHA"</span></span><br></pre></td></tr></table></figure>
<p>Haskell 常见的高阶函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>map</td>
<td>对列表所有元素应用函数，返回所有元素应用函数后的列表</td>
</tr>
<tr>
<td>filter</td>
<td>对列表所有函数应用过滤函数，返回符合条件的列表</td>
</tr>
<tr>
<td>foldl</td>
<td>从最左边的元素开始，从左往右应用函数，返回累积值。</td>
</tr>
<tr>
<td>foldr</td>
<td>从最右边的元素开始，从右往左应用函数，返回累积值。</td>
</tr>
<tr>
<td>foldl1</td>
<td>与 foldl 类似，不用提供初始值</td>
</tr>
<tr>
<td>foldr1</td>
<td>与 foldr 类似，不用提供初始值</td>
</tr>
<tr>
<td>scanl</td>
<td>与 foldl 类似，不过保留每个步骤的结果</td>
</tr>
<tr>
<td>scanr</td>
<td>与 foldr 类似，不过保留每个步骤的结果</td>
</tr>
</tbody>
</table>
<p>例子</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sum (takeWhile (&lt;<span class="number">10000</span>) (filter odd (map (^<span class="number">2</span>) [<span class="number">1.</span>.])))  </span><br><span class="line"><span class="number">166650</span></span><br></pre></td></tr></table></figure>
<p>列表操作大部分都可以使用 <code>fold</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">maximum'</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; a  </span><br><span class="line"><span class="title">maximum'</span> = foldr1 (\x acc -&gt; <span class="keyword">if</span> x &gt; acc <span class="keyword">then</span> x <span class="keyword">else</span> acc)  </span><br><span class="line">  </span><br><span class="line"><span class="title">reverse'</span> :: [a] -&gt; [a]  </span><br><span class="line"><span class="title">reverse'</span> = foldl (\acc x -&gt; x : acc) []  </span><br><span class="line">  </span><br><span class="line"><span class="title">product'</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a  </span><br><span class="line"><span class="title">product'</span> = foldr1 (*)  </span><br><span class="line">  </span><br><span class="line"><span class="title">filter'</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; [a]  </span><br><span class="line"><span class="title">filter'</span> p = foldr (\x acc -&gt; <span class="keyword">if</span> p x <span class="keyword">then</span> x : acc <span class="keyword">else</span> acc) []  </span><br><span class="line">  </span><br><span class="line"><span class="title">head'</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head'</span> = foldr1 (\x _ -&gt; x)  </span><br><span class="line">  </span><br><span class="line"><span class="title">last'</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">last'</span> = foldl1 (\_ x -&gt; x)</span><br></pre></td></tr></table></figure>
<p>匿名函数（Lambda），没有名字的函数。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">numLongChains</span> :: <span class="type">Int</span>  </span><br><span class="line"><span class="title">numLongChains</span> = length (filter (\xs -&gt; length xs &gt; <span class="number">15</span>) (map chain [<span class="number">1.</span>.<span class="number">100</span>]))  </span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; map (+<span class="number">3</span>) [<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; map (\x -&gt; x + <span class="number">3</span>) [<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><code>$</code> 函数应用符。右结合，优先级很低，所以可以用来节省括号。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sum</span> (filter (&gt; <span class="number">10</span>) (map (*<span class="number">2</span>) [<span class="number">2.</span>.<span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line"><span class="title">sum</span> $ filter (&gt; <span class="number">10</span>) $ map (*<span class="number">2</span>) [<span class="number">2.</span>.<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<p>还可以这么玩</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map ($ <span class="number">3</span>) [(<span class="number">4</span>+), (<span class="number">10</span>*), (^<span class="number">2</span>), sqrt]  </span><br><span class="line">[<span class="number">7.0</span>,<span class="number">30.0</span>,<span class="number">9.0</span>,<span class="number">1.7320508075688772</span>]</span><br></pre></td></tr></table></figure>
<p><code>(.)</code> 函数组合。 <code>(f . g) x = f (g x)</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map (negate . abs) [<span class="number">5</span>,-<span class="number">3</span>,-<span class="number">6</span>,<span class="number">7</span>,-<span class="number">3</span>,<span class="number">2</span>,-<span class="number">19</span>,<span class="number">24</span>]  </span><br><span class="line">[-<span class="number">5</span>,-<span class="number">3</span>,-<span class="number">6</span>,-<span class="number">7</span>,-<span class="number">3</span>,-<span class="number">2</span>,-<span class="number">19</span>,-<span class="number">24</span>]  </span><br><span class="line"></span><br><span class="line"><span class="title">oddSquareSum</span> :: <span class="type">Integer</span>  </span><br><span class="line"><span class="title">oddSquareSum</span> = sum (takeWhile (&lt;<span class="number">10000</span>) (filter odd (map (^<span class="number">2</span>) [<span class="number">1.</span>.])))    </span><br><span class="line"><span class="comment">-- 改为函数组合</span></span><br><span class="line"><span class="title">oddSquareSum</span> :: <span class="type">Integer</span>  </span><br><span class="line"><span class="title">oddSquareSum</span> = sum . takeWhile (&lt;<span class="number">10000</span>) . filter odd . map (^<span class="number">2</span>) $ [<span class="number">1.</span>.]</span><br></pre></td></tr></table></figure>
<h2 id="Modules">Modules</h2><p>Haskell 的模块与其他语言的模块概念相似。</p>
<p>导入模块 <code>import &lt;module name&gt;</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> Data.List  </span></span><br><span class="line"><span class="comment">-- nub 是其中的一个函数</span></span><br><span class="line"><span class="title">numUniques</span> :: (<span class="type">Eq</span> a) =&gt; [a] -&gt; <span class="type">Int</span>  </span><br><span class="line"><span class="title">numUniques</span> = length . nub</span><br></pre></td></tr></table></figure>
<p>只引用模块中部分函数 </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> Data.List <span class="container">(<span class="title">nub</span>, <span class="title">sort</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>不用模块中的某些函数</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> Data.List <span class="keyword">hiding</span> <span class="container">(<span class="title">nub</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>取别名</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> M</span></span><br></pre></td></tr></table></figure>
<p>编写模块与编写普通的 Haskell 代码一样，只不过需要在文件头部加上需要导出的函数模块声明。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="module"><span class="keyword">module</span> Geometry  </span><br><span class="line"><span class="container">( <span class="title">sphereVolume</span>  </span><br><span class="line">, <span class="title">sphereArea</span>  </span><br><span class="line">, <span class="title">cubeVolume</span>  </span><br><span class="line">, <span class="title">cubeArea</span>  </span><br><span class="line">, <span class="title">cuboidArea</span>  </span><br><span class="line">, <span class="title">cuboidVolume</span>  </span><br><span class="line">)</span> <span class="keyword">where</span></span>  </span><br><span class="line">  </span><br><span class="line"><span class="title">sphereVolume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </span><br><span class="line"><span class="title">sphereVolume</span> radius = (<span class="number">4.0</span> / <span class="number">3.0</span>) * pi * (radius ^ <span class="number">3</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="title">sphereArea</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </span><br><span class="line"><span class="title">sphereArea</span> radius = <span class="number">4</span> * pi * (radius ^ <span class="number">2</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="title">cubeVolume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </span><br><span class="line"><span class="title">cubeVolume</span> side = cuboidVolume side side side  </span><br><span class="line">  </span><br><span class="line"><span class="title">cubeArea</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </span><br><span class="line"><span class="title">cubeArea</span> side = cuboidArea side side side  </span><br><span class="line">  </span><br><span class="line"><span class="title">cuboidVolume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span>  </span><br><span class="line"><span class="title">cuboidVolume</span> a b c = rectangleArea a b * c  </span><br><span class="line">  </span><br><span class="line"><span class="title">cuboidArea</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span>  </span><br><span class="line"><span class="title">cuboidArea</span> a b c = rectangleArea a b * <span class="number">2</span> + rectangleArea a c * <span class="number">2</span> + rectangleArea c b * <span class="number">2</span>  </span><br><span class="line">  </span><br><span class="line"><span class="title">rectangleArea</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span>  </span><br><span class="line"><span class="title">rectangleArea</span> a b = a * b</span><br></pre></td></tr></table></figure>
<h2 id="Making_Our_Own_Types_and_Typeclasses">Making Our Own Types and Typeclasses</h2><p>代数数据类型（Algebraic data types），是 Haskell 中的一种自定义数据类型。注意不要缩写成 ADT 。因为有好几个缩写都可以是 ADT 。</p>
<p>纯数据类型</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">data</span> <span class="type">Bool</span> = <span class="type">False</span> | <span class="type">True</span></span></span><br></pre></td></tr></table></figure>
<p>带构造器类型</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span></span></span><br></pre></td></tr></table></figure>
<p>注意类型首字母大写，类型变量首字母小写的规定。</p>
<p>为了能显示需要继承 <code>Show</code> 类型类，使用 <code>deriving</code> 关键字，多个类型类用 <code>,</code> 分隔。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>实例化</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Circle</span> <span class="number">10</span> <span class="number">20</span> <span class="number">5</span>  </span><br><span class="line"><span class="type">Circle</span> <span class="number">10.0</span> <span class="number">20.0</span> <span class="number">5.0</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Rectangle</span> <span class="number">50</span> <span class="number">230</span> <span class="number">60</span> <span class="number">90</span>  </span><br><span class="line"><span class="type">Rectangle</span> <span class="number">50.0</span> <span class="number">230.0</span> <span class="number">60.0</span> <span class="number">90.0</span></span><br></pre></td></tr></table></figure>
<p>定义了抽象数据类型后通常需要定义相应的 <code>Getter</code> 。Haskell 中有记录语法（Record Syntax）避免手写这些重复的代码。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data Person = Person &#123; firstName :: String  &#10;                     , lastName :: String  &#10;                     , age :: Int  &#10;                     , height :: Float  &#10;                     , phoneNumber :: String  &#10;                     , flavor :: String  &#10;                     &#125; deriving (Show)</span><br></pre></td></tr></table></figure>
<p>定义完后，可以直接取值</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :t flavor  </span><br><span class="line"><span class="title">flavor</span> :: <span class="type">Person</span> -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; :t firstName  </span><br><span class="line"><span class="title">firstName</span> :: <span class="type">Person</span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure>
<p>代数数据类型中的类型构造函数可以接受类型参数，这点类似泛型中的参数变量</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Nothing</span> | <span class="type">Just</span> a  <span class="comment">-- a 为类型参数</span></span></span><br></pre></td></tr></table></figure>
<p>接受不同的类型</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="string">"Haha"</span>  </span><br><span class="line"><span class="type">Just</span> <span class="string">"Haha"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">84</span>  </span><br><span class="line"><span class="type">Just</span> <span class="number">84</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; :t <span class="type">Just</span> <span class="string">"Haha"</span>  </span><br><span class="line"><span class="type">Just</span> <span class="string">"Haha"</span> :: <span class="type">Maybe</span> [<span class="type">Char</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; :t <span class="type">Just</span> <span class="number">84</span>  </span><br><span class="line"><span class="type">Just</span> <span class="number">84</span> :: (<span class="type">Num</span> t) =&gt; <span class="type">Maybe</span> t  </span><br><span class="line"><span class="title">ghci</span>&gt; :t <span class="type">Nothing</span>  </span><br><span class="line"><span class="type">Nothing</span> :: <span class="type">Maybe</span> a  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">10</span> :: <span class="type">Maybe</span> <span class="type">Double</span>  </span><br><span class="line"><span class="type">Just</span> <span class="number">10.0</span></span><br></pre></td></tr></table></figure>
<p>既然有类型参数，那么类型参数也是可以有的</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">data</span> <span class="container">(<span class="type">Ord</span> <span class="title">k</span>)</span> =&gt; <span class="type">Map</span> k v = ...</span></span><br></pre></td></tr></table></figure>
<p>有时候新的类型跟已有类型内容一样只是名字不同，可以使用类型别名（Type Synoyms）。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">type</span> <span class="type">String</span> = [<span class="type">Char</span>] </span></span><br><span class="line"></span><br><span class="line"><span class="typedef"><span class="keyword">type</span> <span class="type">PhoneNumber</span> = <span class="type">String</span>  </span></span><br><span class="line"><span class="typedef"><span class="keyword">type</span> <span class="type">Name</span> = <span class="type">String</span>  </span></span><br><span class="line"><span class="typedef"><span class="keyword">type</span> <span class="type">PhoneBook</span> = [<span class="container">(<span class="type">Name</span>,<span class="type">PhoneNumber</span>)</span>]</span></span><br></pre></td></tr></table></figure>
<p>类型别名也可以带类型参数</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">type</span> <span class="type">AssocList</span> k v = [<span class="container">(<span class="title">k</span>,<span class="title">v</span>)</span>]  </span></span><br><span class="line"><span class="typedef"><span class="keyword">type</span> <span class="type">IntMap</span> v = <span class="type">Map</span> <span class="type">Int</span> v  </span></span><br><span class="line"><span class="typedef"><span class="keyword">type</span> <span class="type">IntMap</span> = <span class="type">Map</span> <span class="type">Int</span></span></span><br></pre></td></tr></table></figure>
<p>代数数据类型还支持递归</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">data</span> <span class="type">List</span> a = <span class="type">Empty</span> | <span class="type">Cons</span> a <span class="container">(<span class="type">List</span> <span class="title">a</span>)</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>, <span class="type">Ord</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>实例化</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Empty</span>  </span><br><span class="line"><span class="type">Empty</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">5</span> `<span class="type">Cons</span>` <span class="type">Empty</span>  </span><br><span class="line"><span class="type">Cons</span> <span class="number">5</span> <span class="type">Empty</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> `<span class="type">Cons</span>` (<span class="number">5</span> `<span class="type">Cons</span>` <span class="type">Empty</span>)  </span><br><span class="line"><span class="type">Cons</span> <span class="number">4</span> (<span class="type">Cons</span> <span class="number">5</span> <span class="type">Empty</span>)  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">3</span> `<span class="type">Cons</span>` (<span class="number">4</span> `<span class="type">Cons</span>` (<span class="number">5</span> `<span class="type">Cons</span>` <span class="type">Empty</span>))  </span><br><span class="line"><span class="type">Cons</span> <span class="number">3</span> (<span class="type">Cons</span> <span class="number">4</span> (<span class="type">Cons</span> <span class="number">5</span> <span class="type">Empty</span>))</span><br></pre></td></tr></table></figure>
<p>递归最典型的数据结构是树</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">EmptyTree</span> | <span class="type">Node</span> a <span class="container">(<span class="type">Tree</span> <span class="title">a</span>)</span> <span class="container">(<span class="type">Tree</span> <span class="title">a</span>)</span> <span class="keyword">deriving</span> <span class="container">(<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>)</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="title">singleton</span> :: a -&gt; <span class="type">Tree</span> a  </span><br><span class="line"><span class="title">singleton</span> x = <span class="type">Node</span> x <span class="type">EmptyTree</span> <span class="type">EmptyTree</span>  </span><br><span class="line">  </span><br><span class="line"><span class="title">treeInsert</span> :: (<span class="type">Ord</span> a) =&gt; a -&gt; <span class="type">Tree</span> a -&gt; <span class="type">Tree</span> a  </span><br><span class="line"><span class="title">treeInsert</span> x <span class="type">EmptyTree</span> = singleton x  </span><br><span class="line"><span class="title">treeInsert</span> x (<span class="type">Node</span> a left right)   </span><br><span class="line">    | x == a = <span class="type">Node</span> x left right  </span><br><span class="line">    | x &lt; a  = <span class="type">Node</span> a (treeInsert x left) right  </span><br><span class="line">    | x &gt; a  = <span class="type">Node</span> a left (treeInsert x right)</span><br></pre></td></tr></table></figure>
<p>如果想自定义类型类的行为，可以实现相应的实例</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Show</span> <span class="type">TrafficLight</span> <span class="keyword">where</span></span>  </span><br><span class="line">    show <span class="type">Red</span> = <span class="string">"Red light"</span>  </span><br><span class="line">    show <span class="type">Yellow</span> = <span class="string">"Yellow light"</span>  </span><br><span class="line">    show <span class="type">Green</span> = <span class="string">"Green light"</span></span><br></pre></td></tr></table></figure>
<p>实例中也可以有类型约束</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="container">(<span class="type">Eq</span> <span class="title">m</span>)</span> =&gt; <span class="type">Eq</span> <span class="container">(<span class="type">Maybe</span> <span class="title">m</span>)</span> <span class="keyword">where</span></span>  </span><br><span class="line">    <span class="type">Just</span> x == <span class="type">Just</span> y = x == y  </span><br><span class="line">    <span class="type">Nothing</span> == <span class="type">Nothing</span> = <span class="type">True</span>  </span><br><span class="line">    _ == _ = <span class="type">False</span></span><br></pre></td></tr></table></figure>
<p>关于 data ，type 和 new type 的区别</p>
<p>data 用于声明全新的类型</p>
<p>type 用于声明已有的类型的别名</p>
<p>new type 用于声明已有的类型的封装</p>
<h2 id="Input_and_Output">Input and Output</h2><p>Haskell 是纯函数语言，而输入输出是有副作用的，也就不是纯粹的函数。先来看最应该写在文章开头的 <code>Hello World</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = putStrLn <span class="string">"hello, world"</span></span><br></pre></td></tr></table></figure>
<p>直接拼接输入是不可以的，因为类型不一致</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">nameTag</span> = <span class="string">"Hello, my name is "</span> ++ getLine  <span class="comment">-- getLine :: IO String</span></span><br></pre></td></tr></table></figure>
<p>这样也是不行的，相当于给 <code>getLine</code> 取了一个 <code>name</code> 的别名</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">name</span> = getLine</span><br></pre></td></tr></table></figure>
<p>需要使用 do 语法。这是因为使用了 <code>Monad</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    putStrLn <span class="string">"Hello, what's your name?"</span>  </span><br><span class="line">    name &lt;- getLine  </span><br><span class="line">    putStrLn (<span class="string">"Hey "</span> ++ name ++ <span class="string">", you rock!"</span>)</span><br></pre></td></tr></table></figure>
<p>do 语法中变量赋值需要使用 <code>let</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> Data.Char  </span></span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    putStrLn <span class="string">"What's your first name?"</span>  </span><br><span class="line">    firstName &lt;- getLine  </span><br><span class="line">    putStrLn <span class="string">"What's your last name?"</span>  </span><br><span class="line">    lastName &lt;- getLine  </span><br><span class="line">    <span class="keyword">let</span> bigFirstName = map toUpper firstName  </span><br><span class="line">        bigLastName = map toUpper lastName  </span><br><span class="line">    putStrLn $ <span class="string">"hey "</span> ++ bigFirstName ++ <span class="string">" "</span> ++ bigLastName ++ <span class="string">", how are you?"</span></span><br></pre></td></tr></table></figure>
<p>打开文件有相应的函数。但是如果只是读写可以使用 <code>readFile</code> <code>writeFile</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> System.IO     </span></span><br><span class="line"><span class="import"><span class="keyword">import</span> Data.Char  </span></span><br><span class="line">    </span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>     </span><br><span class="line">    contents &lt;- readFile <span class="string">"girlfriend.txt"</span>     </span><br><span class="line">    writeFile <span class="string">"girlfriendcaps.txt"</span> (map toUpper contents)</span><br></pre></td></tr></table></figure>
<h2 id="Functors,_Applicative_Functors_and_Monoids">Functors, Applicative Functors and Monoids</h2><p>具体的定义参见<a href="/Functor-applicative-functor-and-monad-in-Haskell">之前写的文章</a></p>
<p><code>functor</code> 的作用是能让普通函数应用到被 <code>functor</code> 包裹的值</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; fmap (replicate 3) <span class="comment">[1,2,3,4]</span>  </span><br><span class="line"><span class="comment">[<span class="comment">[1,1,1]</span>,<span class="comment">[2,2,2]</span>,<span class="comment">[3,3,3]</span>,<span class="comment">[4,4,4]</span>]</span></span><br></pre></td></tr></table></figure>
<p><code>IO</code> 也是一个 <code>functor</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">IO</span> <span class="keyword">where</span></span>  </span><br><span class="line">    fmap f action = <span class="keyword">do</span>  </span><br><span class="line">        result &lt;- action  </span><br><span class="line">        return (f result)</span><br></pre></td></tr></table></figure>
<p>通常使用 <code>IO</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span> line &lt;- getLine   </span><br><span class="line">          <span class="keyword">let</span> line' = reverse line  </span><br><span class="line">          putStrLn $ <span class="string">"You said "</span> ++ line' ++ <span class="string">" backwards!"</span>  </span><br><span class="line">          putStrLn $ <span class="string">"Yes, you really said"</span> ++ line' ++ <span class="string">" backwards!"</span></span><br></pre></td></tr></table></figure>
<p>也可以使用 <code>fmap</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span> line &lt;- fmap reverse getLine  </span><br><span class="line">          putStrLn $ <span class="string">"You said "</span> ++ line ++ <span class="string">" backwards!"</span>  </span><br><span class="line">          putStrLn $ <span class="string">"Yes, you really said"</span> ++ line ++ <span class="string">" backwards!"</span></span><br></pre></td></tr></table></figure>
<p>列表的 <code>fmap</code> 是 <code>map</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap (replicate <span class="number">3</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure>
<p>还有一个 <code>functor</code> 说出来你可能不信。就是 <code>(-&gt;)</code> 对，就是函数签名里面的 <code>-&gt;</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="container">((-&gt;)</span> r) <span class="keyword">where</span></span>  </span><br><span class="line">    fmap f g = (\x -&gt; f (g x))</span><br></pre></td></tr></table></figure>
<p><code>functor</code> 能使正常的函数应用到 <code>functor</code> 里面的值。<code>applicative functor</code> 能使内部的值相互应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span>  </span><br><span class="line"><span class="type">Just</span> <span class="number">12</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (++<span class="string">"hahah"</span>) &lt;*&gt; <span class="type">Nothing</span>  </span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<p>遇到多个参数可以使用 <code>(&lt;$&gt;)</code> 应用函数提升为 <code>functor</code> 再使用 <code>&lt;*&gt;</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; ((+) $ <span class="number">2</span>) <span class="number">3</span> <span class="comment">-- 普通版</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (<span class="type">Just</span> <span class="number">2</span>) &lt;*&gt; (<span class="type">Just</span> <span class="number">3</span>) <span class="comment">-- applicative functor 版</span></span><br><span class="line"><span class="type">Just</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; (++) &lt;$&gt; [<span class="string">"ha"</span>,<span class="string">"heh"</span>,<span class="string">"hmm"</span>] &lt;*&gt; [<span class="string">"?"</span>,<span class="string">"!"</span>,<span class="string">"."</span>]  </span><br><span class="line">[<span class="string">"ha?"</span>,<span class="string">"ha!"</span>,<span class="string">"ha."</span>,<span class="string">"heh?"</span>,<span class="string">"heh!"</span>,<span class="string">"heh."</span>,<span class="string">"hmm?"</span>,<span class="string">"hmm!"</span>,<span class="string">"hmm."</span>]</span><br></pre></td></tr></table></figure>
<p>如果觉得麻烦，还有专门用于提升的函数。提升两个参数的函数为 <code>Control.Applicative.liftA2</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; liftA2 (+) [<span class="number">3</span>] [<span class="number">4</span>]</span><br><span class="line">[<span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<p><code>IO</code> 使用 <code>&lt;*&gt;</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">myAction</span> :: <span class="type">IO</span> <span class="type">String</span>  </span><br><span class="line"><span class="title">myAction</span> = <span class="keyword">do</span>  </span><br><span class="line">    a &lt;- getLine  </span><br><span class="line">    b &lt;- getLine  </span><br><span class="line">    return $ a ++ b  </span><br><span class="line">    </span><br><span class="line"><span class="title">myAction</span> :: <span class="type">IO</span> <span class="type">String</span>  </span><br><span class="line"><span class="title">myAction</span> = (++) &lt;$&gt; getLine &lt;*&gt; getLine</span><br></pre></td></tr></table></figure>
<p><code>(-&gt;)</code> 的 <code>&lt;*&gt;</code> 比较奇怪，看起来像 <strong> S 组合子 </strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="container">((-&gt;)</span> r) <span class="keyword">where</span></span>  </span><br><span class="line">    pure x = (\_ -&gt; x)  </span><br><span class="line">    f &lt;*&gt; g = \x -&gt; f x (g x)</span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span>  </span><br><span class="line"><span class="number">508</span></span><br></pre></td></tr></table></figure>
<p><code>sequenceA</code> 是一个很有趣的函数，把可遍历的函子转为函子包裹的可遍历结构。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :t sequenceA</span><br><span class="line"><span class="title">sequenceA</span> :: (<span class="type">Traversable</span> t, <span class="type">Applicative</span> f) =&gt; t (f a) -&gt; f (t a)</span><br><span class="line"><span class="comment">-- 或者更具体一点</span></span><br><span class="line"><span class="title">sequenceA</span> :: (<span class="type">Applicative</span> f) =&gt; [f a] -&gt; f [a]  </span><br><span class="line"><span class="title">sequenceA</span> = foldr (liftA2 (:)) (pure [])</span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sequenceA [<span class="type">Just</span> <span class="number">3</span>, <span class="type">Just</span> <span class="number">2</span>, <span class="type">Just</span> <span class="number">1</span>]  </span><br><span class="line"><span class="type">Just</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [(+<span class="number">3</span>),(+<span class="number">2</span>),(+<span class="number">1</span>)] <span class="number">3</span>  </span><br><span class="line">[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h2 id="A_Fistful_of_Monads">A Fistful of Monads</h2><p>终于到了这个该死的单子了。</p>
<p><code>monad</code> 的定义有好几种。比如有用 <code>return</code> 和 <code>&gt;&gt;=</code> （bind）定义的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Monad m where  &#10;    return :: a -&#62; m a &#10;    (&#62;&#62;=) :: m a -&#62; (a -&#62; m b) -&#62; m b</span><br></pre></td></tr></table></figure>
<p>我更偏向于用 <code>return</code> 和 <code>join</code> 定义</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Monad</span> m <span class="keyword">where</span></span>  </span><br><span class="line">    return :: a -&gt; m a </span><br><span class="line">    join :: m (m a) -&gt; m a</span><br></pre></td></tr></table></figure>
<p>Haskell 中有很多类型都是 Monad 。例如列表，元组，<code>Maybe</code> 和 <code>IO</code> 等。</p>
<p>Monad 可以说是一种设计模式，用层次表达或者记录内容。</p>
<p><code>Maybe</code> 表达了值可能不存在的情况</p>
<p><code>[]</code> 表达了有多种可能的情况</p>
<p><code>IO</code> 表达了与外界交互的情况</p>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; return <span class="string">"WHAT"</span> :: <span class="type">Maybe</span> <span class="type">String</span>  </span><br><span class="line"><span class="type">Just</span> <span class="string">"WHAT"</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">9</span> &gt;&gt;= \x -&gt; return (x*<span class="number">10</span>)  </span><br><span class="line"><span class="type">Just</span> <span class="number">90</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &gt;&gt;= \x -&gt; return (x*<span class="number">10</span>)  </span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<p>因为 Monad 的 <code>&gt;&gt;=</code> 太常用了。所以引入了 do 语法（糖）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    putStr <span class="string">"Please enter something dirty:"</span></span><br><span class="line">    line &lt;- getLine</span><br><span class="line">    <span class="keyword">let</span> line' = reverse line</span><br><span class="line">    putStrLn line'</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">putStr</span> <span class="string">"Please enter something dirty:"</span> &gt;&gt; getLine &gt;&gt;= \line -&gt; <span class="keyword">let</span> line' = reverse line <span class="keyword">in</span> putStrLn line'</span><br></pre></td></tr></table></figure>
<p>所以 <code>&lt;-</code> 其实就是 <code>-&gt;</code> 绑定。</p>
<h2 id="For_a_Few_Monads_More">For a Few Monads More</h2><p><code>Writer</code> 用于附着日志的 monad</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> Control.Monad.Writer  </span></span><br><span class="line">  </span><br><span class="line"><span class="title">gcd'</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Writer</span> [<span class="type">String</span>] <span class="type">Int</span>  </span><br><span class="line"><span class="title">gcd'</span> a b  </span><br><span class="line">    | b == <span class="number">0</span> = <span class="keyword">do</span>  </span><br><span class="line">        tell [<span class="string">"Finished with "</span> ++ show a]  </span><br><span class="line">        return a  </span><br><span class="line">    | otherwise = <span class="keyword">do</span>  </span><br><span class="line">        tell [show a ++ <span class="string">" mod "</span> ++ show b ++ <span class="string">" = "</span> ++ show (a `mod` b)]  </span><br><span class="line">        gcd' b (a `mod` b)  </span><br><span class="line">        </span><br><span class="line"><span class="title">ghci</span>&gt; mapM_ putStrLn $ snd $ runWriter (gcd' <span class="number">8</span> <span class="number">3</span>)  </span><br><span class="line"><span class="number">8</span> mod <span class="number">3</span> = <span class="number">2</span>  </span><br><span class="line"><span class="number">3</span> mod <span class="number">2</span> = <span class="number">1</span>  </span><br><span class="line"><span class="number">2</span> mod <span class="number">1</span> = <span class="number">0</span>  </span><br><span class="line"><span class="type">Finished</span> with <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>Reader</code> 用于处理函数的 monad 。也就是说函数也是一种 monad</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="container">((-&gt;)</span> r) <span class="keyword">where</span></span>  </span><br><span class="line">    return x = \_ -&gt; x  </span><br><span class="line">    h &gt;&gt;= f = \w -&gt; f (h w) w</span><br></pre></td></tr></table></figure>
<p><code>&gt;&gt;=</code> 的实现看起来很奇怪。先看例子</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; ((+<span class="number">2</span>) &gt;&gt;= (+)) <span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>从 <code>&gt;&gt;=</code> 的签名 <code>(&gt;&gt;=) :: Monad m =&gt; m a -&gt; (a -&gt; m b) -&gt; m b</code> 看出 </p>
<p><code>h &gt;&gt;= f</code> 也就是 <code>h</code>  是 <code>m a</code> 即 <code>(-&gt; a)</code> ，是一个 monad 值，而这种 monad 是函数。</p>
<p><code>f</code> 也就是 <code>(a -&gt; mb)</code> ，说明 <code>f</code> 是一个能够返回 monad 值的函数，这个返回的 monad 是一个函数。</p>
<p>在 <code>(+2) &gt;&gt;= (+)</code> 中，<code>h</code> 是 <code>(+2)</code> ，<code>f</code> 是 <code>(+)</code> </p>
<p>由 <code>h &gt;&gt;= f = \w -&gt; f (h w) w</code> 有</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(+<span class="number">2</span>) &gt;&gt;= (+)</span><br><span class="line">\w -&gt; f (h w) w</span><br><span class="line">\w -&gt; f ((+<span class="number">2</span>) w) w</span><br><span class="line">\w -&gt; f (w+<span class="number">2</span>) w</span><br><span class="line">\w -&gt; (+) (w+<span class="number">2</span>) w</span><br><span class="line">\w -&gt; ((w+<span class="number">2</span>) + ) w</span><br></pre></td></tr></table></figure>
<p>最后的结果是一个 monad ，这种 monad 是函数 <code>\w -&gt; ((w+2) + ) w</code> </p>
<p>有些常用的辅助函数</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">1</span>) $ <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">1</span>) &lt;$&gt; [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; fmap (+<span class="number">1</span>) [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; liftM (+<span class="number">1</span>) [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; (+) <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; liftM2 (+) [<span class="number">1</span>] [<span class="number">1.</span>.<span class="number">10</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]</span><br></pre></td></tr></table></figure>
<h2 id="最后">最后</h2><p>有些章节没好好看就跳过了所以没有笔记。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://learnyouahaskell.com/chapters">《Haskell 趣学指南》</a>是一本非常简洁明了的入门书。</p>]]>
    
    </summary>
    
      <category term="Haskell" scheme="http://en.ors-sro.com/tags/Haskell/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阴阳谜题]]></title>
    <link href="http://en.ors-sro.com/Yin-yang-puzzle/"/>
    <id>http://en.ors-sro.com/Yin-yang-puzzle/</id>
    <published>2017-01-15T07:29:09.000Z</published>
    <updated>2017-01-15T11:32:20.434Z</updated>
    <content type="html"><![CDATA[<p>我又从你的<ruby>未来<rt>世界</rt></ruby>回来。</p>
<a id="more"></a>
<h2 id="开门见山">开门见山</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span></span><br></pre></td></tr></table></figure>
<p>这段代码的输出是什么呢？如果你的回答是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@*@**@***@****@...</span><br></pre></td></tr></table></figure>
<p>那么你真的很厉害啊。下面的废话就不用看了。到此为止。</p>
<p>如果你的回答不是那样，那么也没关系，毕竟这只是一段代码，不理解也不影响明天太阳升起。</p>
<p>如果你执意要理解，那么请先学习 Scheme 的基本语法之后再来挑战。Bye~</p>
<h2 id="立入禁止">立入禁止</h2><p>好吧。如果你在没有相关基础的情况下还要尝试的话很可能看不懂，毕竟我只是抱着玩的心态随便讲讲啊。看不懂才是自然的，看得懂就逆天了。</p>
<p>坑爹提示：以下内容配合 <a href="/Continuation-passing-style">CPS</a> 和 <a href="/Call-with-current-continuation">Call/cc</a> 食用更佳哦。</p>
<h2 id="无限轮回">无限轮回</h2><p>先讲一下 Scheme 的 <code>let*</code> 变量绑定。这个比较简单，看一个例子就明白了。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="number">1</span>)</span>           <span class="comment">; a = 1</span></span><br><span class="line">       <span class="list">(<span class="keyword">b</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span>)</span>    <span class="comment">; b = a + 1 = 2</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span>)</span>         <span class="comment">; a + b = 1 + 2 = 3</span></span><br><span class="line"><span class="comment">; =&gt; 3</span></span><br></pre></td></tr></table></figure>
<p>阴阳谜题的代码结构类似，忽略细节是这样的</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span>            <span class="comment">; yin = xxx</span></span><br><span class="line">         <span class="comment">; ...         ; 你会回来看的</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span>           <span class="comment">; yang = yyy</span></span><br><span class="line">         <span class="comment">; ...         ; 你还会回来看的</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span></span></span></span></span><br></pre></td></tr></table></figure>
<p>接着看 <code>yin</code> 和 <code>yang</code> 赋了什么值。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span></span><br></pre></td></tr></table></figure>
<p>你可能会觉得这一长串是什么鬼。别急慢慢来。首先单独拎出来</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span> <span class="comment">; yin 的赋值</span></span><br></pre></td></tr></table></figure>
<p>这个 <code>lambda</code> 是 Scheme 定义匿名函数的方式。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;(lambda (参数列表) </span></span><br><span class="line"><span class="comment">;        (函数体))</span></span><br><span class="line"><span class="comment">; 定义匿名函数 function (x) &#123;return x+1;&#125; </span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span> <span class="comment">; Scheme 返回值为最后一个表达式的计算结果。</span></span><br><span class="line"><span class="comment">;; 给匿名函数传递参数</span></span><br><span class="line"><span class="comment">;((lambda (参数列表) </span></span><br><span class="line"><span class="comment">;         (函数体)) 参数)</span></span><br><span class="line"><span class="comment">; 给匿名函数 function(x) &#123;return x+1;&#125; 传递参数 1</span></span><br><span class="line"><span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">1</span>)</span>)</span>      <span class="number">1</span>)</span></span><br></pre></td></tr></table></figure>
<p>回到之前的代码，重新排版一下</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> </span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> </span><br><span class="line">         cc)</span>                <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>所以这个函数做了两件事。一是显示 <code>@</code> ，而是原封不动地返回接收的参数 <code>cc</code> 。</p>
<p>这个匿名函数还接收了参数，参数是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span></span><br></pre></td></tr></table></figure>
<p>这个 <code>call-with-current-continuation</code> 是 Scheme 的一个特殊函数，返回一个 continuation 。简称为 Call/cc</p>
<p>详情请移步 <a href="/Call-with-current-continuation">Call/cc</a> 。</p>
<p>Call/cc 给匿名函数传了一个 continuation 。</p>
<p>这个匿名函数的作用是原封不动的返回接收到的参数。 </p>
<p>所以这句话返回一个 continuation 。</p>
<p>如果你还没有看上述链接，可以简单地认为这里做了个标记。使用这个标记，相当于 <code>goto</code> 回到这句话执行结束的位置。</p>
<p>只有调用 Call/cc 才会产生新的 continuation 。调用 continuation 导致 Call/cc 返回，不产生新的 continuation。</p>
<p>为了描述方便，在 Call/cc 处分别做标记。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> </span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> <span class="comment">; 输出 @</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span> <span class="comment">;; cc0 因为调用了 Call/cc</span></span><br><span class="line">       <span class="comment">; 输出为 @</span></span><br><span class="line">       <span class="comment">; yin = cc0</span></span><br><span class="line">       <span class="comment">; yang = ???</span></span><br><span class="line">       <span class="comment">; 继续往下执行</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> </span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> <span class="comment">; 输出 *</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span> <span class="comment">;; cc1 因为调用了 Call/cc</span></span><br><span class="line">      <span class="comment">; 输出为 @*</span></span><br><span class="line">      <span class="comment">; yin = cc0      &lt;- 上面赋值为 cc0</span></span><br><span class="line">      <span class="comment">; yang = cc1</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span> <span class="comment">; (cc0 cc1)</span></span><br></pre></td></tr></table></figure>
<p>这是一开始的赋值情况。最后执行 <code>(yin yang)</code> 代入值为 <code>(cc0 cc1)</code> 。</p>
<p>这是什么意思呢。</p>
<p>上面说过了，调用标记相当于 <code>goto</code> 回到标记处，这个 <code>goto</code> 比较特殊可以把接收的参数带回去。</p>
<p>所以回到 cc0 处也就是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="comment">; 接收的参数是 Call/cc 返回的 cc1</span></span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> </span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span> <span class="comment">;; 这里是 cc0 。Call/cc 返回 cc1</span></span><br><span class="line">       <span class="comment">;...</span></span><br><span class="line">    )</span></span></span><br></pre></td></tr></table></figure>
<p>然后 Call/cc 接收到 cc1 ，返回 cc1 ，传给匿名函数。</p>
<p>这里需要注意的是给匿名函数传递参数首先要计算参数的值，也就是先计算 Call/cc ，得到返回值后再计算匿名函数。</p>
<p>所以相当于 <code>goto</code> 回到了赋值开始的地方</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="comment">; 接收的参数是 Call/cc 返回的 cc1</span></span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> <span class="comment">; 输出 @</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span> <span class="comment">;; 这里是 cc0 。Call/cc 返回 cc1</span></span><br><span class="line">       <span class="comment">; 输出为 @*@    &lt;- 之前已经输出了 @* </span></span><br><span class="line">       <span class="comment">; yin = cc1    &lt;- 这里赋值为匿名函数的返回值 cc1</span></span><br><span class="line">       <span class="comment">; yang = ???</span></span><br><span class="line">       <span class="comment">; 继续往下执行</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> </span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> <span class="comment">; 输出 *</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span> <span class="comment">;; cc2 因为调用了 Call/cc</span></span><br><span class="line">      <span class="comment">; 输出为 @*@*</span></span><br><span class="line">      <span class="comment">; yin = cc1      &lt;- 上面赋值为 cc1</span></span><br><span class="line">      <span class="comment">; yang = cc2</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span> <span class="comment">; (cc1 cc2)</span></span><br></pre></td></tr></table></figure>
<p>同样地，调用 <code>(cc1 cc2)</code> 会将 cc2 带到 cc1 处。cc1 处在哪呢？在上面给 <code>yang</code> 赋值的位置。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">		<span class="comment">;...</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="comment">; 接收的参数是 Call/cc 返回的 cc2</span></span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> <span class="comment">; 输出 *</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span> <span class="comment">;; 这里是 cc1 。Call/cc 返回 cc2</span></span><br><span class="line">      <span class="comment">; 输出为 @*@**    &lt;- 上面已经输出 @*@*</span></span><br><span class="line">      <span class="comment">; yin = cc0      &lt;- cc1 处的 yin 为 cc0</span></span><br><span class="line">      <span class="comment">; yang = cc2     &lt;- 命运改写了，这次 yang 被赋值为 cc2</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span> <span class="comment">; (cc0 cc2)</span></span></span><br></pre></td></tr></table></figure>
<p>同样地，调用 <code>(cc0 cc2)</code> 会将 cc2 带到 cc0 处。cc0 处在哪呢？在上面给 <code>yin</code> 赋值的位置。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="comment">; 接收的参数是 Call/cc 返回的 cc2</span></span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> <span class="comment">; 输出 @</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span> <span class="comment">;; 这里是 cc0 。Call/cc 返回 cc2</span></span><br><span class="line">       <span class="comment">; 输出为 @*@**@ &lt;- 上面已经输出 @*@**</span></span><br><span class="line">       <span class="comment">; yin = cc2    &lt;- 命运改写了，这次 yin 被赋值为 cc2</span></span><br><span class="line">       <span class="comment">; yang = ???</span></span><br><span class="line">       <span class="comment">; 继续往下执行</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> </span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> <span class="comment">; 输出 *</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span> <span class="comment">;; cc3 因为调用了 Call/cc</span></span><br><span class="line">      <span class="comment">; 输出为 @*@**@*</span></span><br><span class="line">      <span class="comment">; yin = cc2      &lt;- 上面赋值为 cc2</span></span><br><span class="line">      <span class="comment">; yang = cc3</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span> <span class="comment">; (cc2 cc3)</span></span><br></pre></td></tr></table></figure>
<p>同样地，调用 <code>(cc2 cc3)</code> 会将 cc3 带到 cc2 处。cc2 处在哪呢？在上面给 <code>yang</code> 赋值的位置。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">		<span class="comment">; ...</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="comment">; 接收的参数是 Call/cc 返回的 cc3</span></span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> <span class="comment">; 输出 *</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span> <span class="comment">;; 这里是 cc2 。Call/cc 返回 cc3</span></span><br><span class="line">      <span class="comment">; 输出为 @*@**@** &lt;- 上面已经输出 @*@**@*</span></span><br><span class="line">      <span class="comment">; yin = cc1      &lt;- cc2 处的 yin 为 cc1</span></span><br><span class="line">      <span class="comment">; yang = cc3     &lt;- 命运改写了，这次 yang 被赋值为 cc3</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span> <span class="comment">; (cc1 cc3)</span></span></span><br></pre></td></tr></table></figure>
<p>同样地，调用 <code>(cc1 cc3)</code> 会将 cc3 带到 cc1 处。cc1 处在哪呢？在上面给 <code>yang</code> 赋值的位置。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">		<span class="comment">;...</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="comment">; 接收的参数是 Call/cc 返回的 cc3</span></span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> <span class="comment">; 输出 *</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span> <span class="comment">;; 这里是 cc1 。Call/cc 返回 cc3</span></span><br><span class="line">      <span class="comment">; 输出为 @*@**@*** &lt;- 上面已经输出 @*@**@**</span></span><br><span class="line">      <span class="comment">; yin = cc0      &lt;- cc1 处的 yin 为 cc0</span></span><br><span class="line">      <span class="comment">; yang = cc3     &lt;- 命运改写了，这次 yang 被赋值为 cc3</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span> <span class="comment">; (cc0 cc3)</span></span></span><br></pre></td></tr></table></figure>
<p>同样地，调用 <code>(cc0 cc3)</code> 会将 cc3 带到 cc0 处。cc0 处在哪呢？在上面给 <code>yin</code> 赋值的位置。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">let*</span></span> <span class="list">(<span class="list">(<span class="keyword">yin</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> <span class="comment">; 接收的参数是 Call/cc 返回的 cc3</span></span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\@</span>)</span> <span class="comment">; 输出 @</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span> <span class="comment">;; 这里是 cc0 。Call/cc 返回 cc3</span></span><br><span class="line">       <span class="comment">; 输出为 @*@**@***@ &lt;- 上面已经输出 @*@**@***</span></span><br><span class="line">       <span class="comment">; yin = cc3    &lt;- 命运改写了，这次 yin 被赋值为 cc3</span></span><br><span class="line">       <span class="comment">; yang = ???</span></span><br><span class="line">       <span class="comment">; 继续往下执行</span></span><br><span class="line">       <span class="list">(<span class="keyword">yang</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">cc</span>)</span> </span><br><span class="line">                  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="literal">#\*</span>)</span> <span class="comment">; 输出 *</span></span><br><span class="line">                  cc)</span> <span class="list">(<span class="keyword"><span class="built_in">call-with-current-continuation</span></span> <span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> <span class="list">(<span class="keyword">c</span>)</span> c)</span>)</span>)</span>)</span>)</span> <span class="comment">;; cc4 因为调用了 Call/cc</span></span><br><span class="line">      <span class="comment">; 输出为 @*@**@***@*</span></span><br><span class="line">      <span class="comment">; yin = cc3      &lt;- 上面赋值为 cc3</span></span><br><span class="line">      <span class="comment">; yang = cc4</span></span><br><span class="line">    <span class="list">(<span class="keyword">yin</span> yang)</span>)</span> <span class="comment">; (cc3 cc4)</span></span><br></pre></td></tr></table></figure>
<p>同样地，调用 <code>(cc3 cc4)</code> ……</p>
<p>会一直按上述规律一直无限循环下去。</p>
<h2 id="最后">最后</h2><p>没想到有一天会写阴阳谜题，因为相关的前置基础太多了，写完得多累。但是写了 CPS 就自然写 Call/cc ，写了 Call/cc 写阴阳谜题就是水到渠成的了。再重申一次，我只是抱着玩的心态随便讲讲啊。看不懂才是自然的，看得懂就逆天了（逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我又从你的<ruby>未来<rt>世界</rt></ruby>回来。</p>]]>
    
    </summary>
    
      <category term="动动脑" scheme="http://en.ors-sro.com/tags/%E5%8A%A8%E5%8A%A8%E8%84%91/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Call with current continuation]]></title>
    <link href="http://en.ors-sro.com/Call-with-current-continuation/"/>
    <id>http://en.ors-sro.com/Call-with-current-continuation/</id>
    <published>2017-01-08T06:30:09.000Z</published>
    <updated>2017-01-15T07:27:54.636Z</updated>
    <content type="html"><![CDATA[<p>我接过你<ruby>保存<rt>拯救</rt></ruby>的世界。<br><a id="more"></a></p>
<h2 id="穷人的_Goto">穷人的 Goto</h2><p>先来看一段 <a href="https://en.wikipedia.org/wiki/Call-with-current-continuation#Examples" target="_blank" rel="external">Scheme 代码</a></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">f</span> c)</span></span><br><span class="line">  <span class="list">(<span class="keyword">c</span> <span class="number">2</span>)</span></span><br><span class="line">  <span class="number">3</span>)</span></span><br></pre></td></tr></table></figure>
<p>这是一个接受函数作为参数的函数，结果返回 3 。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">lambda</span> x x)</span>)</span></span><br><span class="line"><span class="comment">; =&gt; 3</span></span><br></pre></td></tr></table></figure>
<p>似乎无论接受什么函数，结果都只能返回 3 。真的是这样吗？</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">call/cc</span> f)</span> <span class="comment">;; 接下来就是见证奇迹的时刻</span></span><br><span class="line"><span class="comment">; =&gt; 2</span></span><br></pre></td></tr></table></figure>
<p>如果还是不相信，请移步 <a href="http://www.biwascheme.org/" target="_blank" rel="external">biwascheme</a> 亲自测试 。</p>
<p>So, what happens?</p>
<p>魔法发生在 <code>call/cc</code> 上面。</p>
<blockquote>
<p>The function <strong>call-with-current-continuation</strong>, abbreviated <strong>call/cc</strong>, is a control operator.</p>
<p>Taking a function <em>f</em> as its only argument, call/cc takes the current continuation (i.e., a “snapshot” of the current control context or control state of the program) as an object and applies <em>f</em> to it.</p>
<p>—— 《维基百科》</p>
</blockquote>
<p>call/cc 能够将当前后继（<a href="/Continuation-passing-style">Continuation</a>）打包，传给参数。当调用该后继时，call/cc 返回后继接收到的参数。</p>
<p>这么说可能有点抽象，回到开头的例子。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">call/cc</span> f)</span></span><br><span class="line"><span class="comment">;; call/cc 打包当前后继</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> current-continuation)</span></span><br><span class="line"><span class="comment">;; 按 Applicative-order 展开</span></span><br><span class="line"><span class="list">(<span class="list">(<span class="keyword">current-continuation</span> <span class="number">3</span>)</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 当调用后继时，call/cc 返回后继接收到的参数。</span></span><br><span class="line"><span class="comment">;; 程序返回到 (call/cc f)</span></span><br><span class="line"><span class="comment">;; current-continuation 接收到的参数是 3</span></span><br><span class="line"><span class="comment">;; (call/cc f) 返回 3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>所以这是一种 <code>goto</code> 吗？</p>
<p>是的，一种超级 <code>goto</code> ，或者说穷人的 <code>goto</code> 。</p>
<p>区别是 call/cc 是一个函数，并不是特定的语法保留字。而且 call/cc 是更通用的控制结构，可以用于实现 generator / enumrator 等控制结构。</p>
<h2 id="迭代器">迭代器</h2><p>用 call/cc 定义的迭代器效果如下。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> generate-digit</span><br><span class="line">  <span class="list">(<span class="keyword">generate-one-element-at-a-time</span> <span class="quoted">'(<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 0</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; you-fell-off-the-end</span></span><br></pre></td></tr></table></figure>
<p>定义为</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">generate-one-element-at-a-time</span> lst)</span></span><br><span class="line">  <span class="comment">;; Hand the next item from a-list to "return" or an end-of-list marker</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">control-state</span> return)</span></span><br><span class="line">    <span class="list">(<span class="keyword">for-each</span> </span><br><span class="line">     <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">element</span>)</span></span><br><span class="line">               <span class="list">(<span class="keyword">set!</span> return <span class="list">(<span class="keyword">call-with-current-continuation</span></span><br><span class="line">                              <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">resume-here</span>)</span></span><br><span class="line">                                <span class="comment">;; Grab the current continuation</span></span><br><span class="line">                               <span class="list">(<span class="keyword">set!</span> control-state resume-here)</span></span><br><span class="line">                               <span class="list">(<span class="keyword">return</span> element)</span>)</span>)</span>)</span>)</span></span><br><span class="line">     lst)</span></span><br><span class="line">    <span class="list">(<span class="keyword">return</span> <span class="quoted">'you-fell-off-the-end</span>)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">generator</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">call-with-current-continuation</span> control-state)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; Return the generator </span></span><br><span class="line">  generator)</span></span><br></pre></td></tr></table></figure>
<p>理解这个例子需要的前置知识有迭代器，Scheme 的语法，Scheme 的 lambda ，Scheme 的 foreach 迭代。在没有理解上述知识时这个例子是非常晦涩难懂的。要讲清楚这些知识需要大量例子，请自行恶补。理解之后就只差临门一脚了。</p>
<p>这个例子需要循序渐进的看</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">generate-one-element-at-a-time</span> lst)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; ...</span></span><br><span class="line">  <span class="comment">;; ...</span></span><br><span class="line">  <span class="comment">;; ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">;; Return the generator </span></span><br><span class="line">  generator)</span></span><br></pre></td></tr></table></figure>
<p><code>generate-one-element-at-a-time</code> 接受一个列表，然后返回 <code>generator</code> 的调用结果。</p>
<p><code>generator</code> 的定义是</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">generate-one-element-at-a-time</span> lst)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; ...</span></span><br><span class="line">  <span class="comment">;; ...</span></span><br><span class="line">  <span class="comment">;; ...</span></span><br><span class="line">  </span><br><span class="line">    <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">generator</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">call-with-current-continuation</span> control-state)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; Return the generator </span></span><br><span class="line">  generator)</span></span><br></pre></td></tr></table></figure>
<p><code>generator</code> 是定义在 <code>generate-one-element-at-a-time</code> 的内部函数。Scheme 允许在函数中定义函数。</p>
<p><code>generator</code> 的定义是 <code>call/cc</code> 一个 <code>control-state</code> 函数。</p>
<p>再看 <code>control-state</code> 函数</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">control-state</span> return)</span></span><br><span class="line">      <span class="list">(<span class="keyword">for-each</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(...)</span>)</span></span><br><span class="line">                lst)</span></span><br><span class="line">      <span class="list">(<span class="keyword">return</span> <span class="quoted">'you-fell-off-the-end</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p><code>control-state</code> 的定义为对 <code>lst</code> 进行 <code>foreach</code> 操作，也就是对 <code>lst</code> 中每个元素应用 <code>lambda(...)</code> 函数。迭代完成后执行 <code>(return &#39;you-fell-off-the-end)</code></p>
<p>这个 lambda 匿名函数是</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">control-state</span> return)</span></span><br><span class="line">      <span class="list">(<span class="keyword">for-each</span> </span><br><span class="line">       <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">element</span>)</span></span><br><span class="line">                 <span class="list">(<span class="keyword">set!</span> return <span class="list">(<span class="keyword">call-with-current-continuation</span> ...)</span>)</span></span><br><span class="line">       lst)</span></span><br><span class="line">      <span class="list">(<span class="keyword">return</span> <span class="quoted">'you-fell-off-the-end</span>)</span>)</span></span></span><br></pre></td></tr></table></figure>
<p><code>(set! return (call-with-current-continuation ...))</code> 顾名思义，修改 <code>return</code> 的值为 <code>(call-with-current-continuation ...)</code> 的返回值。</p>
<p>把这个 <code>...</code> 展开</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">control-state</span> return)</span></span><br><span class="line">  <span class="list">(<span class="keyword">for-each</span> </span><br><span class="line">   <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">element</span>)</span></span><br><span class="line">             <span class="list">(<span class="keyword">set!</span> return <span class="list">(<span class="keyword">call-with-current-continuation</span></span><br><span class="line">                            <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">resume-here</span>)</span></span><br><span class="line">                             <span class="list">(<span class="keyword">set!</span> control-state resume-here)</span></span><br><span class="line">                             <span class="list">(<span class="keyword">return</span> element)</span>)</span>)</span>)</span>)</span></span><br><span class="line">   lst)</span></span><br><span class="line">  <span class="list">(<span class="keyword">return</span> <span class="quoted">'you-fell-off-the-end</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p><code>call/cc</code> 中的匿名函数做了两件事。一件是 <code>(set! control-state resume-here)</code> 修改 <code>control-state</code> 的值，另一件是返回 <code>(return element)</code> 的调用结果。</p>
<p>这样整个迭代器就定义完了。接着看调用过程。整个调用过程是这样的</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 0</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; you-fell-off-the-end</span></span><br></pre></td></tr></table></figure>
<p>一步步来看</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 完整定义</span></span><br><span class="line"><span class="comment">;; (define (generate-one-element-at-a-time lst)</span></span><br><span class="line"><span class="comment">;;     (define (control-state return)</span></span><br><span class="line"><span class="comment">;;       (for-each </span></span><br><span class="line"><span class="comment">;;        (lambda (element)</span></span><br><span class="line"><span class="comment">;;                  (set! return (call-with-current-continuation ;;cc2</span></span><br><span class="line"><span class="comment">;;                                 (lambda (resume-here)</span></span><br><span class="line"><span class="comment">;;                                   ;; Grab the current continuation</span></span><br><span class="line"><span class="comment">;;                                  (set! control-state resume-here)</span></span><br><span class="line"><span class="comment">;;                                  (return element)))))</span></span><br><span class="line"><span class="comment">;;        lst)</span></span><br><span class="line"><span class="comment">;;       (return 'you-fell-off-the-end))</span></span><br><span class="line"><span class="comment">;;   </span></span><br><span class="line"><span class="comment">;;     (define (generator)</span></span><br><span class="line"><span class="comment">;;       (call-with-current-continuation control-state)) ;; cc1;; </span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="comment">;;   ;; Return the generator </span></span><br><span class="line"><span class="comment">;;   generator)</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 0</span></span><br><span class="line"><span class="comment">;; 按定义展开</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-one-element-at-a-time</span> <span class="quoted">'(<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 按定义展开</span></span><br><span class="line"><span class="list">(<span class="keyword">generator</span>)</span></span><br><span class="line"><span class="comment">;; 按定义展开</span></span><br><span class="line"><span class="list">(<span class="keyword">call-with-current-continuation</span> control-state)</span> <span class="comment">;; cc1</span></span><br><span class="line"><span class="comment">;; 将 cc1 处的后继打包，传给 control-state</span></span><br><span class="line"><span class="list">(<span class="keyword">control-state</span> cc1)</span></span><br><span class="line"><span class="comment">;; 按定义展开</span></span><br><span class="line"><span class="list">(<span class="keyword">for-each</span> </span><br><span class="line">       <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">element</span>)</span></span><br><span class="line">                 <span class="list">(<span class="keyword">set!</span> cc1 <span class="list">(<span class="keyword">call-with-current-continuation</span> <span class="comment">;;cc2</span></span><br><span class="line">                                <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">resume-here</span>)</span></span><br><span class="line">                                  <span class="comment">;; Grab the current continuation</span></span><br><span class="line">                                 <span class="list">(<span class="keyword">set!</span> control-state resume-here)</span></span><br><span class="line">                                 <span class="list">(<span class="keyword">cc1</span> element)</span>)</span>)</span>)</span>)</span></span><br><span class="line">       <span class="quoted">'(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">cc1</span> <span class="quoted">'you-fell-off-the-end</span>)</span></span><br><span class="line"><span class="comment">;; foreach 第一个元素是 (0,1,2) 中的 0 , 传给 foreach 中的匿名函数</span></span><br><span class="line"><span class="list">(<span class="keyword">set!</span> cc1 <span class="list">(<span class="keyword">call-with-current-continuation</span> <span class="comment">;;cc2</span></span><br><span class="line">           <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">resume-here</span>)</span></span><br><span class="line">                   <span class="comment">;; Grab the current continuation</span></span><br><span class="line">                   <span class="list">(<span class="keyword">set!</span> control-state resume-here)</span></span><br><span class="line">                   <span class="list">(<span class="keyword">cc1</span> <span class="number">0</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 给 cc1 赋值，需要求出后面函数调用的值</span></span><br><span class="line"><span class="list">(<span class="keyword">call-with-current-continuation</span> <span class="comment">;;cc2</span></span><br><span class="line">           <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">resume-here</span>)</span></span><br><span class="line">                   <span class="comment">;; Grab the current continuation</span></span><br><span class="line">                   <span class="list">(<span class="keyword">set!</span> control-state resume-here)</span></span><br><span class="line">                   <span class="list">(<span class="keyword">cc1</span> <span class="number">0</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; call/cc 调用后面的 lambda 函数， 传递 cc2 处的后继</span></span><br><span class="line"><span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">cc2</span>)</span></span><br><span class="line">        <span class="comment">;; Grab the current continuation</span></span><br><span class="line">        <span class="list">(<span class="keyword">set!</span> control-state cc2)</span> <span class="comment">;; 这里修改了 control-state 的定义。</span></span><br><span class="line">        <span class="list">(<span class="keyword">cc1</span> <span class="number">0</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 注意到上面在 control-state 函数定义中修改了 control-state 的定义。</span></span><br><span class="line"><span class="list">(<span class="keyword">cc1</span> <span class="number">0</span>)</span></span><br><span class="line"><span class="comment">;; 上面说到调用后继会使得 call/cc 返回。</span></span><br><span class="line"><span class="comment">;; 也就是 cc1 处的 call/cc 返回 0</span></span><br><span class="line"><span class="comment">;; 于是回到 (call-with-current-continuation control-state)</span></span><br><span class="line"><span class="comment">;; 这个 call/cc 返回接收到的参数 0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 1</span></span><br><span class="line"><span class="comment">;; 按定义展开</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-one-element-at-a-time</span> <span class="quoted">'(<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 按定义展开</span></span><br><span class="line"><span class="list">(<span class="keyword">generator</span>)</span></span><br><span class="line"><span class="comment">;; 按定义展开</span></span><br><span class="line"><span class="list">(<span class="keyword">call-with-current-continuation</span> control-state)</span> <span class="comment">;; cc1</span></span><br><span class="line"><span class="comment">;; 注意这里的 control-state 已经被改过了。内容为 cc2 处的后继</span></span><br><span class="line"><span class="list">(<span class="keyword">cc2</span> cc1)</span></span><br><span class="line"><span class="comment">;; 回到 cc2 处 (set! cc1 (call-with-current-continuation (lambda (resume-here) ... </span></span><br><span class="line"><span class="comment">;; cc2 处的 call/cc 返回接收到的参数 cc1</span></span><br><span class="line"><span class="list">(<span class="keyword">for-each</span> <span class="list">(<span class="keyword">set</span> cc1 cc1)</span> ....)</span></span><br><span class="line"><span class="comment">;; 把上一个 cc1 改成新的 cc1</span></span><br><span class="line"><span class="comment">;; for-each 一轮迭代完成，进入下一轮迭代</span></span><br><span class="line"><span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="number">1</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">set!</span> cc1 <span class="list">(<span class="keyword">call-with-current-continuation</span> <span class="comment">;;cc2</span></span><br><span class="line">                   <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">resume-here</span>)</span></span><br><span class="line">                           <span class="comment">;; Grab the current continuation</span></span><br><span class="line">                           <span class="list">(<span class="keyword">set!</span> control-state resume-here)</span></span><br><span class="line">                           <span class="list">(<span class="keyword">cc1</span> <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; (0,1,2) 0 的下一个元素是 1 。 所以 lambda 接受到的元素是 1</span></span><br><span class="line"><span class="comment">;; 执行过程与上面类似。</span></span><br><span class="line"><span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">resume-here</span>)</span></span><br><span class="line">        <span class="comment">;; Grab the current continuation</span></span><br><span class="line">        <span class="list">(<span class="keyword">set!</span> control-state resume-here)</span></span><br><span class="line">        <span class="list">(<span class="keyword">cc1</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 执行到 (cc1 1) 。回到 cc1 处的 call/cc</span></span><br><span class="line"><span class="comment">;; 于是回到 (call-with-current-continuation control-state)</span></span><br><span class="line"><span class="comment">;; 这个 call/cc 返回接收到的参数 1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; 2</span></span><br><span class="line"><span class="comment">;; 过程类似</span></span><br><span class="line"><span class="list">(<span class="keyword">generate-digit</span>)</span> <span class="comment">;; you-fell-off-the-end</span></span><br><span class="line"><span class="comment">;; 回到 for-each</span></span><br><span class="line"><span class="comment">;; for-each 执行完成后执行下一步</span></span><br><span class="line"><span class="comment">;; (cc1 'you-fell-off-the-end)</span></span><br><span class="line">you-fell-off-the-end</span><br></pre></td></tr></table></figure>
<p>过程还是蛮简单的嘛。可以理解为两个 <code>goto</code> 跳来跳去。</p>
<h2 id="最后">最后</h2><p>讲了 CPS ，讲了 call/cc ，下一篇文章的内容已经浮出水面。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我接过你<ruby>保存<rt>拯救</rt></ruby>的世界。<br>]]>
    
    </summary>
    
      <category term="call/cc" scheme="http://en.ors-sro.com/tags/call-cc/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Continuation-passing style]]></title>
    <link href="http://en.ors-sro.com/Continuation-passing-style/"/>
    <id>http://en.ors-sro.com/Continuation-passing-style/</id>
    <published>2017-01-01T09:19:32.000Z</published>
    <updated>2017-01-01T13:30:12.327Z</updated>
    <content type="html"><![CDATA[<p>我把未来抛给了你。</p>
<a id="more"></a>
<h2 id="有话好好说别乱来啊">有话好好说别乱来啊</h2><p>两个数相加，翻倍，输出结果。可以这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OutputDoubleSum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = a + b;</span><br><span class="line">  result = result * <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Double</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Output</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OutputDoubleSum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  Output(Double(Sum(a,b)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还能这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sum</span>(<span class="params">a,b,k</span>)</span>&#123;</span><br><span class="line">  k(a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Double</span>(<span class="params">x,k</span>)</span>&#123;</span><br><span class="line">  k(x*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Output</span>(<span class="params">x,k</span>)</span>&#123;</span><br><span class="line">  k(<span class="built_in">console</span>.log(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OutputDoubleSum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  Sum(a,b,<span class="function"><span class="keyword">function</span> (<span class="params">sumxy</span>)</span>&#123;</span><br><span class="line">    Double(sumxy,<span class="function"><span class="keyword">function</span> (<span class="params">doublex</span>)</span>&#123;</span><br><span class="line">      Output(doublex,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一种是顺序风格，第二种是函数组合风格，第三种是后继传递风格。</p>
<p><strong>后继传递风格</strong>（<a href="https://en.wikipedia.org/wiki/Continuation-passing_style" target="_blank" rel="external">Continuation-passing style</a>）是一种控制流通过参数传递的风格。</p>
<p>简单的说就是把后继，也就是下一步要运行的代码，封装成函数，通过参数传递的方式传给当前运行的函数。</p>
<p>在例子中 <code>Output(x,k)</code> 的第二个参数接受一个后继，在 <code>Output</code> 执行完成后调用后继。 <code>Output</code> 的后继为</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>是一个空函数，表示后面什么事情都不做。</p>
<p><code>Double</code> 的后继是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">doublex</span>)</span>&#123;</span><br><span class="line">  Output(doublex,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>表示收到 <code>Double</code> 的计算结果后，执行 <code>Output</code> </p>
<p><code>Sum</code> 的后继是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">sumxy</span>)</span>&#123;</span><br><span class="line">  Double(sumxy,<span class="function"><span class="keyword">function</span> (<span class="params">doublex</span>)</span>&#123;</span><br><span class="line">    Output(doublex,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>表示收到 <code>Sum</code> 的计算结果后，执行 <code>Double</code> </p>
<p>这样通过参数传递的方式将顺序风格改为了后继传递风格。</p>
<h2 id="所以有什么用呢">所以有什么用呢</h2><p><del>没什么用</del>。当然是有用的啦，不然干嘛这么费力不讨好。</p>
<p>一个最常见的用法是用在异步代码中，也就是<a href="/Promise">异步代码的回调</a>。</p>
<p>搭配 <code>Call/cc</code> 能够实现控制流中的 <code>try/catch</code> 和 <code>yield</code> 等控制方式。</p>
<h2 id="最后">最后</h2><p>「CPS 就是把用于经典逻辑和直觉逻辑间命题转换的 Gödel–Gentzen 转换，经 Curry–Howard correspondence 应用到证明过程表示的自然结果。」（逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我把未来抛给了你。</p>]]>
    
    </summary>
    
      <category term="CPS" scheme="http://en.ors-sro.com/tags/CPS/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[求值策略]]></title>
    <link href="http://en.ors-sro.com/Evaluation-strategy/"/>
    <id>http://en.ors-sro.com/Evaluation-strategy/</id>
    <published>2016-12-25T08:04:45.000Z</published>
    <updated>2016-12-25T09:56:34.762Z</updated>
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>有多少人写过这样的交换程序，然后发现调用后并不能交换。老师告诉我们因为这是按值调用。</p>
<p>按值调用是求值策略中的一种。</p>
<p><a href="https://en.wikipedia.org/wiki/Evaluation_strategy" target="_blank" rel="external">求值策略</a>是一种表达式求值时的时机（严格求值，非严格求值等）和求值的内容（传值，传引用，传指针，传名等）的策略。</p>
<h2 id="严格求值">严格求值</h2><p>严格求值是指参数总在函数调用前求值。也就是说明了求值策略的<strong>时机</strong>。</p>
<p>根据求值的<strong>内容</strong>划分，常见的形式有<strong>按值调用</strong>和<strong>按引用调用</strong>。</p>
<p>按值调用（call by value），参数传递的是值的副本，不能改变原本的值。实现方式有值传递（pass by value）</p>
<p>按引用调用（call by reference），参数传递的是引用的副本，也就是<strong>关注的值</strong>的引用。能改变<strong>关注的值</strong>。实现方式有传引用（pass by reference），传指针（pass by pointer）等。</p>
<p>所以要从<strong>行为</strong>上区分，如果从数据上看，所有都是按值调用。</p>
<p>求值策略跟语言语法无关，实现方式才跟语言语法有关。</p>
<h2 id="例子">例子</h2><p>以 C ++ 为例</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plusOne</span><span class="params">(<span class="keyword">int</span> second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  second = second + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plusOneByReference</span><span class="params">(<span class="keyword">int</span>&amp; second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  second = second + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">  plusOne(a);            <span class="comment">// 按值调用</span></span><br><span class="line">  plusOneByReference(b); <span class="comment">// 按引用调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>plusOne</code> 调用，关注的值 <code>a</code> 没法变化。所以是按值调用。</p>
<p><code>plusOneByReference</code> 调用，关注的值 <code>b</code> 可以变化，所以是按引用调用。</p>
<p>在 C++ 里并不能通过只看函数签名就能得出求值策略。也就是同一个函数可能有不同的求值策略</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minusOne</span><span class="params">(<span class="keyword">int</span>* second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  *second = *second - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>  c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>* d = &amp;c;</span><br><span class="line">  minusOne(&amp;c); <span class="comment">// 按引用调用</span></span><br><span class="line">  minusOne(d);  <span class="comment">// 按值调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个 <code>minusOne</code> 调用，关注的值 <code>c</code> 可以变化，所以是按引用调用。</p>
<p>第二个 <code>minusOne</code> 调用，关注的值 <code>d</code> 没法变化，所以是传值调用。</p>
<p>所以一个函数不能直接从签名上得出求值策略。需要从行为上考虑。</p>
<h2 id="最后">最后</h2><p>还有按名调用（call by name）和 按未来调用（call by future ）我懒得说了（逃</p>
<p>参考链接 <a href="http://zhihu.com/question/20628016/answer/28970414" target="_blank" rel="external">传值还是传引用</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="求值策略" scheme="http://en.ors-sro.com/tags/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Promise]]></title>
    <link href="http://en.ors-sro.com/Promise/"/>
    <id>http://en.ors-sro.com/Promise/</id>
    <published>2016-12-18T07:14:35.000Z</published>
    <updated>2016-12-25T10:02:26.561Z</updated>
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"拉数据"</span>);</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"做这个那个，再发数据"</span>);</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"数据发送成功，恭喜充值成功游戏时间 +1s!"</span>);</span><br><span class="line">		&#125;,<span class="number">3000</span>)</span><br><span class="line">	&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>噢，亲爱的，你一定去过地狱，是吗？</p>
<a id="more"></a>
<h2 id="欢迎来到异步世界">欢迎来到异步世界</h2><p>当世界没有异步运算的时候，程序顺序执行，简单明了。有一天来了一个异步运算——拉数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		data = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"数据拉取成功"</span>);</span><br><span class="line">	&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拉完数据自然要处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	data += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"处理数据完成"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照顺序逻辑编写代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getData();</span><br><span class="line">handleData();</span><br><span class="line"><span class="comment">// =&gt; 处理数据完成</span></span><br><span class="line"><span class="comment">// =&gt; 数据拉取成功</span></span><br></pre></td></tr></table></figure>
<p>天呐，居然先处理了数据才拉取数据。这是自然的。因为计算是异步的，所以不得不把所有跟数据有关的函数移到异步函数内部。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		data = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"数据拉取成功"</span>);</span><br><span class="line">		handleData();</span><br><span class="line">	&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  data += <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"处理数据完成"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行时候的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getData()</span><br><span class="line"><span class="comment">// =&gt; 数据拉取成功</span></span><br><span class="line"><span class="comment">// =&gt; 处理数据完成</span></span><br></pre></td></tr></table></figure>
<p>拉玩还不算，还得发数据。做完一次人肉 CPS 变换后代码变成这样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"拉数据"</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"做这个那个，再发数据"</span>);</span><br><span class="line">          setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"数据发送成功，恭喜充值成功游戏时间 +1s!"</span>);</span><br><span class="line">          &#125;,<span class="number">3000</span>)</span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>什么？你觉得代码还好？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">						setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">							setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">								setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">									setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">										setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">											<span class="built_in">console</span>.log(<span class="string">"终于做完了"</span>)</span><br><span class="line">										&#125;,<span class="number">1000</span>)</span><br><span class="line">									&#125;,<span class="number">1000</span>)</span><br><span class="line">								&#125;,<span class="number">1000</span>)</span><br><span class="line">							&#125;,<span class="number">1000</span>)</span><br><span class="line">						&#125;,<span class="number">1000</span>)</span><br><span class="line">					&#125;,<span class="number">1000</span>)</span><br><span class="line">				&#125;,<span class="number">1000</span>)</span><br><span class="line">			&#125;,<span class="number">1000</span>)</span><br><span class="line">		&#125;,<span class="number">1000</span>)</span><br><span class="line">	&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>欢迎来到回调地狱。</p>
<h2 id="未来的承诺">未来的承诺</h2><p>很长一段时间不少人都写着这种代码，终于 ES 6 美好的承诺 <strong>Promise</strong> 来临。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"数据拉取成功"</span>);</span><br><span class="line">		callback(data);</span><br><span class="line">	&#125;,<span class="number">1000</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"拉取中……"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"处理中……"</span>);</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			data += <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"处理数据完成"</span>);</span><br><span class="line">			resolve(data);</span><br><span class="line">		&#125;,<span class="number">2000</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"发送中……"</span>);	</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"数据发送成功"</span>);</span><br><span class="line">			resolve(data);</span><br><span class="line">		&#125;,<span class="number">3000</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showSucess</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"恭喜充值成功游戏时间 +"</span> + data + <span class="string">"s!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么运行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	getData(resolve)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.then(handleData).then(sendData).then(showSucess);</span><br></pre></td></tr></table></figure>
<p>除了语法上更直观外，还可以使用 <code>.catch()</code> 捕获异常。 </p>
<p>还可以使用 <code>.all()</code> 当所有异步完成时触发</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p1"</span>);</span><br><span class="line">		resolve();</span><br><span class="line">	&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p2"</span>);</span><br><span class="line">		resolve();</span><br><span class="line">	&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p3"</span>);</span><br><span class="line">		resolve();</span><br><span class="line">	&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"全部执行完毕"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 <code>.race()</code> 来竞争，当有异步完成时出发。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p1"</span>);</span><br><span class="line">		resolve(<span class="string">"p1"</span>);</span><br><span class="line">	&#125;,<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p2"</span>);</span><br><span class="line">		resolve(<span class="string">"p2"</span>);</span><br><span class="line">	&#125;,<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p3"</span>);</span><br><span class="line">		resolve(<span class="string">"p3"</span>);</span><br><span class="line">	&#125;,<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">winner</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(winner + <span class="string">"优先完成"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="最后">最后</h2><p>Promise 也是一个 Monad （逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"拉数据"</span>);</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"做这个那个，再发数据"</span>);</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"数据发送成功，恭喜充值成功游戏时间 +1s!"</span>);</span><br><span class="line">		&#125;,<span class="number">3000</span>)</span><br><span class="line">	&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>噢，亲爱的，你一定去过地狱，是吗？</p>]]>
    
    </summary>
    
      <category term="Promise" scheme="http://en.ors-sro.com/tags/Promise/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SICP 1.2 过程及产生的过程]]></title>
    <link href="http://en.ors-sro.com/SICP-1-2-Procedures-and-the-Process-They-Generate/"/>
    <id>http://en.ors-sro.com/SICP-1-2-Procedures-and-the-Process-They-Generate/</id>
    <published>2016-12-11T02:56:18.000Z</published>
    <updated>2017-01-29T10:57:49.946Z</updated>
    <content type="html"><![CDATA[<p>填坑</p>
<a id="more"></a>
<h2 id="笔记">笔记</h2><h3 id="递归与迭代">递归与迭代</h3><p>说到递归的时候有两层含义。</p>
<p>一是指语法形式。从语法形式上讲，函数调用自身称为递归。</p>
<p>二是指计算方式。从计算方式上讲，将问题求解一层层地转化为子问题求解的计算方式称为递归。相对应地，从最底层的子问题开始求解，逐渐求得更高层乃至最后问题的计算方式称为迭代。</p>
<p>书中介绍了求阶乘的两种方法。从语法形式上讲都是递归。从计算方式上讲，一个是递归，一个是迭代。</p>
<p>递归的计算通常分为两步。一步是将问题的求解层层深入逐步化为子问题解的组合，也就是递进。下一步是求解子问题的解，组合这些解，层层返回，也就是回归。</p>
<p>迭代的计算只有一步。从最底层的问题开始求解，由底层问题的解得出高层问题的解，一层层叠上去，最终得到问题的解。</p>
<p>递归的计算过程是先展开后收缩，所以线性递归看来的形状像是一个箭头。</p>
<p>迭代的计算过程是一层层叠上去的，所以迭代看起来的形状像是一个直桶。</p>
<p>书中提到了尾递归。还提到了有了尾递归，循环结构就只是语法糖。</p>
<p>迭代计算过程的递归称为尾递归。尾递归之所以能够被现在编译器优化为循环是因为没有了回归的过程，也就是每一步的计算结果只与输入（参数）有关，不用考虑解的组合方式，如阶乘解的组合方式是相乘，斐波那契解的组合方式是相加。不考虑后可以丢弃上一步计算产生的结果和环境，防止爆栈。</p>
<p>递归的计算过程问题只分解为一个子问题的求解称为线性递归。</p>
<p>可能是因为这种方式子问题的增长是线性的 = = 。</p>
<p>递归的计算过程问题分解为两个子问题的求解称为树形递归，更确切地说是二叉树型递归。书中斐波那契的求解过程就是一个二叉树的中序遍历过程。</p>
<p>如果问题分解为三个子问题呢？那当然是三叉树啦！</p>
<h3 id="递归转迭代">递归转迭代</h3><p>递归转迭代有一定的通用技巧。对于那些一眼就能看出如何迭代的，最简单的方式是用循环结构写一遍，然后转成递归的语法形式。如果看不出来，还有一条比较有用的技巧。把计算过程用到的所有上一个过程的量放到输入中，也就是参数化。所有计算的状态只需要全部输入就能还原。将迭代的过程转为参数的变化过程，这个过程中，设法保持参数变化，但结果不变。这一点可以参考习题 1.16</p>
<h3 id="复杂度">复杂度</h3><p>衡量复杂度沿用了数学中的阶级比较记号。</p>
<p>$O$ 表示渐近上界，类似于 $\le$ </p>
<p>$\Theta$ 表示夹在中间，类似于 $=$</p>
<p>$\Omega$ 表示渐进下界，类似于 $\ge$</p>
<p>这是大写记号。还有对应的小写记号。</p>
<p>$o$  表示上界，类似于 $&lt;$</p>
<p>$\omega$  表示下界，类似于 $&gt;$ </p>
<p>例如对于 $f(n) = 3n^2 + n$ 有</p>
<p>$f(n) = O(n^2)$</p>
<p>$f(n) = \Theta(n^2)$</p>
<p>$f(n) = \Omega(n^2)$ </p>
<p>$f(n) = o(n^3)$</p>
<p>$f(n) = \omega(n)$</p>
<p>因为 $O$ 表示渐进上界，所以经常用来描述算法最坏情况。</p>
<p>因为 $\Omega$ 表示渐进下界，所以经常用来描述算法最好情况。</p>
<p>而 $\Theta$ 通常用于描述算法的平均情况。</p>
<p>$O$ 会更常用。因为有时只需要知道最坏情况，还有就是 $O$ 打起来方便啊。不支持数学公式的情况下打 $\Theta$ 和 $\Omega$ 还要去找字符。</p>
<p>复杂度可以用于分析时间复杂度和空间复杂度。</p>
<p>时间复杂度是问题求解的步骤次数。</p>
<p>空间复杂度是问题求解的所需要的额外空间。</p>
<p>对于递归，空间复杂度的求解所需要的额外空间主要是记录参数，也就是求递归的深度。 时间复杂度可以考虑使用<a href="https://en.wikipedia.org/wiki/Master_theorem#Inadmissible_equations" target="_blank" rel="external">主方法</a>求解。</p>
<h2 id="习题">习题</h2><h3 id="习题_1-9">习题  1.9</h3><blockquote>
<p><strong>Exercise 1.9.</strong>  Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">0</span>)</span></span><br><span class="line">      b</span><br><span class="line">      <span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> a)</span> b)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">0</span>)</span></span><br><span class="line">      b</span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> a)</span> <span class="list">(<span class="keyword">inc</span> b)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>分别展开就能区分。第一种方法</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(inc (+ (dec 2) 3))</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(inc (inc (+ (dec 1) 3)))</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword">inc</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>第二种方法</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword">inc</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(+ 1 4)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> <span class="number">1</span>)</span> <span class="list">(<span class="keyword">inc</span> <span class="number">4</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(+ 0 5)</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>可以看出，第一种方式式子越来越长，整个过程像是一个箭头。而第二种式子式子长度不变，整个过程像是直桶。</p>
<p>第一种是递归的，因为它展开后再收缩，需要记录整个计算链。</p>
<p>第二种是迭代的，因为它没有发生嵌套，只需要记录两个变量。</p>
<h3 id="习题_1-10">习题  1.10</h3><blockquote>
<p><strong>Exercise 1.10.</strong>  The following procedure computes a mathematical function called Ackermann’s function.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">A</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> y <span class="number">0</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">0</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> y)</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> y <span class="number">1</span>)</span> <span class="number">2</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">A</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> x <span class="number">1</span>)</span></span><br><span class="line">                 <span class="list">(<span class="keyword">A</span> x <span class="list">(<span class="keyword"><span class="built_in">-</span></span> y <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>What are the values of the following expressions?</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">3</span> <span class="number">3</span>)</span></span><br></pre></td></tr></table></figure>
<p>Consider the following procedures, where A is the procedure defined above:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">g</span> n)</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">h</span> n)</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">k</span> n)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">5</span> n n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Give concise mathematical definitions for the functions computed by the procedures $f$, $g$, and $h$ for positive integer values of $n$. For example, <code>(k n)</code> computes $5n^2$.</p>
</blockquote>
<p>将式子带入求值即可。 <code>(A 1 10)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">10</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">9</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">8</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">7</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">6</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">5</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">4</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">3</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">4</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">8</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">16</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">32</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">64</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">128</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">256</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">512</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">1024</span></span><br></pre></td></tr></table></figure>
<p><code>(A 2 4)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">4</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">4</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">8</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">16</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">15</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">14</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">13</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">12</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">11</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">10</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">9</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">8</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">7</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">6</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">5</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">4</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">3</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">4</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">8</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">16</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">32</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">64</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">128</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">256</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">512</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">1024</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">2048</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">4096</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">8192</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">16384</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">32768</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">65536</span></span><br></pre></td></tr></table></figure>
<p><code>(A 3 3)</code> </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">3</span> <span class="number">3</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">3</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">3</span> <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;;后面结果为上面 (A 2 4) 的展开</span></span><br><span class="line"><span class="number">65536</span></span><br></pre></td></tr></table></figure>
<p><code>(f n)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">f</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 2n</span></span><br></pre></td></tr></table></figure>
<p><code>(g n)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">g</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> n)</span></span><br><span class="line"><span class="comment">;; n = 0</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">0</span>)</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; n = 1</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; else</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 每求值一次就多一次 (A 0 。n 就会 - 1</span></span><br><span class="line"><span class="comment">;; 一直到 n = 1 ，也就是有 n - 1 个 (A 0 </span></span><br><span class="line"><span class="comment">;; (A 0 X) 最终会转化为 2*X</span></span><br><span class="line"><span class="comment">;; (A 0 (A 0 (A 0 ....[n - 1 个] (A 1 1))))</span></span><br><span class="line"><span class="comment">;; 2 * 2 * 2 * 2 ... [n - 1 个] (A 1 1)</span></span><br><span class="line"><span class="comment">;; (2 ^ (n - 1)) * (A 1 1)</span></span><br><span class="line"><span class="comment">;; (2 ^ (n - 1)) * 2</span></span><br><span class="line"><span class="comment">;; 2 ^ n</span></span><br></pre></td></tr></table></figure>
<p><code>(h n)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">h</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> n)</span></span><br><span class="line"><span class="comment">;; n = 0</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">0</span>)</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; n = 1</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; else</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; (h n) =&gt; (A 2 n)</span></span><br><span class="line"><span class="comment">;; (g n) =&gt; (A 1 n) =&gt; 2 ^ n</span></span><br><span class="line"><span class="comment">;; 2 ^ (A 2 (- n 1)) =&gt; 2 ^ (h (- n 1))</span></span><br></pre></td></tr></table></figure>
<p>所以答案是</p>
<p><code>(A 1 10)</code> 为 $1024$</p>
<p><code>(A 2 4)</code> 为 $65536$</p>
<p><code>(A 3 3)</code> 为 $65536$</p>
<p><code>(f n)</code> 为 $2n$</p>
<p><code>(g n)</code> 为 $2^n$</p>
<p><code>(h n)</code> 为<br>$$<br>h(n) = \begin{cases} 0 ,  &amp;n = 0\\\underbrace{2 ^ {2 ^ {2 ^ {.  ^ {. ^{.  ^ 2 }}}}}}_{n个 2}  &amp; n \ge 1  \end{cases}<br>$$</p>
<h3 id="习题_1-11">习题 1.11</h3><blockquote>
<p><strong>Exercise 1.11.</strong>  A function <em>f</em> is defined by the rule that $f(n) = n $ if  $n &lt; 3 $ and $f(n) = f(n-1) + 2f(n-2) + 3f(n-3)$ if $n \ge 3$ . Write a procedure that computes $f$ by means of a recursive process. Write a procedure that computes $f$ by means of an iterative process.</p>
</blockquote>
<p>递归形式的很好写，直接翻译即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> n <span class="number">3</span>)</span> n)</span></span><br><span class="line">		<span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;=</span></span> n <span class="number">3</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">2</span>)</span>)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">3</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>观察递归的计算过程，分为两步。第一步展开，将递归式展开到有具体数值的分支。第二步计算，一步步计算回去。所以第二步就是想要的迭代。考虑到 $f(n)$ 需要 $f(n-1)$ ，$f(n-2)$ 和 $f(n-3)$ 三个变量，再加上当前计算到了第几个还需要一个变量。所以一共需要四个变量。用 $a$ $b$ $c$ 分别代表 $f(n-1)$  $f(n-2)$  $f(n-3)$ 。根据 $f$ 的定义得。</p>
<p>$a \leftarrow a + 2b + 3c$</p>
<p>$b \leftarrow a$</p>
<p>$c \leftarrow b$</p>
<p>翻译成代码</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f-iter</span> a b c n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> n <span class="number">0</span>)</span> </span><br><span class="line">      a</span><br><span class="line">      <span class="list">(<span class="keyword">f-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> c)</span>)</span></span><br><span class="line">              a</span><br><span class="line">              b</span><br><span class="line">              <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">f-iter</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">3</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>但是这样的代码是有问题的。因为没有考虑 $n &lt; 3$ 的情况。考虑到 $n &lt; 3$  的情况应该是这样的</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f-iter</span> a b c n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">0</span>)</span> c)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">1</span>)</span> b)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">2</span>)</span> a)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">f-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> c)</span>)</span> a b <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">f-iter</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>通过观察规律发现 $c = f(n)$ 所以还可以这么写</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f-iter</span> a b c n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">0</span>)</span> </span><br><span class="line">      c</span><br><span class="line">      <span class="list">(<span class="keyword">f-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> c)</span>)</span></span><br><span class="line">              a</span><br><span class="line">              b</span><br><span class="line">              <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">f-iter</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 4</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 11</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">;; 25</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="comment">;; 1892</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-12">习题 1.12</h3><blockquote>
<p><strong>Exercise 1.12.</strong>  The following pattern of numbers is called <em>Pascal’s triangle</em>.</p>
<p>​     1 </p>
<p>​    1 1</p>
<p>   1 2 1</p>
<p>  1 3 3 1</p>
<p>1 4 6 4 1</p>
</blockquote>
<p>规律题目已经说明，假设 <code>(y row col)</code> 表示第 <code>row</code> 行第 <code>col</code> 列的值，则有</p>
<p>$$<br>y(row,col) = \begin{cases} 1, &amp; col = 1\\1 , &amp; col = row\\y(row - 1,col - 1) + y(row - 1,col) , &amp; otherwise\end{cases}<br>$$<br>对应的代码为</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">y</span> row col)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> col <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">	    <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> col row)</span> <span class="number">1</span>)</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">y</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> row <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> col <span class="number">1</span>)</span>)</span></span><br><span class="line">	             <span class="list">(<span class="keyword">y</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> row <span class="number">1</span>)</span> col)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">1</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">2</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">2</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">3</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">3</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">3</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-13">习题 1.13</h3><blockquote>
<p><strong>Exercise 1.13.</strong>  Prove that $Fib(n)$ is the closest integer to $\phi^n/\sqrt 5$, where $\phi = (1 + \sqrt 5) / 2$. Hint: Let $\psi = (1 - \sqrt 5)/2$. Use induction and the definition of the Fibonacci numbers (see section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a>) to prove that $Fib(n) = (\phi^n - \psi^n) / \sqrt 5$.</p>
</blockquote>
<p>题目提示先证明 $Fib(n) = (\phi^n - \psi^n) / \sqrt 5$ 。</p>
<p>这里使用最偷懒最耍赖的数学归纳法来证明。</p>
<p>当 $n = 0$ 时 $Fib(0) = (\phi^0 - \psi^0)/\sqrt 5 = 0 / \sqrt 5 = 0$ ，等式成立。</p>
<p>当 $n = 1$ 时<br>$$<br>\begin{aligned}<br>Fib(1)&amp; = (\phi^1 - \psi^ 1) / \sqrt 5<br>\\&amp;= (\phi - \psi) / \sqrt 5<br>\\&amp;= (\frac{(1+ \sqrt5)}{2} - \frac{(1 - \sqrt 5)}{2}) / \sqrt 5<br>\\&amp;= \sqrt5 / \sqrt 5<br>\\&amp;= 1<br>\end{aligned}<br>$$<br>等式成立。</p>
<p>设当 $n = k$ 时， $Fib(k) = (\phi^k - \psi^k) / \sqrt 5$ 成立。</p>
<p>当 $ n = k  + 1$ 时<br>$$<br>\begin{aligned}<br>&amp;Fib(k+1)<br>\\=&amp; Fib(k) + Fib(k - 1)<br>\\=&amp; (\phi^k - \psi^k) / \sqrt{5} + (\phi^{k-1} - \psi^{k-1}) / \sqrt 5<br>\\=&amp; \frac{(\phi^k+\phi^{k-1}) - (\psi^k + \psi^{k-1})} {\sqrt 5}<br>\\=&amp; \frac{\phi^{k+1}(\phi^{-1} + \phi^{-2}) - \psi^{k+1}(\psi^{-1} + \psi^{-2})}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1}\cfrac{(\phi + 1)}{ \phi^2} - \psi^{k+1}\cfrac{(\psi+1)}{\psi^2}}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1}\cfrac{\cfrac{1+\sqrt 5}{2} + 1}{(\cfrac{1+\sqrt5}{2})^2} - \psi^{k+1}\cfrac{\cfrac{1 - \sqrt5}{2} + 1}{(\cfrac{1-\sqrt5}{2})^2}}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1}\cfrac{\cfrac{3+\sqrt 5}{2}}{\cfrac{3+\sqrt 5}{2}} - \psi^{k+1}\cfrac{\cfrac{3-\sqrt 5}{2}}{\cfrac{3-\sqrt 5}{2}}}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1} - \psi^{k+1}}{\sqrt 5}<br>\end{aligned}<br>$$</p>
<p>证毕。</p>
<p>接着证明 $Fib(n)$ 是最接近 $\phi^n/\sqrt 5$ 的整数。</p>
<p>若要证明 $Fib(n)$ 是最接近 $\phi^n/\sqrt 5$ 的整数，</p>
<p>只需要证明 $|Fib(n) - \phi^n/\sqrt 5| &lt; 1$ </p>
<p>根据上面的结论有<br>$$<br>\begin{aligned}<br>\left|Fib(n) - \frac{\phi^n}{\sqrt 5}\right| &amp;= \left|\frac{\phi^n - \psi^n}{\sqrt 5} - \frac{\phi^n}{\sqrt 5}\right|<br>\\&amp;= \left|-\frac{\psi^n}{\sqrt 5}\right|<br>\\&amp;= \frac{|\psi^n|}{\sqrt5}<br>\\&amp;&lt; \frac{1}{\sqrt 5} \left(\because 0 &lt; \left|\frac{1 - \sqrt 5}{2}\right| &lt; 1 \right)<br>\\&amp;&lt; 1<br>\end{aligned}<br>$$<br>证毕。</p>
<h3 id="习题_1-14">习题 1.14</h3><blockquote>
<p><strong>Exercise 1.14.</strong>  Draw the tree illustrating the process generated by the count-change procedure of section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a> in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?</p>
</blockquote>
<p>先看程序是怎么执行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c 11 5&#10;&#9500;&#9472;&#9472;&#9472;c 11 4&#10;&#9474;   &#9500;&#9472;&#9472;&#9472;c 11 3&#10;&#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 11 2&#10;&#9474;   &#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 11 1&#10;&#9474;   &#9474;   &#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 11 0&#10;&#9474;   &#9474;   &#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 10 1&#10;&#9474;   &#9474;   &#9474;   &#9474;       &#9500;&#9472;&#9472;&#9472;c 10 0&#10;&#9474;   &#9474;   &#9474;   &#9474;       &#9492;&#9472;&#9472;&#9472;c 9 1&#10;&#9474;   &#9474;   &#9474;   &#9474;           &#9500;&#9472;&#9472;&#9472;c 9 0&#10;&#9474;   &#9474;   &#9474;   &#9474;           &#9492;&#9472;&#9472;&#9472;c 8 1&#10;&#9474;   &#9474;   &#9474;   &#9474;               &#9500;&#9472;&#9472;&#9472;c 8 0&#10;&#9474;   &#9474;   &#9474;   &#9474;               &#9492;&#9472;&#9472;&#9472;c 7 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                   &#9500;&#9472;&#9472;&#9472;c 7 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                   &#9492;&#9472;&#9472;&#9472;c 6 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                       &#9500;&#9472;&#9472;&#9472;c 6 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                       &#9492;&#9472;&#9472;&#9472;c 5 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                           &#9500;&#9472;&#9472;&#9472;c 5 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                           &#9492;&#9472;&#9472;&#9472;c 4 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                               &#9500;&#9472;&#9472;&#9472;c 4 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                               &#9492;&#9472;&#9472;&#9472;c 3 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                                   &#9500;&#9472;&#9472;&#9472;c 3 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                                   &#9492;&#9472;&#9472;&#9472;c 2 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                                       &#9500;&#9472;&#9472;&#9472;c 2 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                                       &#9492;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                                           &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                                           &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 6 2&#10;&#9474;   &#9474;   &#9474;       &#9500;&#9472;&#9472;&#9472;c 6 1&#10;&#9474;   &#9474;   &#9474;       &#9474;   &#9500;&#9472;&#9472;&#9472;c 6 0&#10;&#9474;   &#9474;   &#9474;       &#9474;   &#9492;&#9472;&#9472;&#9472;c 5 1&#10;&#9474;   &#9474;   &#9474;       &#9474;       &#9500;&#9472;&#9472;&#9472;c 5 0&#10;&#9474;   &#9474;   &#9474;       &#9474;       &#9492;&#9472;&#9472;&#9472;c 4 1&#10;&#9474;   &#9474;   &#9474;       &#9474;           &#9500;&#9472;&#9472;&#9472;c 4 0&#10;&#9474;   &#9474;   &#9474;       &#9474;           &#9492;&#9472;&#9472;&#9472;c 3 1&#10;&#9474;   &#9474;   &#9474;       &#9474;               &#9500;&#9472;&#9472;&#9472;c 3 0&#10;&#9474;   &#9474;   &#9474;       &#9474;               &#9492;&#9472;&#9472;&#9472;c 2 1&#10;&#9474;   &#9474;   &#9474;       &#9474;                   &#9500;&#9472;&#9472;&#9472;c 2 0&#10;&#9474;   &#9474;   &#9474;       &#9474;                   &#9492;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;   &#9474;       &#9474;                       &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;   &#9474;       &#9474;                       &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;   &#9474;       &#9492;&#9472;&#9472;&#9472;c 1 2&#10;&#9474;   &#9474;   &#9474;           &#9500;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;   &#9474;           &#9474;   &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;   &#9474;           &#9474;   &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;   &#9474;           &#9492;&#9472;&#9472;&#9472;c -4 2&#10;&#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 1 3&#10;&#9474;   &#9474;       &#9500;&#9472;&#9472;&#9472;c 1 2&#10;&#9474;   &#9474;       &#9474;   &#9500;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;       &#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;       &#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;       &#9474;   &#9492;&#9472;&#9472;&#9472;c -4 2&#10;&#9474;   &#9474;       &#9492;&#9472;&#9472;&#9472;c -11 3&#10;&#9474;   &#9492;&#9472;&#9472;&#9472;c -14 4&#10;&#9492;&#9472;&#9472;&#9472;c -39 5</span><br></pre></td></tr></table></figure>
<p>接着求时间复杂度和空间复杂度。</p>
<p>空间复杂度是树的最大深度。显然对于换硬币问题，嵌套最深的情况是全部都以最小的零钱兑换。也就是深度是 $change \div 1 = change$  。所以空间复杂度是 $\Theta(change)$ 或者说 $\Theta(n)$ 。</p>
<p>时间复杂度是树的子节点个数。</p>
<p>没算出来= =</p>
<h3 id="习题_1-15">习题 1.15</h3><blockquote>
<p><strong>Exercise 1.15.</strong>  The sine of an angle (specified in radians) can be computed by making use of the approximation $\sin x \approx x$ if x is sufficiently small, and the trigonometric identity<br>$$<br>\sin x = 3 \sin \frac{x}{3} - 4\sin^3 \frac{x}{3}<br>$$<br>to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered “sufficiently small’’ if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x x)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">p</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">4</span> <span class="list">(<span class="keyword">cube</span> x)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sine</span> angle)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">not</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> angle)</span> <span class="number">0.1</span>)</span>)</span></span><br><span class="line">       angle</span><br><span class="line">       <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> angle <span class="number">3.0</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>a.  How many times is the procedure <code>p</code> applied when <code>(sine 12.15)</code> is evaluated?</p>
<p>b.  What is the order of growth in space and number of steps (as a function of <em>a</em>) used by the process generated by the sine procedure when <code>(sine a)</code> is evaluated?</p>
</blockquote>
<p>执行过程</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sine</span> <span class="number">12.15</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">4.5</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">1.5</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">0.5</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">0.1666667</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">0.0555556</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="number">0.0555556</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>最后迭代到 <code>(p (p (p (p (p (sine 0.0555556))))))</code> 所以问题 a 的答案是 <code>p</code> 一共被调用了 5 次。</p>
<p>空间复杂度等于树的深度，在这里等于 <code>p</code> 的调用次数 $x$，根据题意有<br>$$<br>\begin{aligned}<br>&amp;angle \div 3^x &lt; 0.1<br>\\&amp; angle &lt; 0.1 \times 3^x<br>\\&amp; 10angle &lt; 3^x<br>\\&amp; \log_3{10angle} &lt; x<br>\end{aligned}<br>$$<br>所以空间复杂度为 $\Theta(\log_3{angle})$ 或者说 $\Theta(\log{n})$ </p>
<p>时间复杂度等于树的节点数，在这里也等于 <code>p</code> 的调用次数，所以时间复杂度为 $\Theta(\log{n})$ 。</p>
<h3 id="习题_1-16">习题 1.16</h3><blockquote>
<p><strong>Exercise 1.16.</strong>  Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does <code>fast-expt</code>. (Hint: Using the observation that $ (b^{n/2})^2 = (b^2)^{n/2} $, keep, along with the exponent $n$ and the base $b$, an additional state variable $a$, and define the state transformation in such a way that the product $ab^n$ is unchanged from state to state. At the beginning of the process $a$ is taken to be $1$, and the answer is given by the value of $a$ at the end of the process. In general, the technique of defining an <em>invariant quantity</em> that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)</p>
</blockquote>
<p>题目的提示已经说得很清楚了。按照题目的思路做就可以了。题目思路如下</p>
<p>除了底 $b$，幂 $n$ 还需要一个变量 $a$ 来记录累积的值，在迭代中保持 $ab^n$ 不变。也就是</p>
<p>当 $n = 0$ 时，结果为 $ab^n$</p>
<p>当 $n$ 是偶数时 ， $b^n = (b^2)^{n/2}$ ， a 不变 。 此时 $ab^n = a(b^2)^{n/2}$ ，转化为求 $\frac{n}{2}$ 次方。</p>
<p>当 $n$ 是奇数时，$b^n = b \cdot b^{(n-1)}$ ，$ a \leftarrow a \cdot b$ ，此时 $ab^n = b \cdot b^{n-1}$ ，转化为求 $n-1$ 次方</p>
<p>写成代码是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fast-expt-iter</span> b n a)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">0</span>)</span></span><br><span class="line">      a</span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> n)</span></span><br><span class="line">          <span class="list">(<span class="keyword">fast-expt-iter</span> <span class="list">(<span class="keyword">square</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> n <span class="number">2</span>)</span> a)</span></span><br><span class="line">          <span class="list">(<span class="keyword">fast-expt-iter</span> b <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b a)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fast-expt</span> b n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fast-expt-iter</span> b n <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fast-expt</span> <span class="number">2</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">fast-expt</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 16</span></span><br><span class="line"><span class="list">(<span class="keyword">fast-expt</span> <span class="number">10</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="comment">;; 10000000000</span></span><br></pre></td></tr></table></figure>
<p>这种找出恒等关系的做法很常用。</p>
<h3 id="习题_1-17">习题 1.17</h3><blockquote>
<p><strong>Exercise 1.17.</strong>  The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the expt procedure:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">0</span>)</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a <span class="list">(<span class="keyword"><span class="built_in">-</span></span> b <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>This algorithm takes a number of steps that is linear in $b$. Now suppose we include, together with addition, operations <code>double</code>, which doubles an integer, and <code>halve</code>, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to <code>fast-expt</code> that uses a logarithmic number of steps.</p>
</blockquote>
<p>按照题目原有的思路 $ a $ 一直变大，$b$ 一直变小直到 $0$ 为止。不过 $a$ 变大使用 <code>double</code> ，$b$ 变小使用 <code>halve</code> 。</p>
<p>还需要考虑 $ b$ 的奇偶性。</p>
<p>当 $b$ 是偶数时，$a \cdot b = double(a) \cdot halve(b)$ 。</p>
<p>当 $b$ 是奇数时，$a \cdot b = a + a \cdot ( b -1)$ 。</p>
<p>写成代码是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">0</span>)</span></span><br><span class="line">	    <span class="number">0</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> b)</span></span><br><span class="line">	        <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">double</span> a)</span> <span class="list">(<span class="keyword">halve</span> b)</span>)</span></span><br><span class="line">	        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a <span class="list">(<span class="keyword"><span class="built_in">-</span></span> b <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-18">习题 1.18</h3><blockquote>
<p><strong>Exercise 1.18.</strong>  Using the results of exercises <a href="#1.16">1.16</a> and <a href="#1.17">1.17</a>, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#footnote_Temp_68" target="_blank" rel="external">40</a></p>
</blockquote>
<p>将上题改成迭代式的。需要多一个变量记录累积值。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">mul-iter</span> a b acc)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">0</span>)</span></span><br><span class="line">	    acc</span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> b)</span></span><br><span class="line">	        <span class="list">(<span class="keyword">mul-iter</span> <span class="list">(<span class="keyword">double</span> a)</span> <span class="list">(<span class="keyword">halve</span> b)</span> acc)</span></span><br><span class="line">	        <span class="list">(<span class="keyword">mul-iter</span> a <span class="list">(<span class="keyword"><span class="built_in">-</span></span> b <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a acc)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span> <span class="list">(<span class="keyword">mul-iter</span> a b <span class="number">0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-19">习题 1.19</h3><blockquote>
<p><strong>Exercise 1.19.</strong>   There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables <em>a</em> and <em>b</em> in the <code>fib-iter</code> process of section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a>: $ a \leftarrow a + b$  and  $b \leftarrow a$ .Call this transformation $T$, and observe that applying $T$ over and over again $n$ times, starting with $1$ and $0$, produces the pair $Fib(n+1)$ and $Fib(n)$. In other words, the Fibonacci numbers are produced by applying $T^n$, the $n$th power of the transformation $T$ , starting with the pair $(1,0)$. Now consider $T$ to be the special case of $p = 0$  and $q = 1$ in a family of transformations $T_{pq}$, where $T_{pq}$ transforms the pair $(a,b)$ according to $a \leftarrow bq + aq + ap$ and $b \leftarrow bp + aq$ . Show that if we apply such a transformation $T_{pq}$ twice, the effect is the same as using a single transformation $T_{p^{,}q^{,}}$ of the same form, and compute $p^{,}$ and $q^{,}$ in terms of $p$ and $q$. This gives us an explicit way to square these transformations, and thus we can compute $T^n$ using successive squaring, as in the fast-expt procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#footnote_Temp_70" target="_blank" rel="external">41</a></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fib</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fib-iter</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fib-iter</span> a b p q count)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> count <span class="number">0</span>)</span> b)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">even?</span></span> count)</span></span><br><span class="line">         <span class="list">(<span class="keyword">fib-iter</span> a</span><br><span class="line">                   b</span><br><span class="line">                   &lt;??&gt;      <span class="comment">; compute p'</span></span><br><span class="line">                   &lt;??&gt;      <span class="comment">; compute q'</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">/</span></span> count <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">fib-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a p)</span>)</span></span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b p)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span>)</span></span><br><span class="line">                        p</span><br><span class="line">                        q</span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">-</span></span> count <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>不得不说这个算法真的很机智。线性迭代很容易想到矩阵变换，多次变化相当于矩阵的幂，通过<a href="http://www.ruanyifeng.com/blog/2015/09/matrix-multiplication.html" target="_blank" rel="external">矩阵乘法</a>的结合律就能一次把整个变换矩阵算出来，最后应用到 $a$ ，$b$ 的初始值就可以算出最终的值。</p>
<p>用迭代法计算 $Fib(n) = b_n$ 是这样的。</p>
<p>有一对$(a,b)$ 的初始值$(a_0,b_0)$ ，那么 $(a_1,b_1)$ 是这么得来的<br>$$<br>\begin{aligned}<br>&amp;a_1 \leftarrow  1a_0 + 1b_0 \\<br>&amp;b_1 \leftarrow 1a_0 + 0b_0<br>\end{aligned}<br>$$</p>
<p>用矩阵表示就是<br>$$<br>\begin{bmatrix}<br>1 &amp; 1 \\<br>1 &amp; 0<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>a_1\\b_1<br>\end{bmatrix}<br>$$<br>可以发现只要乘上左边的矩阵 $T = \begin{bmatrix}1 &amp; 1\\1 &amp; 0\end{bmatrix}$ 就可以得到下一对 $(a,b)$ </p>
<p>要求 $Fib(2)$ 的值由 $Fib(n) = b_n$ 得知只需要求 $b_2$</p>
<p>由 $b_0$ 到 $b_2$ 需要做两次变换，也就是<br>$$<br>\begin{aligned}<br>\begin{bmatrix}<br>a_2\\b_2<br>\end{bmatrix}<br>&amp;=<br>\begin{bmatrix}<br>1 &amp; 1\\<br>1 &amp; 0<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_1\\b_1<br>\end{bmatrix}<br>\\&amp;=<br>\begin{bmatrix}<br>1 &amp; 1\\<br>1 &amp; 0<br>\end{bmatrix}^2<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>\\&amp;=<br>\begin{bmatrix}<br>2 &amp; 1\\<br>1 &amp; 1<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>\end{aligned}<br>$$<br>由矩阵的定义得 $b_2 = 1a_0 + 1b_0 = a_0 + b_0$ 。</p>
<p>在迭代法开始时 $a = 1,b=0$ 也就是 $a_0 = 1,b_0 = 0$</p>
<p>所以 $Fib(2) = b_2 = a_0 + b_0 = 1 + 0 = 1$ 。与其他方式计算的结果相同。</p>
<p>回到题目中机智的算法，它其实是这样的</p>
<p>当 $ n $ 是偶数时，$Fib(n) = T^n b_0 = (T^2)^{n/2} b_0$ 。</p>
<p>当 $n$ 是奇数时，$Fib(n) = T \cdot T^{n-1} b_0$ </p>
<p>题目源代码丢失的部分是求偶数条件下 $p$ 和 $q$ 的值。</p>
<p>题目给出的 $(a,b)$ 递推式是<br>$$<br>\begin{aligned}<br>&amp;a_1 \leftarrow  (p+q)a_0 + qb_0 \\<br>&amp;b_1 \leftarrow qa_0 + pb_0<br>\end{aligned}<br>$$<br>用矩阵表示是<br>$$<br>\begin{bmatrix}<br>p+q &amp; q\\<br>q &amp; p<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>a_1\\b_1<br>\end{bmatrix}<br>$$<br>所以变换矩阵 $T = \begin{bmatrix}p+q &amp; q\\q &amp; p\end{bmatrix}$ ，那么<br>$$<br>\begin{aligned}<br>T^2 &amp;= T \cdot T<br>\\&amp;=<br>\begin{bmatrix}<br>p+q &amp; q\\<br>q &amp; p<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>p+q &amp; q\\<br>q &amp; p<br>\end{bmatrix}<br>\\&amp;=<br>\begin{bmatrix}<br>(p+q)^2 + q^2 &amp; q(p+q) + qp\\<br>q(p+q)+pq &amp; q^2 + p^2<br>\end{bmatrix}<br>\end{aligned}<br>$$<br>对比 $T$ 和 $T^2$ 得<br>$$<br>\begin{aligned}<br>p &amp;\leftarrow q^2 + p^2\\<br>q &amp;\leftarrow q(p+q) + pq<br>\end{aligned}<br>$$<br>所以最后答案是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fib-iter</span> a b p q count)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> count <span class="number">0</span>)</span> b)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">even?</span></span> count)</span></span><br><span class="line">         <span class="list">(<span class="keyword">fib-iter</span> a</span><br><span class="line">                   b</span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> q q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> p p)</span>)</span>            <span class="comment">; compute p'</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> q <span class="list">(<span class="keyword"><span class="built_in">+</span></span> p q)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> p q)</span>)</span>      <span class="comment">; compute q'</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">/</span></span> count <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">fib-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a p)</span>)</span></span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b p)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span>)</span></span><br><span class="line">                        p</span><br><span class="line">                        q</span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">-</span></span> count <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">;; 5</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">6</span>)</span></span><br><span class="line"><span class="comment">;; 8</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="comment">;; 55</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-20">习题 1.20</h3><blockquote>
<p><strong>Exercise 1.20.</strong>  The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative gcd procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.5" target="_blank" rel="external">1.1.5</a>. (The normal-order-evaluation rule for ifis described in exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.5" target="_blank" rel="external">1.5</a>.) Using the substitution method (for normal order), illustrate the process generated in evaluating <code>(gcd 206 40)</code> and indicate the remainder operations that are actually performed. How many remainderoperations are actually performed in the normal-order evaluation of <code>(gcd 206 40)</code>? In the applicative-order evaluation?</p>
</blockquote>
<p>求 normal-order 和 applicative-order 中的 <code>remainder</code> 调用次数。<code>if</code> 语句先执行判断语句，后执行条件分支。</p>
<p>按 normal-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">40</span> <span class="number">0</span>)</span></span><br><span class="line">    <span class="number">206</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="comment">;; gcd(40,6)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> <span class="number">0</span>)</span> <span class="comment">;; 先执行判断语句 remainder 调用次数 1</span></span><br><span class="line">    <span class="number">40</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> <span class="comment">;; gcd(6,4)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="number">0</span>)</span> <span class="comment">;; remainder 调用次数 3</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                    <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"> </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                 <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span> <span class="comment">;; gcd(4,2)</span></span><br><span class="line"> </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> <span class="comment">;; remainder 调用次数 7</span></span><br><span class="line">        <span class="number">0</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> </span><br><span class="line">          <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">                     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                                <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">     </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                 <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> </span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">                 <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                            <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span> <span class="comment">;; gcd (2,0)</span></span><br><span class="line"> </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="comment">;; remainder 调用次数 14</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                              <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span> </span><br><span class="line">        <span class="number">0</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line">                <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">                     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                                <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> <span class="comment">;; remainder 调用次数 18</span></span></span><br></pre></td></tr></table></figure>
<p>按 applicative-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="comment">;; remainder 调用次数 1</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="number">6</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">6</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="number">6</span>)</span>)</span> <span class="comment">;; remainder 调用次数 2</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">6</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">4</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">6</span> <span class="number">4</span>)</span>)</span> <span class="comment">;; remainder 调用次数 3</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">4</span> <span class="number">2</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">4</span> <span class="number">2</span>)</span>)</span> <span class="comment">;; remainder 调用次数 4</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">2</span> <span class="number">0</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>所以答案是 normal-order 18 次 ，applicative-order 4 次。</p>
<h3 id="习题_1-21">习题 1.21</h3><blockquote>
<p><strong>Exercise 1.21.</strong>  Use the smallest-divisor procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.</p>
</blockquote>
<p>用 <code>smallest-divisor</code> 求 199，1999，19999 的最小约数</p>
<p>求值</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">smallest-divisor</span> <span class="number">199</span>)</span></span><br><span class="line"><span class="comment">;; 199</span></span><br><span class="line"><span class="list">(<span class="keyword">smallest-divisor</span> <span class="number">1999</span>)</span></span><br><span class="line"><span class="comment">;; 1999</span></span><br><span class="line"><span class="list">(<span class="keyword">smallest-divisor</span> <span class="number">19999</span>)</span></span><br><span class="line"><span class="comment">;; 7</span></span><br><span class="line"><span class="comment">;; 19999 = 7 x 2857</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-22">习题 1.22</h3><blockquote>
<p><strong>Exercise 1.22.</strong>  Most Lisp implementations include a primitive called <code>runtime</code> that returns an integer that specifies the amount of time the system has been running (measured, for example, in microseconds). The following <code>timed-prime-test</code> procedure, when called with an integer $n$, prints $n$ and checks to see if $n$ is prime. If $n$ is prime, the procedure prints three asterisks followed by the amount of time used in performing the test.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">timed-prime-test</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">newline</span></span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">start-prime-test</span> n <span class="list">(<span class="keyword">runtime</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">start-prime-test</span> n start-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">prime?</span> n)</span></span><br><span class="line">      <span class="list">(<span class="keyword">report-prime</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">runtime</span>)</span> start-time)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">report-prime</span> elapsed-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">" *** "</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> elapsed-time)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Using this procedure, write a procedure <code>search-for-primes</code> that checks the primality of consecutive odd integers in a specified range. Use your procedure to find the three smallest primes larger than $1000$; larger than $10,000$; larger than $100,000$; larger than $1,000,000$. Note the time needed to test each prime. Since the testing algorithm has order of growth of $\Theta(\sqrt n)$ , you should expect that testing for primes around $10,000$ should take about $\sqrt {10}$ times as long as testing for primes around $1000$. Do your timing data bear this out? How well do the data for $100,000$ and $1,000,000$ support the $\sqrt n$  prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?</p>
</blockquote>
<p>编写一个查找一定区间所有奇数中的函数 <code>search-for-prime</code> </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">search-for-prime</span> begin end)</span></span><br><span class="line">	<span class="list">(<span class="keyword">timed-prime-test</span> begin)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> begin end)</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> begin)</span></span><br><span class="line">	    	<span class="list">(<span class="keyword">search-for-prime</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> begin)</span> end)</span></span><br><span class="line">	    	<span class="list">(<span class="keyword">search-for-prime</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> begin)</span> end)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试发现现在机器速度太快了。所以前后 <code>runtime</code> 差值太小总是 0 。所以改为计算总的时间。从<a href="https://www.gnu.org/software/mit-scheme/documentation/mit-scheme-ref/Machine-Time.html" target="_blank" rel="external">Machine-Time</a>得知尝试了几种不同的计时方式。发现 <code>real-time-clock</code> 效果较好。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">time-for</span> n start-time)</span></span><br><span class="line">	<span class="list">(<span class="keyword">search-for-prime</span> n <span class="list">(<span class="keyword"><span class="built_in">+</span></span> n <span class="number">1000</span>)</span>)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">real-time-clock</span>)</span> start-time)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">search</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">time-for</span> n <span class="list">(<span class="keyword">real-time-clock</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1 ]=&gt; (search 100000) </span><br><span class="line">100003 *** 0.</span><br><span class="line">100019 *** 0.</span><br><span class="line">100043 *** 0.</span><br><span class="line">100049 *** 1.5999999999999986e-2</span><br><span class="line">100057 *** 0.</span><br><span class="line">100069 *** 0. </span><br><span class="line">...</span><br><span class="line">;Value: 93 </span><br><span class="line">1 ]=&gt; (search 1000000) </span><br><span class="line">1000003 *** 0.</span><br><span class="line">1000033 *** 1.5000000000000013e-2</span><br><span class="line">1000037 *** 0.</span><br><span class="line">1000039 *** 0.</span><br><span class="line">1000081 *** 1.6000000000000014e-2</span><br><span class="line">1000099 *** 0. </span><br><span class="line">...</span><br><span class="line">;Value: 202</span><br><span class="line">1 ]=&gt; (search 10000000) </span><br><span class="line">10000019 *** 1.5999999999999986e-2</span><br><span class="line">10000079 *** 1.5999999999999986e-2 </span><br><span class="line">10000103 *** 1.5999999999999986e-2 </span><br><span class="line">;Value: 344</span><br></pre></td></tr></table></figure>
<p>每次 <code>search n</code> 的计算次数为单次计算次数乘上1000 。结果为 $1000\sqrt  n = \Theta(\sqrt n)$ 。</p>
<p>所以如果 <code>(search 1000000)</code> 耗时为 202 ，</p>
<p>那么 <code>(search 10000000)</code> 应该等于 </p>
<p>$\Theta(\sqrt {10^8}) = \Theta(\sqrt {10} \cdot \sqrt {10^7}) $<br>$= \sqrt {10} * 202 \approx 638$ 。</p>
<p>但从上面看出实际结果是 344</p>
<h3 id="习题_1-23">习题 1.23</h3><blockquote>
<p><strong>Exercise 1.23.</strong>  The smallest-divisor procedure shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for test-divisor should not be 2, 3, 4, 5, 6, …, but rather 2, 3, 5, 7, 9, …. To implement this change, define a procedure next that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the smallest-divisor procedure to use (next test-divisor)instead of (+ test-divisor 1). With timed-prime-test incorporating this modified version of smallest-divisor, run the test for each of the 12 primes found in exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.22" target="_blank" rel="external">1.22</a>. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?</p>
</blockquote>
<p>找最小约数的时候考虑了除了 2 以外的偶数，做了多余的工作。所以编写函数 <code>next</code> 返回下一个奇数。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">next</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">2</span>)</span></span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">2</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>相应的修改<code>find-divisor</code> 中的 <code>(+ test-divisor 1)</code> 为 <code>(next test-divisor)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">smallest-divisor</span> n)</span></span><br><span class="line">   <span class="list">(<span class="keyword">find-divisor</span> n <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">find-divisor</span> n test-divisor)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="list">(<span class="keyword">square</span> test-divisor)</span> n)</span> n)</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword">divides?</span> test-divisor n)</span> test-divisor)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">find-divisor</span> n <span class="list">(<span class="keyword">next</span> test-divisor)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试时间</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">search</span> <span class="number">100000</span>)</span></span><br><span class="line"><span class="comment">;Value: 78</span></span><br><span class="line"><span class="list">(<span class="keyword">search</span> <span class="number">1000000</span>)</span></span><br><span class="line"><span class="comment">;Value: 125 之前是 202</span></span><br><span class="line"><span class="list">(<span class="keyword">search</span> <span class="number">10000000</span>)</span></span><br><span class="line"><span class="comment">;Value: 296 之前是 344</span></span><br></pre></td></tr></table></figure>
<p>$10^6$ 的时间为之前的 1.6 倍，而 $10^7$ 为之前的 1.1 倍。这是因为</p>
<h3 id="习题_1-24">习题 1.24</h3><blockquote>
<p><strong>Exercise 1.24.</strong>  Modify the timed-prime-test procedure of exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.22" target="_blank" rel="external">1.22</a> to use fast-prime? (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has $\Theta(\log n)$ growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find?</p>
</blockquote>
<p>将 <code>prime?</code> 改为 <code>fast-prime?</code> </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">timed-prime-test</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">newline</span></span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">start-prime-test</span> n <span class="list">(<span class="keyword">system-clock</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">start-prime-test</span> n start-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">fast-prime?</span> n <span class="number">1000</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">report-prime</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">system-clock</span>)</span> start-time)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">report-prime</span> elapsed-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">" *** "</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> elapsed-time)</span>)</span></span><br></pre></td></tr></table></figure>
<p>$1000$ 太小了。分别选择 $10^5$ ，$10^6$ 和 $10^7$ 附近的质数进行测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">timed-prime-test</span> <span class="number">100003</span>)</span></span><br><span class="line"><span class="comment">; 100003 *** 63</span></span><br><span class="line"><span class="list">(<span class="keyword">timed-prime-test</span> <span class="number">1000003</span>)</span></span><br><span class="line"><span class="comment">; 1000003 *** 78</span></span><br><span class="line"><span class="list">(<span class="keyword">timed-prime-test</span> <span class="number">10000019</span>)</span></span><br><span class="line"><span class="comment">; 10000019 *** 94</span></span><br></pre></td></tr></table></figure>
<p>$10^6$ 的复杂度是<br>$\Theta(\log_2{10^6}) = \Theta(\log_2{10^5 \cdot 10})$<br>$= \Theta(\log_2{10}) + \Theta(\log_2{10^5})$ </p>
<p>$\Theta(\log_2{10^5}) $ 也就是 $10^5$ 的时间 $63$</p>
<p>所以 $\Theta(\log_2{10}) = \Theta(\log_2{10^6}) - \Theta(\log_2{10^5}) $<br>$= 78 - 63 = 15$ 。</p>
<p>类似地，$\Theta(\log_2{10^7}) = \Theta(\log_2{10^6}) + \Theta(\log_2{10}) $<br>$= 78 + 15 = 93$ 。</p>
<p>跟实际时间 $94$ 非常接近。</p>
<h3 id="习题_1-25">习题 1.25</h3><blockquote>
<p><strong>Exercise 1.25.</strong>  Alyssa P. Hacker complains that we went to a lot of extra work in writing <code>expmod</code>. After all, she says, since we already know how to compute exponentials, we could have simply written</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">expmod</span> base exp m)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">fast-expt</span> base exp)</span> m)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Is she correct? Would this procedure serve as well for our fast prime tester? Explain.</p>
</blockquote>
<p>看起来没有什么问题。随便测试了几个也没问题。既然是用了不同的方式，肯定有区别。</p>
<p>先看原来的求值过程</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">expmod</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">expmode</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">5</span> <span class="list">(<span class="keyword">expmod</span> <span class="number">5</span> <span class="number">0</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">5</span> <span class="number">1</span>)</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">15</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="number">3</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">9</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>对比本题中的 <code>(expmod 5 2 4) = (remainder 25 4)</code> </p>
<p>发现书中的不是直接求余，而是先把数字减小后求余。这样的好处是当防止在数字比较大的情况下整数溢出。</p>
<h3 id="习题_1-26">习题 1.26</h3><blockquote>
<p><strong>Exercise 1.26.</strong>  Louis Reasoner is having great difficulty doing exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.24" target="_blank" rel="external">1.24</a>. His <code>fast-prime?</code> test seems to run more slowly than his <code>prime?</code> test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis’s code, they find that he has rewritten the <code>expmod</code> procedure to use an explicit multiplication, rather than calling <code>square</code>:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">expmod</span> base exp m)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> exp <span class="number">0</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">even?</span></span> exp)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">expmod</span> base <span class="list">(<span class="keyword"><span class="built_in">/</span></span> exp <span class="number">2</span>)</span> m)</span></span><br><span class="line">                       <span class="list">(<span class="keyword">expmod</span> base <span class="list">(<span class="keyword"><span class="built_in">/</span></span> exp <span class="number">2</span>)</span> m)</span>)</span></span><br><span class="line">                    m)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> base <span class="list">(<span class="keyword">expmod</span> base <span class="list">(<span class="keyword"><span class="built_in">-</span></span> exp <span class="number">1</span>)</span> m)</span>)</span></span><br><span class="line">                    m)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>“I don’t see what difference that could make,’’ says Louis. “I do.” says Eva. “By writing the procedure like that, you have transformed the $\Theta(\log n)$ process into a $\Theta(n)$ process.’’ Explain.</p>
</blockquote>
<p>这种情形有点类似 applicative-order 和 normal-order 的区别。</p>
<p>例如 <code>(square (+ 1 1))</code> 和 <code>(* (+ 1 1) (+ 1 1))</code> 计算过程</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="number">2</span>)</span> <span class="comment">;; (+ 1 1) 只被计算了一次</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">2</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span>)</span> <span class="comment">;; 第一次计算 (+ 1 1)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">2</span>)</span> <span class="comment">;; 第二次计算 (+ 1 1)</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>所以不用 <code>square</code> 的情况下会多计算一次。</p>
<p>如果像题目中这种需要计算的式子是递归的，那么相当于每次都多计算了一次。</p>
<p>原来只需要计算 $\log_2{n}$ 次。</p>
<p>现在需要每次都计算两次。求值展开的形状相当于二叉树，叶子数量就是计算次数。</p>
<p>叶子数量等于 2 的树高次方。树高为 $\log_2{n}$ 。所以叶子数量为 $2^h = 2^{\log_2{n}} = n$ 。</p>
<p>所以复杂度为 $\Theta(n)$  。</p>
<h3 id="习题_1-27">习题 1.27</h3><blockquote>
<p><strong>Exercise 1.27.</strong>  Demonstrate that the Carmichael numbers listed in footnote <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#footnote_Temp_80" target="_blank" rel="external">47</a> really do fool the Fermat test. That is, write a procedure that takes an integer $n$ and tests whether $a^n$ is congruent to <em>a</em> modulo $n$ for every $a&lt;n$, and try your procedure on the given Carmichael numbers.</p>
</blockquote>
<p>编写函数对 $n$ 用所有小于 $n$ 的数进行费马测试。</p>
<p>首先编写一次费马测试的函数。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">one-fermat-test</span> n a)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword">expmod</span> a n n)</span> a)</span>)</span></span><br></pre></td></tr></table></figure>
<p>其次编写对所有小于 $n$ 的数进行费马测试的函数 <code>(test n a)</code> </p>
<p>当 $ a \le 2$ 时，无论 $n$ 是多少直接通过费马测验。</p>
<p>当 $ a &gt; 2$ 时，$test (n,a) = one-fermat-test(n,a) \wedge test(n,a-1)$ </p>
<p>写成代码</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">test-all</span> n a)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> a <span class="number">2</span>)</span></span><br><span class="line">	    <span class="literal">#t</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword">one-fermat-test</span> n a)</span> <span class="list">(<span class="keyword">test-all</span> n <span class="list">(<span class="keyword"><span class="built_in">-</span></span> a <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>费马测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fermat-test</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">test-all</span> n <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">561</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">1105</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br></pre></td></tr></table></figure>
<p>果然 561 和 1105 把费马测试给耍了。</p>
<h3 id="习题_1-28">习题 1.28</h3><blockquote>
<p><strong>Exercise 1.28.</strong>  One variant of the Fermat test that cannot be fooled is called the <em>Miller-Rabin test</em> (Miller 1976; Rabin 1980). This starts from an alternate form of Fermat’s Little Theorem, which states that if $n$ is a prime number and $a$ is any positive integer less than $n$, then $a$ raised to the $(n - 1)$st power is congruent to 1 modulo $n$. To test the primality of a number $n$ by the Miller-Rabin test, we pick a random number $a&lt;n$ and raise $a$ to the $(n - 1)$st power modulo $n$ using the <code>expmod</code> procedure. However, whenever we perform the squaring step in <code>expmod</code>, we check to see if we have discovered a “nontrivial square root of 1 modulo $n$, that is, a number not equal to 1 or $n$ - 1 whose square is equal to 1 modulo $n$. It is possible to prove that if such a nontrivial square root of 1 exists, then $n$ is not prime. It is also possible to prove that if $n$ is an odd number that is not prime, then, for at least half the numbers $a&lt;n$, computing $a^{n-1}$ in this way will reveal a nontrivial square root of 1 modulo $n$. (This is why the Miller-Rabin test cannot be fooled.) Modify the <code>expmod</code> procedure to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a procedure analogous to fermat-test. Check your procedure by testing various known primes and non-primes. Hint: One convenient way to make <code>expmod</code> signal is to have it return 0.</p>
</blockquote>
<p>如果米勒测试的非平凡平方根 $number \in (1,n-1)$ ，那么对于非素数的奇数 $9$ 有</p>
<p>$2^2 \equiv 4 \pmod {9} $</p>
<p>$3^2 \equiv 0 \pmod 9$</p>
<p>$4^2 \equiv 7 \pmod 9$</p>
<p>$5^2 \equiv 7 \pmod 9$</p>
<p>$6^2 \equiv 0 \pmod 9$</p>
<p>$7^2 \equiv 4 \pmod 9$</p>
<p>显然没有任何一个数满足 $ number^2 \equiv 1 \pmod 9$ 。但是题目中说到对于非素数的奇数至少有一半小于 $n$ 的数 $a$ 在计算$a^{n-1} \bmod n$ 的过程中可以找到非平凡平方根。</p>
<p>那么把条件改为非平凡平方根不一定小于 $n$ ，那么对于质数 $13$ 在计算 $10^{12} \bmod 13$ 过程中发现 </p>
<p>$10^6 = (10^3)^2 \equiv 1 \pmod {13}$</p>
<p>也就是存在非平凡平方根 $10^3$ ，使得 $13$ 没有通过米勒测试。但是 $13$ 是质数。 </p>
<p>后来找 Miller-Rabin 测试的相关资料。发现了一篇文章。恍然大悟。原来是计算过程不是这样的。觉得写不出更好的。所以答案请看<a href="http://blog.rainy.im/2015/08/27/miller-rabin-n-rsa/" target="_blank" rel="external">这篇文章</a>。</p>
<h2 id="总结">总结</h2><p>这一小节主要讲述了解决问题的两种方式，递归和迭代。分别介绍了它们的特点。同时引入算法复杂度的衡量方法，目的是为了督促读者写出更好的解决方法。</p>
<p>这一小节有不少习题还挺难的。花了很多时间才多完。自以为编程老司机结果才第二小节就翻车了（逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>填坑</p>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://en.ors-sro.com/tags/SICP/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BrainFuck]]></title>
    <link href="http://en.ors-sro.com/BrainFuck/"/>
    <id>http://en.ors-sro.com/BrainFuck/</id>
    <published>2016-12-04T05:28:39.000Z</published>
    <updated>2016-12-04T07:58:41.542Z</updated>
    <content type="html"><![CDATA[<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span>&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面这段 <strong>BrainFuck</strong> 代码输出结果是 <a href="http://brainfuck.tryitonline.net/#code=KysrKysrKysrK1s-KysrKysrKz4rKysrKysrKysrPisrKz4rPDw8PC1dPisrLj4rLisrKysrKysuLisrKy4-KysuPDwrKysrKysrKysrKysrKysuPi4rKysuLS0tLS0tLi0tLS0tLS0tLj4rLj4u&amp;input=" target="_blank" rel="external">Hello World!</a> 。是不是第一次看到这样的代码的时候一脸懵〇。</p>
<h2 id="原语">原语</h2><p><strong>BrainFuck</strong> 是故意刁难程序员的图灵完备语言。语言的执行类似栈的出栈入栈，搭配一个指向栈顶的指针，进行相应的输出输入等操作。整个语言只有 8 个原语</p>
<table>
<thead>
<tr>
<th style="text-align:center">原语</th>
<th style="text-align:center">操作</th>
<th style="text-align:center">类比C语言</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">指针 + 1</td>
<td style="text-align:center">++ptr</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">指针 - 1</td>
<td style="text-align:center">—ptr</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">指针指向的数据 + 1</td>
<td style="text-align:center">++*ptr</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">指针指向的数据 - 1</td>
<td style="text-align:center">—*ptr</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">输出指针指向的数据</td>
<td style="text-align:center">putChar(*ptr)</td>
</tr>
<tr>
<td style="text-align:center">,</td>
<td style="text-align:center">接受数据输入，存在指针所指向的位置</td>
<td style="text-align:center">*ptr = getChar()</td>
</tr>
<tr>
<td style="text-align:center">[</td>
<td style="text-align:center">循环开始，数据为零则结束循环</td>
<td style="text-align:center">while(*ptr){</td>
</tr>
<tr>
<td style="text-align:center">]</td>
<td style="text-align:center">循环结束</td>
<td style="text-align:center">}</td>
</tr>
</tbody>
</table>
<p>BrainFuck 只接受这 8 个字符，其他字符全部忽略。所以写注释可以直接写，只要注释中没有原语。</p>
<h2 id="简单的程序">简单的程序</h2><p>BrainFuck 中所有数据都初始化为 0 ，模型看起来像是这样的</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="string">.</span><span class="string">.</span><span class="string">.</span> <span class="comment">()用于表示当前指针的位置</span></span><br></pre></td></tr></table></figure>
<p>输出以 <strong>ASCII</strong> 编码输出。输出后数据不会清零。</p>
<p>ASCII 中第一个可见字符是 <code>!</code> ，ASCII 码为 33 。所以只要用 <code>+</code> 加 33 次就可以从 0 变成 33 了。之后输出即可。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></span><br><span class="line"><span class="comment">输出</span> <span class="comment">!</span></span><br></pre></td></tr></table></figure>
<p>直接写 33 个 <code>+</code> 似乎有点蠢。既然做的事是重复的事情，用循环是最自然的。</p>
<p>$33 = 3 \times 11$ 。循环 3 次，每次加 11 就可以了。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">(3)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">[</span>   <span class="comment">循环开始</span></span><br><span class="line">&gt;   <span class="comment">3</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">3</span> <span class="comment">(11)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&lt; <span class="comment">(3)</span> <span class="comment">11</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">-</span> <span class="comment">(2)</span> <span class="comment">11</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">]</span> <span class="comment">当前数据不为</span> <span class="comment">0</span> <span class="comment">则跳转到循环开始部分</span></span><br><span class="line"><span class="comment">当循环结束后是这样</span> <span class="comment">(0)</span> <span class="comment">33</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">(33)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">以</span> <span class="comment">ASCII</span> <span class="comment">编码输出</span></span><br></pre></td></tr></table></figure>
<p>完整的代码</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="string">.</span></span><br></pre></td></tr></table></figure>
<p>22 个字符，比原来 34 个字符少了 12 个字符。</p>
<h2 id="Hello_World!">Hello World!</h2><p><code>Hello World!</code> 的输出方式也是类似的。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">(10)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">[</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">10</span> <span class="comment">(7)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">7</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">10</span> <span class="comment">7</span> <span class="comment">(10)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">(3)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span> <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">(1)</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&lt;&lt;&lt;&lt; <span class="comment">(10)</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">1</span> <span class="comment">0</span> <span class="comment">……</span> </span><br><span class="line"><span class="literal">-</span> <span class="comment">(9)</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">1</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">]</span> <span class="comment">循环结束后</span> <span class="comment">(0)</span> <span class="comment">7*10</span> <span class="comment">10*10</span> <span class="comment">3*10</span> <span class="comment">1*10</span> <span class="comment">0</span> <span class="comment">……</span> <span class="comment">也就是</span> <span class="comment">(0)</span> <span class="comment">70</span> <span class="comment">100</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">(70)</span> <span class="comment">100</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">(72)</span> <span class="comment">100</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">72</span> <span class="comment">也就是</span> <span class="comment">H</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(100)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span> </span><br><span class="line"><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(101)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">101</span> <span class="comment">也就是</span> <span class="comment">e</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(108)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">108</span> <span class="comment">也就是</span> <span class="comment">l</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">108</span> <span class="comment">也就是</span> <span class="comment">l</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(111)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">111</span> <span class="comment">也就是</span> <span class="comment">o</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">72</span> <span class="comment">111</span> <span class="comment">(30)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">111</span> <span class="comment">(32)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">32</span>  <span class="comment">也就是</span> <span class="comment">空格</span></span><br><span class="line">&lt;&lt; <span class="comment">0</span> <span class="comment">(72)</span> <span class="comment">111</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">(87)</span> <span class="comment">111</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">87</span> <span class="comment">也就是</span> <span class="comment">W</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(111)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">111</span> <span class="comment">也就是</span> <span class="comment">o</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(114)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">114</span> <span class="comment">也就是</span> <span class="comment">r</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(108)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">108</span> <span class="comment">也就是</span> <span class="comment">l</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(100)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">100</span> <span class="comment">也就是</span> <span class="comment">d</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">87</span> <span class="comment">100</span> <span class="comment">(32)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">100</span> <span class="comment">(33)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">33</span> <span class="comment">也就是</span> <span class="comment">!</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">87</span> <span class="comment">100</span> <span class="comment">33</span> <span class="comment">(10)</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">10</span> <span class="comment">也就是</span> <span class="comment">换行</span></span><br></pre></td></tr></table></figure>
<p>也不是很难嘛。只不过把实现的思想隐藏到了代码中。</p>
<h2 id="最后">最后</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span>&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="BrainFuck" scheme="http://en.ors-sro.com/tags/BrainFuck/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Haskell 中的 Functor Applicative Functor 和 Monad]]></title>
    <link href="http://en.ors-sro.com/Functor-applicative-functor-and-monad-in-Haskell/"/>
    <id>http://en.ors-sro.com/Functor-applicative-functor-and-monad-in-Haskell/</id>
    <published>2016-11-27T05:37:24.000Z</published>
    <updated>2016-11-27T09:58:55.609Z</updated>
    <content type="html"><![CDATA[<p>整理一下 <a href="http://learnyouahaskell.com/chapters" target="_blank" rel="external">《Learn You a Haskell for Great Good !》</a> 介绍的 <code>Funtor</code> ，<code>Applicative Funtor</code> 和 <code>Monad</code> 。</p>
<p>并不打算写 <code>Monad</code> 相关的教程 ╮(╯▽╰)╭</p>
<a id="more"></a>
<h2 id="柯里化">柯里化</h2><p>柯里化（<a href="https://en.wikipedia.org/wiki/Currying" target="_blank" rel="external">Currying</a>）是将多个参数的函数化成一系列单个参数函数组合的技术。</p>
<p>多参函数柯里化后传递和使用都更加灵活。</p>
<p>很多语言支持手动柯里化。这个过程很简单。比如在 JavaScript 中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对第一个参数柯里化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnePlus</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对第二个参数柯里化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusOne</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Haskell 中多参函数接受参数不全时，会自动柯里化，返回一个接受剩余参数的函数。这个过程称为偏应用（partial apply，部分应用）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; (+<span class="number">1</span>) <span class="number">2</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="comment">-- (+1) 是一个接受整形参数的函数，返回该参数 + 1 后的结果。</span></span><br><span class="line"><span class="type">Prelude</span>&gt; (<span class="number">1</span>+) <span class="number">2</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="comment">-- (1+) 是一个接受整形参数的函数，返回 1 + 该参数后的结果。</span></span><br></pre></td></tr></table></figure>
<p>两个函数的类型是这样的</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t (+<span class="number">1</span>)</span><br><span class="line">(+<span class="number">1</span>) :: <span class="type">Num</span> a =&gt; a -&gt; a</span><br><span class="line"><span class="type">Prelude</span>&gt; :t (<span class="number">1</span>+)</span><br><span class="line">(<span class="number">1</span>+) :: <span class="type">Num</span> a =&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<h2 id="类型签名">类型签名</h2><p>类型签名，或者说类型声明，用于声明函数的类型，如参数的类型，接受几个参数，返回类型等。</p>
<p>上面 <code>(+1)</code> 函数的类型是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t (+<span class="number">1</span>)</span><br><span class="line">(+<span class="number">1</span>) :: <span class="type">Num</span> a =&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<p>从左往右看，<code>(+1)</code> 说的是函数名。 <code>::</code> 类型说明操作符。可读为 「……的类型是」</p>
<p><code>Num a</code> 是一种类型约束。这部分很像变量声明，<code>Num</code> 指的是数字类型。 <code>a</code> 是变量名，可以任意取，习惯上为了<ruby>方便<rt>偷懒</rt></ruby>使用单个字母。所以 <code>Num a</code> 的意思是 <code>a</code> 的类型为 <code>Num</code> 。</p>
<p><code>=&gt;</code> 表示推出。用于分隔类型约束和函数签名的主体。</p>
<p><code>a</code> 表示接受一个变量 <code>a</code> 型的参数</p>
<p><code>-&gt;</code> 表示返回</p>
<p><code>a</code> 因为是在函数最后，所以就是返回一个 <code>a</code> 类型的参数。</p>
<h2 id="Functor">Functor</h2><p><code>Functor</code> 是可以应用 <code>fmap</code> 的类型。</p>
<p><code>fmap</code> 的类型是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t fmap</span><br><span class="line"><span class="title">fmap</span> :: <span class="type">Functor</span> f =&gt; (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure>
<p>这里的签名有括号。不影响结果。可以简单的认为把 <code>(a -&gt; b)</code> 视为接受 <code>a</code> 返回 <code>b</code> 的函数。</p>
<p>从签名中可以看出，<code>fmap</code> 接受一个函数 <code>a -&gt; b</code> ，在接受一个 <code>Funtor f</code> 类型的参数 a ，返回一个 <code>Funtor f</code> 类型的 <code>b</code></p>
<p>把签名改一下，改成<code>fmap :: Functor f =&gt; (a -&gt; b) -&gt; (f a -&gt; f b)</code></p>
<p>这样理解为接受一个函数返回另外一个参数和返回值都是 <code>Funtor f</code> 类型的函数</p>
<p>看具体的例子。比如 <code>Maybe</code> 是一个 <code>Funtor</code> 。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    fmap f (<span class="type">Just</span> x) = <span class="type">Just</span> (f x)  </span><br><span class="line">    fmap f <span class="type">Nothing</span> = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<p>并不是实现了 <code>fmap</code> 的实例都能称为 <code>Funtor</code> 。要想成为 <code>Funtor</code> 必须满足 Functor Law （函子律）。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fmap</span> id = id</span><br><span class="line"><span class="title">fmap</span> f . g = fmap f . fmap g</span><br></pre></td></tr></table></figure>
<p>第一条中 <code>id</code> 是一个返回自身的函数。也就是 <code>\x -&gt; x</code> 。<code>fmap id = id</code> 实际上是 <code>point-free</code> 写法，也就是无参写法。</p>
<p>写得完整一点是 <code>fmap id x = id x</code> 。意思是 <code>fmap</code> 应用返回自身的函数相当于直接应用返回自身的函数。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; fmap id (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- fmap id (Just 3) = Just (id 3) = Just 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; id (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- id (Just 3) = (\x -&gt; x) (Just 3) = Just 3</span></span><br></pre></td></tr></table></figure>
<p>第二条说的是分配律。也就是应用两个函数的组合等用于分别应用两个函数结果的组合。</p>
<p>写的完整一点是 <code>fmap f . g x = fmap f (fmap g x)</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; fmap ( (+<span class="number">1</span>) . (*<span class="number">2</span>) ) (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) (fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">3</span>))</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="Applicative_Functor">Applicative Functor</h2><p><code>Applicative Functor</code> 是可以应用 <code>pure</code> 和 apply (<code>&lt;*&gt;</code>) 的 <code>Funtor</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="container">(<span class="type">Functor</span> <span class="title">f</span>)</span> =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span>  </span><br><span class="line">    pure :: a -&gt; f a  </span><br><span class="line">    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure>
<p><code>pure</code> 的类型是 <code>a -&gt; f a</code> ，用于将类型 <code>a</code> 转化为 <code>Funtor f</code> 类型的函数。</p>
<p><code>&lt;*&gt;</code> 的类型是 <code>f (a -&gt; b) -&gt; f a -&gt; f b</code> ，用于取出 <code>Funtor f</code> 类型中函数 <code>a -&gt; b</code> ，再接受一个 <code>Funtor f</code> 类型的参数 a ，返回一个 <code>Funtor f</code>类型 b 。</p>
<p><code>Maybe</code> 是一个 <code>Applicative Funtor</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    pure = <span class="type">Just</span>  </span><br><span class="line">    <span class="type">Nothing</span> &lt;*&gt; _ = <span class="type">Nothing</span>  </span><br><span class="line">    (<span class="type">Just</span> f) &lt;*&gt; something = fmap f something</span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; pure <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure (+<span class="number">1</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> (+<span class="number">1</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">1</span> &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- pure (+) &lt;*&gt; Just 1 &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just (+) &lt;*&gt; Just 1 &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just (+1 3)</span></span><br><span class="line"><span class="comment">-- Just 4</span></span><br></pre></td></tr></table></figure>
<p>同样并不是实现了 <code>pure</code> 和 <code>&lt;*&gt;</code> 的类型就是 <code>Applicative Funtor</code> 。</p>
<p>要想成为 <code>Applicative funtor</code> 必须满足 Applicative Functor Law 。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pure</span> f &lt;*&gt; x = fmap f x</span><br><span class="line"><span class="title">pure</span> id &lt;*&gt; v = v</span><br><span class="line"><span class="title">pure</span> (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)</span><br><span class="line"><span class="title">pure</span> f &lt;*&gt; pure x = pure (f x)</span><br><span class="line"><span class="title">u</span> &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u</span><br></pre></td></tr></table></figure>
<p>在第一条 <code>pure f &lt;*&gt; x = fmap f x</code> 可以得到其他几条</p>
<p>对于 <code>Maybe</code> 来说是这样的</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; pure (+<span class="number">1</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- pure (+1) &lt;*&gt; 3 = Just (+1) &lt;*&gt; 3 = fmap (+1) 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure id &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- pure id &lt;*&gt; Just 3 = fmap id (Just 3)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap id (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; ((pure (.) &lt;*&gt; <span class="type">Just</span> (+<span class="number">1</span>)) &lt;*&gt; <span class="type">Just</span> (*<span class="number">2</span>)) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="comment">-- ((pure (.) &lt;*&gt; Just (+1)) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- ((Just (.) &lt;*&gt; Just (+1)) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((.) (+1)) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((+1) . )) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((+1 . ) (*2))) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((+1) . (*2))) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- fmap ((+1) . (*2)) (Just 3)</span></span><br><span class="line"><span class="comment">-- fmap (+1) (fmap (*2) (Just 3))</span></span><br><span class="line"><span class="comment">-- fmap (+1) (Just (*2) &lt;*&gt; (Just 3))</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; (Just (*2) &lt;*&gt; Just 3)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> (+<span class="number">1</span>) &lt;*&gt; (<span class="type">Just</span> (*<span class="number">2</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure (+<span class="number">1</span>) &lt;*&gt; pure <span class="number">3</span> :: <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- pure (+1) &lt;*&gt; pure 3</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just ((+1) 3)</span></span><br><span class="line"><span class="comment">-- pure ((+1) 3)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure ( (+<span class="number">1</span>) <span class="number">3</span>) :: <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> (+<span class="number">1</span>) &lt;*&gt; pure <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; pure 3</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just ((+1) (3))</span></span><br><span class="line"><span class="comment">-- Just (($ 3) (+1))</span></span><br><span class="line"><span class="comment">-- Just ($ 3) &lt;*&gt; Just (+1)</span></span><br><span class="line"><span class="comment">-- pure ($ 3) &lt;*&gt; Just (+1)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure ($ <span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> (+<span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h2 id="Monad">Monad</h2><p><code>Monad</code> 是可以应用 bind （<code>&gt;&gt;=</code> ）的 <code>Applicative Funtor</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Monad</span> m <span class="keyword">where</span></span>  </span><br><span class="line">    return :: a -&gt; m a  </span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure>
<p>这里的 <code>return</code> 相当于 <code>Applicative Funtor</code> 的 <code>pure</code> 。</p>
<p>不出所料的 <code>Maybe</code> 也是一个 <code>Monad</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    return = <span class="type">Just</span>  </span><br><span class="line">    <span class="type">Nothing</span> &gt;&gt;= f = <span class="type">Nothing</span></span><br><span class="line">    (<span class="type">Just</span> x) &gt;&gt;= f = f x</span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; return <span class="number">1</span> :: <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">1</span></span><br><span class="line"><span class="type">Prelude</span>&gt; return <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Nothing</span> &gt;&gt;= (\x -&gt; return (<span class="number">1</span>+x))</span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= (\x -&gt; return (<span class="number">1</span>+x))</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>同样并不是实现了 <code>&gt;&gt;=</code> 就是 <code>Monad</code> 。要想成为 <code>Monad</code> 必须满足 Monad Law （单子律）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">return</span> x &gt;&gt;= f = f x</span><br><span class="line"><span class="title">m</span> &gt;&gt;= return = m</span><br><span class="line">(m &gt;&gt;= f) &gt;&gt;= g = m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</span><br></pre></td></tr></table></figure>
<p>对于 <code>Maybe</code> 来说是这样的</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; return <span class="number">3</span> &gt;&gt;= (\x -&gt; return (x+<span class="number">1</span>)) ::<span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- return 3 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- Just 3 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x+1)) 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; (\x -&gt; return (x+<span class="number">1</span>)) <span class="number">3</span> ::<span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= return</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- Just 3 &gt;&gt;= return</span></span><br><span class="line"><span class="comment">-- return 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= (\x -&gt; return (x*<span class="number">2</span>)) &gt;&gt;= (\x -&gt; return (x+<span class="number">1</span>))</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="comment">-- Just 3 &gt;&gt;= (\x -&gt; return (x*2)) &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x*2)) 3 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- Just 6 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt;return (x+1)) 6</span></span><br><span class="line"><span class="comment">-- Just 7</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= (\x -&gt; return (x*<span class="number">2</span>) &gt;&gt;= (\x -&gt; return (x+<span class="number">1</span>)))</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x*2) &gt;&gt;= (\x -&gt; return (x+1))) 3</span></span><br><span class="line"><span class="comment">-- return (3*2) &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- Just 6 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x+1)) 6</span></span><br><span class="line"><span class="comment">-- return (6+1)</span></span><br><span class="line"><span class="comment">-- Just 7</span></span><br></pre></td></tr></table></figure>
<h2 id="最后">最后</h2><p>还有 <code>Comonad</code> 我懒得来写了（逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理一下 <a href="http://learnyouahaskell.com/chapters">《Learn You a Haskell for Great Good !》</a> 介绍的 <code>Funtor</code> ，<code>Applicative Funtor</code> 和 <code>Monad</code> 。</p>
<p>并不打算写 <code>Monad</code> 相关的教程 ╮(╯▽╰)╭</p>]]>
    
    </summary>
    
      <category term="Haskell" scheme="http://en.ors-sro.com/tags/Haskell/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在匿名函数中递归]]></title>
    <link href="http://en.ors-sro.com/Recursive-lambda/"/>
    <id>http://en.ors-sro.com/Recursive-lambda/</id>
    <published>2016-11-20T06:13:59.000Z</published>
    <updated>2016-11-20T09:39:17.610Z</updated>
    <content type="html"><![CDATA[<p>匿名函数也就是不需要取名的函数。函数递归指的是函数通过引用自己的名字调用自身。匿名函数没有名字怎样才能递归呢？<br><a id="more"></a></p>
<h2 id="匿名函数">匿名函数</h2><p>匿名函数（lambda，$\lambda$），作为函数式编程的基本元素，已经被原来越多的语言支持。</p>
<p>比如 <strong>C#</strong> 中是这样编写匿名函数的</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = x =&gt; x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>JavaScript</strong> 中是这样编写匿名函数的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匿名递归">匿名递归</h2><p>最典型的递归函数是阶乘函数。<br>$$<br>f(n) =<br>\begin{cases}<br>1, &amp; n \le 1 \ n*f(n-1),&amp; n \gt 1<br>\end{cases}<br>$$<br>翻译成 JavaScript </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * f(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个递归，但不是一个真正意义上的匿名递归函数。因为函数体中的 <code>f(n-1)</code> 引用了自身的名字。</p>
<p>通常递归函数需要引用自身的名字来调用自身达到递归的效果。</p>
<p>匿名函数没有名字，没办法这么做。</p>
<p>这么想想递归匿名函数看似是不可能的。</p>
<p>但是是可以做到的。</p>
<p>看下面的这个函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> g(g);</span><br><span class="line">	&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> f(h(h))(x);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">self</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * self(n - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>测试调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> g(g);</span><br><span class="line">	&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> f(h(h))(x);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">self</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * self(n - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> g(g);</span><br><span class="line">	&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> f(h(h))(x);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">self</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * self(n - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure>
<p>这个函数就是阶乘函数的匿名递归版。里面用到了 <strong>Y 组合子</strong> 。</p>
<h2 id="推导过程">推导过程</h2><h2 id="来龙去脉">来龙去脉</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>匿名函数也就是不需要取名的函数。函数递归指的是函数通过引用自己的名字调用自身。匿名函数没有名字怎样才能递归呢？<br>]]>
    
    </summary>
    
      <category term="lambda" scheme="http://en.ors-sro.com/tags/lambda/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SICP 1.1 编程的要素]]></title>
    <link href="http://en.ors-sro.com/SICP-1-1-The-Elements-of-Programming-exercise/"/>
    <id>http://en.ors-sro.com/SICP-1-1-The-Elements-of-Programming-exercise/</id>
    <published>2016-11-12T00:59:55.000Z</published>
    <updated>2016-11-12T02:28:58.015Z</updated>
    <content type="html"><![CDATA[<p>开新坑啦！</p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>很早之前就已经接触 《计算机程序的构造和解释》 （Structure and Interpretation of Computer Programs，SICP），也曾经大致看完，不过只是单纯的看，没有做习题。所以过后很快就忘了。这次开坑目的是希望能一字一句仔细阅读，完成课后练习，加深对书中概念的理解。</p>
<p>目前暂定为一个小节如 <strong>1.1</strong> 的笔记和所有习题解答为一篇文章。因为是自己做的，所以不保证答案正确。</p>
<p>目测深坑，可能弃坑，请勿尾随。</p>
<h2 id="笔记">笔记</h2><h3 id="三种方式">三种方式</h3><ol>
<li>基本表达式，用于展现语言所关注的最简单的元素。</li>
<li>组合的方式，用于组合最基本的元素。</li>
<li>抽象的方式，用于组合和操作命名的元素。</li>
</ol>
<p>这里说的比较抽象。个人理解是第一个基本表达式就是程序的保留字，操作符和内置函数等，如 <code>if</code> <code>while</code> <code>int</code> <code>=</code> 。第二个组合的方式说的是用第一个基本表达式之间的组合。比如 <code>if</code> 和 <code>while</code> 组合可以实现绝大部分的逻辑。第三个抽象的方式就是第二个组合之后的结果，可以将其命名，形成一个个单元，比如函数。这样编写函数的过程本质就是抽象的过程。</p>
<h3 id="数据和过程">数据和过程</h3><p>数据和过程并不是那么严格区分的。在面向过程式编程中，通常数据和过程比较容易区分。程序的输入可以算作一种数据。函数是一种很典型的过程。例如计算阶乘的程序，接收一个 <code>n</code> 作为输入，<code>n</code> 被视为数据。之后计算出 <code>n</code> 的阶乘，返回结果。计算的步骤就是一个过程。在面向对象中也差不多，只不过数据变成了属性，过程变成了成员函数。函数的参数是一种数据，但如果把过程当作参数传递，那么传递的是过程还是数据呢？也就是说当传递函数指针（或者回调）的时候，数据和过程的界限就不是那么清晰了。在 <code>Lisp</code> 系列的语言中，所有的程序都是 S 表达式，也就是列表。过程是一个列表，数据也是一个列表。所以过程和数据在语言看来是一样的。因此在 <code>Lisp</code> 系列的语言中，编写操作数据的过程和编写操作过程的过程难度差不多。元编程，或者说宏，就是自然而然的思想。</p>
<h3 id="表达式">表达式</h3><p>书中约定了教学语言是 <code>Lisp</code> 方言 <code>Scheme</code> 。语言所用的表达式是 <a href="https://en.wikipedia.org/wiki/S-expression" target="_blank" rel="external">S 表达式</a>。S 表达式使用<a href="https://en.wikipedia.org/wiki/Polish_notation" target="_blank" rel="external">前缀表示法</a>，操作符放在操作数前面。例如 <code>1 + 2</code> 是这么表示</p>
<table>
<thead>
<tr>
<th>表示方式</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>前缀表达式</td>
<td>+ 1 2</td>
</tr>
<tr>
<td>中缀表达式</td>
<td>1 + 2</td>
</tr>
<tr>
<td>后缀表达式</td>
<td>1 2 +</td>
</tr>
</tbody>
</table>
<p>为什么不用更常用的中缀表达式呢。因为中缀表达式的计算规则有两条，一是先计算优先级大的，二是从左往右计算。你也许听过那个很烂熟的哏：</p>
<p>「一加二乘三等于多少？」</p>
<p>「九啊」</p>
<p>「你个傻〇！是七！」</p>
<p>这个很无聊的哏中展现了 <code>(1 + 2) * 3 = 9</code> ， <code>1 + 2 * 3 = 7</code> 。也就是说如果想要改变计算的顺序，就必须使用优先级更高的括号操作符括住表达式。</p>
<p>如果是使用前缀表达式就只需要一条规则，从左往右计算。没有优先级的说法，自然也不需要有括号。比如 <code>1 + 2 * 3</code> 的前缀表达式是 <code>+ 1 * 2 3</code> 。</p>
<p>从左往右扫描，看到 <code>+ 1</code> 知道要用 1 和其他数字相加，这个数字是多少呢？再看到 <code>* 2 3</code>，原来这个数字是 <code>* 2 3</code> ，也就是 6，最后就是 <code>+ 1 6</code> 也就是 7 。有一点递归返回的感觉。</p>
<p>如果要计算 <code>(1 + 2) * 3</code> ，那么相应的前缀表达式是 <code>* + 1 2 3</code> 。</p>
<p>计算过程也很简单</p>
<p><code>* + 1 2 3</code> ⇒ <code>* 3 3</code> ⇒ 9</p>
<p>那为什么不用<a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="external">后缀表达式</a>呢？</p>
<p>S 表达式为什么不用不了解。个人觉得后缀表达式真的很丧心病狂，非常反直觉。例如 <code>1 2 + 3 *</code> 是怎么计算的呢？</p>
<p>它不是 <code>1 + 2 * 3</code> ，也不是从右往左计算的 <code>(3 + 2) * 1</code> ，而是 <code>(1 + 2) * 3</code> 。</p>
<p>虽说不用中缀表达式可以节省括号，但是 S 表达式里面全是括号啊！摔！</p>
<p>不使用中缀表达式另外一个优点是可以天然地支持多参数。</p>
<p>例如 1 + 2 + 3 的 S 表达式是 <code>(+ (+ 1 2) 3)</code> 。可以写成 <code>(+ 1 2 3)</code> 。</p>
<p>因为中缀表达式操作符两边要有操作数，所以不能很方便的表达多参数的情况。</p>
<h3 id="好好写代码">好好写代码</h3><p>S 表达式无脑嵌套会非常辣眼睛。比如看到 <code>(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))</code> 会一脸懵 X，写成这样就会好很多</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">5</span>)</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">10</span> <span class="number">7</span>)</span></span><br><span class="line">      <span class="number">6</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>也就是操作符在前，操作数垂直对齐。</p>
<h3 id="变量绑定与环境">变量绑定与环境</h3><p><code>Scheme</code> 使用 <code>define</code> 绑定全局变量。如果不允许声明和绑定变量，那就只能用递归来写程序了，也就是「纯函数式」编程（大雾）。</p>
<p>出现在函数参数列表中的变量称为绑定变量。如 <code>(define (square x) (* x x))</code> 中的 <code>x</code> 称为绑定变量。</p>
<p>没有被绑定的变量称为自由变量。如 <code>(define (cube x) (* (square x) x))</code> 中的 <code>square</code> 是自由变量。因为参数列表 <code>cube x</code> 中只有 <code>x</code> ，没有 <code>square</code> 。这意味着 <code>x</code> 的值由调用函数 <code>cube</code> 传入的参数决定，与 <code>cube</code> 死死的绑在了一起。而 <code>square</code> 的值则需要去<strong>上下文环境</strong>查找。</p>
<p>上下文环境可以简单的理解为储存变量的地方。既然有储存肯定有读取，读取的时候按规则区分为<strong>词法作用域</strong>和<strong>动态作用域</strong>。</p>
<p>词法作用域，也称为动态作用域，是大部分语言常用的查找规则。</p>
<p>动态作用域，有些反直觉，早期语言使用的规则。因为环境创建的时候什么事都不用干就是天然的动态作用域。熟悉 <code>Javascript</code> 的都知道 <code>this</code>关键字吧。这个家伙有很多的异常表现就是因为它是动态作用域。还好 <code>Scheme</code> 出现解决了动态作用域的问题。</p>
<p>词法作用域和动态作用域的区别可以用<a href="http://zhihu.com/question/20032419/answer/44059188" target="_blank" rel="external">两句话解释清楚</a>。</p>
<p>替换绑定的变量不影响结果。也就是</p>
<p><code>(define (square x) (* x x))</code> 和 <code>(define (square y) (* y y))</code> 结果是一样的。其实这是 $\alpha$ 变换（大雾）。</p>
<p>函数的定义也是一个变量绑定的过程。在 <code>Scheme</code> 中函数默认返回最后一个计算结果，不需要显式地 <code>return</code> 。</p>
<p>还有一个语法细节，定义变量是 <code>(define a 1)</code> ，定义函数是 <code>(define  (square x) (* x x))</code> 。</p>
<p>语法看似不一致，其实是统一的。可以把 <code>define</code> 看作 <code>=</code> 。式子可以这么理解。</p>
<p><code>(define a 1)</code> ⇒ <code>a = 1</code></p>
<p><code>(define (square x) (* x x))</code> ⇒ <code>(square x) = (* x x)</code></p>
<h3 id="求值规则">求值规则</h3><blockquote>
<p>To evaluate a combination, do the following:</p>
<ol>
<li>Evaluate the subexpressions of the combination.</li>
<li>Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)</li>
</ol>
</blockquote>
<p>求值表达式，按以下规则进行</p>
<ol>
<li>求值子表达式</li>
<li>应用其操作符于该子表达式</li>
</ol>
<p>所以这是一个嵌套的求值过程。嵌套结构用树结构很容易表示。如果用树来表示，那么求值的时候相当于树的遍历。</p>
<p>这里没有似乎没有说清楚参数求值是从左往右还是从右往左。</p>
<p>这种求值方式是传值调用（Call by value），这里说的传值调用强调的是求值的时机。</p>
<p>传值调用，也就是在函数调用前，求出每个参数的值。例如平方函数 <code>(define (square x) (* x x))</code> 在接收参数 5 的调用时是这么求值的。</p>
<p><code>(square 5)</code> ⇒ <code>(* 5 5)</code> ⇒ 25</p>
<p>在接收参数为 <code>(square 2)</code> 时是这么求值的</p>
<p><code>(square (square 2))</code> ⇒ <code>(square (* 2 2))</code> ⇒ <code>(square 4)</code> ⇒ <code>(* 4 4)</code> ⇒ 16</p>
<p>传值调用在书中被称为 <strong>Applicative-order</strong> 。</p>
<p>还有一种求值方式是传名调用（Call by name），在书中被称为 <strong>Normal-order</strong> 。</p>
<p>简单地说是把所有表达式中命名的变量求值完成后，再对整个表达式求值。</p>
<p>比如 <code>(square (square (+ 1 2)))</code> 按传名调用是这样</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">3</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">9</span> <span class="number">9</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>
<p>如果是传值调用是这样</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">square</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="number">9</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">9</span> <span class="number">9</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>
<p>在这里两种方式最后的结果一致。但是在参数求值有副作用或者有求值短路等现象出现时，结果就会不一样。习题 1.5 会给出这样的情况。</p>
<h3 id="递归与循环">递归与循环</h3><p>平方根函数 <code>sqrt-iter</code> 在最后调用了<code>sqrt-iter</code>。也就是自己调用自己。这种方式称为递归。</p>
<p>与递归对应的是迭代。实际上递归更符合人类思维，迭代更符合计算机思维。</p>
<p>递归很容易给人一种计算效率低的印象。但并不是所有的递归都是这样。</p>
<p>像平方根函数这种在函数最后一句只调用自身的递归称为尾递归。</p>
<p>普通的递归在计算到出口后会将结果一层层向上返回，所以需要在堆栈中记录返回地址等相关信息，层数一多很可能就爆栈。</p>
<p>而尾递归因为递归放在尾部，返回后也没有后续可执行内容（continuation），所以可以直接抛弃之前的调用信息。也就是尾递归通过抛弃之前的调用信息而防止爆栈。常见的现代编译器都会将尾递归优化为循环。所以尾递归的效率并不低。</p>
<p>然而并不是所有的递归都能转化为循环。</p>
<h3 id="封装与面向对象">封装与面向对象</h3><p><code>Scheme</code> 允许在函数定义中定义函数，所以通常会看到一个函数，内部定义不少小函数和常量，之后调用这些小函数。</p>
<p>这样把数据和过程包装在一个函数的手段称为封装。</p>
<p>说到封装，很自然就想到了面向对象。毕竟面向对象的三大特性是封装，继承，多态。</p>
<p>说到对象就会想到 <code>class</code>，实际上面向对象跟 <code>class</code> 一点关系都没有。</p>
<p><code>class</code>是实现面向对象的一种方式但不是唯一方式。 原型链也是一种实现面向对象方式。</p>
<p>现在的面向对象跟 Alan Kay 的面向对象已经不是同一个东西了。</p>
<p>Alan Kay 的面向对象强调封装与消息发送。他认为每一个对象都要有一个 IP 。</p>
<p>如果按照 Alan Kay 的观点大家的面向对象都跑偏了（逃</p>
<h2 id="习题">习题</h2><h3 id="习题_1-1">习题 1.1</h3><blockquote>
<p><strong>Exercise 1.1.</strong>  Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">9</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">6</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">4</span> <span class="number">6</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> a <span class="number">3</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> b <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">=</span></span> a b)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span>)</span></span><br><span class="line">    b</span><br><span class="line">    a)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">4</span>)</span> <span class="number">6</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span> <span class="number">7</span> a)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">25</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> b a)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span> a)</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> a b)</span> b)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">-1</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这道题所有表达式都不存在命名的函数，所以直接求值，不用考虑求值方式。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="comment">;; 10 规则 1.1.3 第一条：字面量的值为它们相应的值</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 12 规则 1.1.3 第二条：内置操作符为它们相应的操作符</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">9</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 8 是 9 - 1 不是 1 - 9 。参考前缀表达式定义</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">6</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 6/2 = 3</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">4</span> <span class="number">6</span>)</span>)</span></span><br><span class="line"><span class="comment">;; (+ 8 (- 2)) = 6</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> a <span class="number">3</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> b <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 注意此时 b 已经被赋值为 a + 1 = 3 + 1 = 4</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span></span><br><span class="line"><span class="comment">;;规则 1.1.3 第三条：命名的符号值从环境中获取</span></span><br><span class="line"><span class="comment">;;这里使用了参数从左往右求值的顺序</span></span><br><span class="line"><span class="comment">;;(+ 3 b (* a b))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 (* a b))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 (* 3 b))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 (* 3 4))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 12)</span></span><br><span class="line"><span class="comment">;;19</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">=</span></span> a b)</span></span><br><span class="line"><span class="comment">;;(= 3 b)</span></span><br><span class="line"><span class="comment">;;(= 3 4)</span></span><br><span class="line"><span class="comment">;; #f Scheme 用 #t 和 #f 表示 true 和 false。在脚注 17 中有提到</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span>)</span></span><br><span class="line">    b</span><br><span class="line">    a)</span></span><br><span class="line"><span class="comment">;;(if (and (&gt; 4 3) (&lt; b (* a b))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; b (* a b))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; 4 (* a b))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; 4 (* 3 4))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; 4 12)) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t #t) b a)</span></span><br><span class="line"><span class="comment">;;b</span></span><br><span class="line"><span class="comment">;;4</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">4</span>)</span> <span class="number">6</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span> <span class="number">7</span> a)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">25</span>)</span>)</span></span><br><span class="line"><span class="comment">;;(cond ((= 3 4) 6) ((= b 4) (+ 6 7 a)) (else 25))</span></span><br><span class="line"><span class="comment">;;(cond (#f 6) ((= b 4) (+ 6 7 a)) (else 25))</span></span><br><span class="line"><span class="comment">;;(cond (#f 6) (#t (+ 6 7 a)) (else 25))</span></span><br><span class="line"><span class="comment">;;(+ 6 7 a)</span></span><br><span class="line"><span class="comment">;;(+ 6 7 3)</span></span><br><span class="line"><span class="comment">;;16</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> b a)</span>)</span></span><br><span class="line"><span class="comment">;;(+ 2 (if (&gt; 4 a) b a))</span></span><br><span class="line"><span class="comment">;;(+ 2 (if (&gt; 4 3) b a))</span></span><br><span class="line"><span class="comment">;;(+ 2 (if #t b a))</span></span><br><span class="line"><span class="comment">;;(+ 2 b)</span></span><br><span class="line"><span class="comment">;;(+ 2 4)</span></span><br><span class="line"><span class="comment">;;6</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span> a)</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> a b)</span> b)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">-1</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="comment">;;(* (cond ((&gt; 3 4) a) ((&lt; a b) b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) ((&lt; a b) b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) ((&lt; 3 4) b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) (#t b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) (#t b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* b (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* 4 (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* 4 (+ 3 1))</span></span><br><span class="line"><span class="comment">;;(* 4 4)</span></span><br><span class="line"><span class="comment">;;16</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-2">习题 1.2</h3><blockquote>
<p><strong>Exercise 1.2.</strong>  Translate the following expression into prefix form<br>$$<br>\frac {5+4+(2-(3-(6+ \frac 4 3)))} {3(6-2)(2-7)}<br>$$</p>
</blockquote>
<p>先把分子和分母转成前缀表达式，利用前缀表达式<a href="#表达式">支持多参数的特性</a>简化式子，再用 <code>(/ 分子 分母)</code> 连起来即可。</p>
<p><strong>这里说明中缀表达式转前缀表达式的过程</strong></p>
<p>分子</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> </span><br><span class="line">   <span class="number">4</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">3</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span></span><br><span class="line">            <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">4</span></span><br><span class="line">               <span class="number">3</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>分母</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">6</span></span><br><span class="line">      <span class="number">2</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span></span><br><span class="line">      <span class="number">7</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>所以答案是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">4</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">3</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">4</span> <span class="number">3</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">6</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span> <span class="number">7</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-3">习题 1.3</h3><blockquote>
<p><strong>Exercise 1.3.</strong>  Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.</p>
</blockquote>
<p>从动词可以判断有多少个函数</p>
<ol>
<li>a procedure that take … return ..</li>
<li>sum of …</li>
<li>squares…</li>
</ol>
<p>从下往上一个个写回去，<code>square</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br></pre></td></tr></table></figure>
<p><code>sum</code>求和</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span>)</span></span><br></pre></td></tr></table></figure>
<p>接收三个参数返回最大和次大的两个数。因为加法满足交换律 <code>a + b = b + a</code> 所以只需要确定出最小的数，把比较大的两个数求平方和即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum-larger-square</span> a b c)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b c)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> a)</span> <span class="list">(<span class="keyword">square</span> b)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> a)</span> <span class="list">(<span class="keyword">square</span> c)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a c)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> b)</span> <span class="list">(<span class="keyword">square</span> a)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> b)</span> <span class="list">(<span class="keyword">square</span> c)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 13</span></span><br><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 61</span></span><br><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span>)</span></span><br><span class="line"><span class="comment">;; 145</span></span><br><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-4">习题 1.4</h3><blockquote>
<p><strong>Exercise 1.4.</strong>  Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">a-plus-abs-b</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b <span class="number">0</span>)</span> + -)</span> a b)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>描述函数行为。按语句翻译即可。首先看到函数定义 <code>(define (a-plus-abs-b a b) (...)</code> 这是一个接收两个参数的函数，再看函数体 <code>((if (&gt; b 0) + -) a b)</code> 如果 <code>b</code> 大于 0 则结果为 <code>+</code> 操作符，否则为 <code>-</code> 操作符。然后将该操作符应用到参数 <code>a</code> <code>b</code> 上。所以答案是</p>
<p><code>a</code> 加上 <code>b</code> 的绝对值。 （虽然函数名字已经提示得够明显了。）</p>
<p>这道题展示了过程（函数）是可以作为结果返回的。根据<code>b</code> 的正负，返回<code>+</code> 或 <code>-</code> 。这种做法在 <code>Scheme</code> 中很常见。因为过程（函数）和数据在语言看来没有区别。既然可以返回数字（典型的数据），也自然可以返回函数（典型的过程）。</p>
<h3 id="习题_1-5">习题 1.5</h3><blockquote>
<p><strong>Exercise 1.5.</strong>  Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">p</span>)</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">test</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">0</span>)</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      y)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Then he evaluates the expression<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)</p>
</blockquote>
<p>先回顾一下概念</p>
<p><strong>Applicative-order</strong>: evaluate the arguments and then apply. 求值参数并应用。</p>
<p><strong>Normal-order</strong>: fully expand and then reduce. 完全展开后规约。</p>
<p>先按 applicative-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; applicative-order</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 挨个求值参数 0 (p)</span></span><br><span class="line"><span class="comment">;; 求值 0 结果为 0 1.1.3 第一条：字面量的值为它们相应的值</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求值 (p) 规则 1.1.3 第三条：命名的符号值从环境中获取</span></span><br><span class="line"><span class="comment">;; 环境中 (define (p) (p))</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="list">(<span class="keyword">p</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求值后又出现 p ，再次对 p 求值</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="list">(<span class="list">(<span class="keyword">p</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 递归，没有办法获得具体的值。无限循环</span></span><br></pre></td></tr></table></figure>
<p>按 normal-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; normal-order</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 先完全展开定义的函数，在规约求值</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">0</span> <span class="number">0</span>)</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="literal">#t</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 题目中提到 if 语句中的条件判断优先执行，结果只执行相应的分支</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>所以答案是按 applicative-order 执行会无限循环，按 normal-order 执行结果是 0 。</p>
<h3 id="习题_1-6">习题 1.6</h3><blockquote>
<p><strong>Exercise 1.6.</strong>  Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. ``Why can’t I just define it as an ordinary procedure in terms of cond?’’ she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">new-if</span> predicate then-clause else-clause)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="keyword">predicate</span> then-clause)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> else-clause)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Eva demonstrates the program for Alyssa:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(new-if (= 2 3) 0 5)</span><br><span class="line">*5*</span><br><span class="line">(new-if (= 1 1) 0 5)</span><br><span class="line">*0*</span><br></pre></td></tr></table></figure>
<p>Delighted, Alyssa uses new-if to rewrite the square-root program:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sqrt-iter</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">          guess</span><br><span class="line">          <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">                     x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>What happens when Alyssa attempts to use this to compute square roots? Explain.</p>
</blockquote>
<p>按默认的 applicative-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sqrt-iter</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 根据 applicative-order 先求参数的值</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword">good-enough?</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求 (good-enough 1 2) 的值</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">square</span> <span class="number">1</span>)</span> <span class="number">2</span>)</span> <span class="number">0.001</span>)</span>)</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 2 - 1 &gt; 0.001 所以结果是 #f</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;;接着求 (sqrt-iter (improve 1 2)2)</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">average</span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">2</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;;1 和 2 的平均值为 1.5</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="number">1.5</span> </span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求值 (sqrt-iter 1.5 2)</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword">good-enough?</span> <span class="number">1.5</span> <span class="number">2</span>)</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">                <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1.5</span> <span class="number">2</span>)</span></span><br><span class="line">                           <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 又回到开始的地方。无穷无尽的求值</span></span><br></pre></td></tr></table></figure>
<p>所以答案是会一直递归下去。无穷无尽。</p>
<p>解决方法是使用<strong>宏</strong>，宏在求值会先展开后求参数的值。这个后面章节应该会讲。</p>
<h3 id="习题_1-7">习题 1.7</h3><blockquote>
<p><strong>Exercise 1.7.</strong>  The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?</p>
</blockquote>
<p>这道题有两个问题。</p>
<p>第一个问题是解释为什么遇到特别小的数和特别大的数时候 <code>good-enough</code> 失效？第二个问题是请设计一个 <code>good-enough</code></p>
<p>先来看第一个问题。</p>
<p>在遇到特别小的数如0.0001的时候</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">0.0004</span>)</span></span><br><span class="line"><span class="comment">;;(guess next-guess)</span></span><br><span class="line"><span class="comment">;;(1 0.5002)</span></span><br><span class="line"><span class="comment">;;(0.5002 0.2504998400639744)</span></span><br><span class="line"><span class="comment">;;(0.2504998400639744 0.12604832373535454)</span></span><br><span class="line"><span class="comment">;;(0.12604832373535454 0.06461085492374607)</span></span><br><span class="line"><span class="comment">;;(0.06461085492374607 0.0354008825558513)</span></span><br><span class="line"><span class="comment">;;(0.0354008825558513 0.023350017942701275)</span></span><br><span class="line"><span class="comment">;;0.0354008825558513</span></span><br></pre></td></tr></table></figure>
<p>正确结果应该是 0.01。那为什么结果是 0.03 呢。</p>
<p>因为在 <code>(if good-enough? guess x)</code> 中 $|0.035^2 - 0.0004| = 0.0008 &lt; 0.001$ </p>
<p>也就是误差范围太大了。</p>
<p>在遇到特别大的数$10^{50}$的时候</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">1000000000000000000000000000000000000000000000000000</span>)</span></span><br><span class="line"><span class="comment">;;(guess next-guess)</span></span><br><span class="line"><span class="comment">;;(1 5e+50)</span></span><br><span class="line"><span class="comment">;;(5e+50 2.5e+50)</span></span><br><span class="line"><span class="comment">;;(2.5e+50 1.25e+50)</span></span><br><span class="line"><span class="comment">;;(1.25e+50 6.25e+49)</span></span><br><span class="line"><span class="comment">;;(6.25e+49 3.125e+49)</span></span><br><span class="line"><span class="comment">;;......</span></span><br><span class="line"><span class="comment">;;(8.275835485684287e+26 4.143959428915591e+26)</span></span><br><span class="line"><span class="comment">;;(4.143959428915591e+26 2.084045469651032e+26)</span></span><br><span class="line"><span class="comment">;;(2.084045469651032e+26 1.066014533818449e+26)</span></span><br><span class="line"><span class="comment">;;(1.066014533818449e+26 5.799109426226321e+25)</span></span><br><span class="line"><span class="comment">;;(5.799109426226321e+25 3.7617560672361973e+25)</span></span><br><span class="line"><span class="comment">;;(3.7617560672361973e+25 3.2100444948749963e+25)</span></span><br><span class="line"><span class="comment">;;(3.2100444948749963e+25 3.1626330556312044e+25)</span></span><br><span class="line"><span class="comment">;;(3.1626330556312044e+25 3.1622776801368567e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776801368567e+25 3.1622776601683795e+25) </span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br></pre></td></tr></table></figure>
<p>可以发现某个时刻开始猜测的下一个更好的值和原来是同一个值。</p>
<p>这是因为如果要精确的话应该在3.1622…3795e25 的 …3795继续精确下去。但是浮点数的精确度不够用了，不能再表示更长的小数了。</p>
<p>所以这就是出错的原因。</p>
<p>接下来第二个问题是怎么改进。题目中已经提示观察近似值和下一个近似值之间的变化，当变化足够小的时候停止。</p>
<p>变化足够小可以考虑用差来表示，但是考虑到遇到特别小的数时会出现问题。</p>
<p>所以使用比值判断是否变化足够小，也就是只需要改进 <code>good-enough?</code> 即可</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">1</span> </span><br><span class="line">            <span class="list">(<span class="keyword"><span class="built_in">/</span></span> guess <span class="list">(<span class="keyword">improve</span> guess x)</span>)</span>)</span>)</span> </span><br><span class="line">    <span class="number">0.001</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>判断近似值的比值是否足够靠近 1 。也就是两个近似值是否足够接近。</p>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;;(1 2.5)</span></span><br><span class="line"><span class="comment">;;(2.5 2.05)</span></span><br><span class="line"><span class="comment">;;(2.05 2.000609756097561)</span></span><br><span class="line"><span class="comment">;;(2.000609756097561 2.0000000929222947)</span></span><br><span class="line"><span class="comment">;;2.000609756097561</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">0.0004</span>)</span></span><br><span class="line"><span class="comment">;;(1 0.5002)</span></span><br><span class="line"><span class="comment">;;(0.5002 0.2504998400639744)</span></span><br><span class="line"><span class="comment">;;(0.2504998400639744 0.12604832373535454)</span></span><br><span class="line"><span class="comment">;;(0.12604832373535454 0.06461085492374607)</span></span><br><span class="line"><span class="comment">;;(0.06461085492374607 0.0354008825558513)</span></span><br><span class="line"><span class="comment">;;(0.0354008825558513 0.023350017942701275)</span></span><br><span class="line"><span class="comment">;;(0.023350017942701275 0.02024031288207058)</span></span><br><span class="line"><span class="comment">;;(0.02024031288207058 0.020001426615330147)</span></span><br><span class="line"><span class="comment">;;(0.020001426615330147 0.020000000050877154)</span></span><br><span class="line"><span class="comment">;;0.020001426615330147</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">1000000000000000000000000000000000000000000000000000</span>)</span></span><br><span class="line"><span class="comment">;;(1 5e+50)</span></span><br><span class="line"><span class="comment">;;(5e+50 2.5e+50)</span></span><br><span class="line"><span class="comment">;;(2.5e+50 1.25e+50)</span></span><br><span class="line"><span class="comment">;;(1.25e+50 6.25e+49)</span></span><br><span class="line"><span class="comment">;;(6.25e+49 3.125e+49)</span></span><br><span class="line"><span class="comment">;;(3.125e+49 1.5625e+49)</span></span><br><span class="line"><span class="comment">;;(1.5625e+49 7.8125e+48)</span></span><br><span class="line"><span class="comment">;;(7.8125e+48 3.90625e+48)</span></span><br><span class="line"><span class="comment">;;(3.90625e+48 1.953125e+48)</span></span><br><span class="line"><span class="comment">;;(1.953125e+48 9.765625e+47)</span></span><br><span class="line"><span class="comment">;;......</span></span><br><span class="line"><span class="comment">;;(8.275835485684287e+26 4.143959428915591e+26)</span></span><br><span class="line"><span class="comment">;;(4.143959428915591e+26 2.084045469651032e+26)</span></span><br><span class="line"><span class="comment">;;(2.084045469651032e+26 1.066014533818449e+26)</span></span><br><span class="line"><span class="comment">;;(1.066014533818449e+26 5.799109426226321e+25)</span></span><br><span class="line"><span class="comment">;;(5.799109426226321e+25 3.7617560672361973e+25)</span></span><br><span class="line"><span class="comment">;;(3.7617560672361973e+25 3.2100444948749963e+25)</span></span><br><span class="line"><span class="comment">;;(3.2100444948749963e+25 3.1626330556312044e+25)</span></span><br><span class="line"><span class="comment">;;(3.1626330556312044e+25 3.1622776801368567e+25)</span></span><br><span class="line"><span class="comment">;;3.1626330556312044e+25</span></span><br></pre></td></tr></table></figure>
<p>程序没有卡死，也能求出近似值。现在程序还有问题吗？有的，很明显是 <code>(sqrt 0)</code>，千万不要轻易尝试后果很严重（认真脸）</p>
<h3 id="习题_1-8">习题 1.8</h3><blockquote>
<p><strong>Exercise 1.8.</strong>  Newton’s method for cube roots is based on the fact that if <em>y</em> is an approximation to the cube root of <em>x</em>, then a better approximation is given by the value<br>$$<br>\frac{x/y^2 + 2y}{3}<br>$$<br>Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.4" target="_blank" rel="external">1.3.4</a> we will see how to implement Newton’s method in general as an abstraction of these square-root and cube-root procedures.)</p>
</blockquote>
<p>题目中已经给出从一个近似值得到更好的近似值的式子。仿造 <code>sqrt</code> 函数，修改 <code>improve</code> 即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">square</span> x)</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.0001</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">cube</span> guess)</span> x)</span>)</span> tolerance)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="list">(<span class="keyword">square</span> guess)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> guess)</span>)</span></span><br><span class="line">     <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root-iter</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">      guess</span><br><span class="line">      <span class="list">(<span class="keyword">cube-root-iter</span> <span class="list">(<span class="keyword">improve</span> guess x)</span> x)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cube-root-iter</span> <span class="number">1.0</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">cube-root</span> <span class="number">8</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">cube-root</span> <span class="number">27</span>)</span></span><br><span class="line"><span class="comment">;; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">cube-root</span> <span class="list">(<span class="keyword">cube</span> <span class="number">27</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 27</span></span><br></pre></td></tr></table></figure>
<p>也可以写成封装的形式</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">square</span> x)</span> x)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.0001</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">cube</span> guess)</span> x)</span>)</span> tolerance)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="list">(<span class="keyword">square</span> guess)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> guess)</span>)</span></span><br><span class="line">       <span class="number">3</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root-iter</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess)</span></span><br><span class="line">        guess</span><br><span class="line">        <span class="list">(<span class="keyword">cube-root-iter</span> <span class="list">(<span class="keyword">improve</span> guess)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cube-root-iter</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>注意到第二行 <code>(define (square x) (* x x))</code> 中的 <code>x</code> 产生了变量覆盖（shadowing），所以<code>(* x x)</code> 的 <code>x</code>其实是 <code>square</code> 的 <code>x</code> 而不是 <code>cube-root</code> 的 <code>x</code> 。编译器会正确区分，不会混淆。</p>
<h2 id="总结">总结</h2><p>本小节讲述了编程的几个要素。一是语言所关注的最基本元素，例如数字，算数操作符，变量定义等。二是元素的组合。如求平方，求平方根等都是最基本元素的组合。最后是抽象，阐述了一个问题是如何拆分成几个小问题，又是如何用基本元素组合解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开新坑啦！</p>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://en.ors-sro.com/tags/SICP/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>