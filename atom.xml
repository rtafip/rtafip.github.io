<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[拖鞋党的拖鞋摊]]></title>
  <subtitle><![CDATA[写一些有的没的]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://en.ors-sro.com//"/>
  <updated>2016-12-25T09:56:34.762Z</updated>
  <id>http://en.ors-sro.com//</id>
  
  <author>
    <name><![CDATA[rtafip]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[求值策略]]></title>
    <link href="http://en.ors-sro.com/Evaluation-strategy/"/>
    <id>http://en.ors-sro.com/Evaluation-strategy/</id>
    <published>2016-12-25T08:04:45.000Z</published>
    <updated>2016-12-25T09:56:34.762Z</updated>
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>有多少人写过这样的交换程序，然后发现调用后并不能交换。老师告诉我们因为这是按值调用。</p>
<p>按值调用是求值策略中的一种。</p>
<p><a href="https://en.wikipedia.org/wiki/Evaluation_strategy" target="_blank" rel="external">求值策略</a>是一种表达式求值时的时机（严格求值，非严格求值等）和求值的内容（传值，传引用，传指针，传名等）的策略。</p>
<h2 id="严格求值">严格求值</h2><p>严格求值是指参数总在函数调用前求值。也就是说明了求值策略的<strong>时机</strong>。</p>
<p>根据求值的<strong>内容</strong>划分，常见的形式有<strong>按值调用</strong>和<strong>按引用调用</strong>。</p>
<p>按值调用（call by value），参数传递的是值的副本，不能改变原本的值。实现方式有值传递（pass by value）</p>
<p>按引用调用（call by reference），参数传递的是引用的副本，也就是<strong>关注的值</strong>的引用。能改变<strong>关注的值</strong>。实现方式有传引用（pass by reference），传指针（pass by pointer）等。</p>
<p>所以要从<strong>行为</strong>上区分，如果从数据上看，所有都是按值调用。</p>
<p>求值策略跟语言语法无关，实现方式才跟语言语法有关。</p>
<h2 id="例子">例子</h2><p>以 C ++ 为例</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plusOne</span><span class="params">(<span class="keyword">int</span> second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  second = second + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plusOneByReference</span><span class="params">(<span class="keyword">int</span>&amp; second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  second = second + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">  plusOne(a);            <span class="comment">// 按值调用</span></span><br><span class="line">  plusOneByReference(b); <span class="comment">// 按引用调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>plusOne</code> 调用，关注的值 <code>a</code> 没法变化。所以是按值调用。</p>
<p><code>plusOneByReference</code> 调用，关注的值 <code>b</code> 可以变化，所以是按引用调用。</p>
<p>在 C++ 里并不能通过只看函数签名就能得出求值策略。也就是同一个函数可能有不同的求值策略</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minusOne</span><span class="params">(<span class="keyword">int</span>* second)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  *second = *second - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>  c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>* d = &amp;c;</span><br><span class="line">  minusOne(&amp;c); <span class="comment">// 按引用调用</span></span><br><span class="line">  minusOne(d);  <span class="comment">// 按值调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个 <code>minusOne</code> 调用，关注的值 <code>c</code> 可以变化，所以是按引用调用。</p>
<p>第二个 <code>minusOne</code> 调用，关注的值 <code>d</code> 没法变化，所以是传值调用。</p>
<p>所以一个函数不能直接从签名上得出求值策略。需要从行为上考虑。</p>
<h2 id="最后">最后</h2><p>还有按名调用（call by name）和 按未来调用（call by future ）我懒得说了（逃</p>
<p>参考链接 <a href="http://zhihu.com/question/20628016/answer/28970414" target="_blank" rel="external">传值还是传引用</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="求值策略" scheme="http://en.ors-sro.com/tags/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Promise]]></title>
    <link href="http://en.ors-sro.com/Promise/"/>
    <id>http://en.ors-sro.com/Promise/</id>
    <published>2016-12-18T07:14:35.000Z</published>
    <updated>2016-12-25T10:02:26.561Z</updated>
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"拉数据"</span>);</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"做这个那个，再发数据"</span>);</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"数据发送成功，恭喜充值成功游戏时间 +1s!"</span>);</span><br><span class="line">		&#125;,<span class="number">3000</span>)</span><br><span class="line">	&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>噢，亲爱的，你一定去过地狱，是吗？</p>
<a id="more"></a>
<h2 id="欢迎来到异步世界">欢迎来到异步世界</h2><p>当世界没有异步运算的时候，程序顺序执行，简单明了。有一天来了一个异步运算——拉数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		data = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"数据拉取成功"</span>);</span><br><span class="line">	&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拉完数据自然要处理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	data += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"处理数据完成"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照顺序逻辑编写代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getData();</span><br><span class="line">handleData();</span><br><span class="line"><span class="comment">// =&gt; 处理数据完成</span></span><br><span class="line"><span class="comment">// =&gt; 数据拉取成功</span></span><br></pre></td></tr></table></figure>
<p>天呐，居然先处理了数据才拉取数据。这是自然的。因为计算是异步的，所以不得不把所有跟数据有关的函数移到异步函数内部。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		data = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"数据拉取成功"</span>);</span><br><span class="line">		handleData();</span><br><span class="line">	&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  data += <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"处理数据完成"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行时候的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getData()</span><br><span class="line"><span class="comment">// =&gt; 数据拉取成功</span></span><br><span class="line"><span class="comment">// =&gt; 处理数据完成</span></span><br></pre></td></tr></table></figure>
<p>拉玩还不算，还得发数据。做完一次人肉 CPS 变换后代码变成这样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"拉数据"</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"做这个那个，再发数据"</span>);</span><br><span class="line">          setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"数据发送成功，恭喜充值成功游戏时间 +1s!"</span>);</span><br><span class="line">          &#125;,<span class="number">3000</span>)</span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>什么？你觉得代码还好？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">						setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">							setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">								setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">									setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">										setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">											<span class="built_in">console</span>.log(<span class="string">"终于做完了"</span>)</span><br><span class="line">										&#125;,<span class="number">1000</span>)</span><br><span class="line">									&#125;,<span class="number">1000</span>)</span><br><span class="line">								&#125;,<span class="number">1000</span>)</span><br><span class="line">							&#125;,<span class="number">1000</span>)</span><br><span class="line">						&#125;,<span class="number">1000</span>)</span><br><span class="line">					&#125;,<span class="number">1000</span>)</span><br><span class="line">				&#125;,<span class="number">1000</span>)</span><br><span class="line">			&#125;,<span class="number">1000</span>)</span><br><span class="line">		&#125;,<span class="number">1000</span>)</span><br><span class="line">	&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>欢迎来到回调地狱。</p>
<h2 id="未来的承诺">未来的承诺</h2><p>很长一段时间不少人都写着这种代码，终于 ES 6 美好的承诺 <strong>Promise</strong> 来临。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> data = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"数据拉取成功"</span>);</span><br><span class="line">		callback(data);</span><br><span class="line">	&#125;,<span class="number">1000</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"拉取中……"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"处理中……"</span>);</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			data += <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"处理数据完成"</span>);</span><br><span class="line">			resolve(data);</span><br><span class="line">		&#125;,<span class="number">2000</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"发送中……"</span>);	</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"数据发送成功"</span>);</span><br><span class="line">			resolve(data);</span><br><span class="line">		&#125;,<span class="number">3000</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showSucess</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"恭喜充值成功游戏时间 +"</span> + data + <span class="string">"s!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么运行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	getData(resolve)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.then(handleData).then(sendData).then(showSucess);</span><br></pre></td></tr></table></figure>
<p>除了语法上更直观外，还可以使用 <code>.catch()</code> 捕获异常。 </p>
<p>还可以使用 <code>.all()</code> 当所有异步完成时触发</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p1"</span>);</span><br><span class="line">		resolve();</span><br><span class="line">	&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p2"</span>);</span><br><span class="line">		resolve();</span><br><span class="line">	&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p3"</span>);</span><br><span class="line">		resolve();</span><br><span class="line">	&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"全部执行完毕"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 <code>.race()</code> 来竞争，当有异步完成时出发。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p1"</span>);</span><br><span class="line">		resolve(<span class="string">"p1"</span>);</span><br><span class="line">	&#125;,<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p2"</span>);</span><br><span class="line">		resolve(<span class="string">"p2"</span>);</span><br><span class="line">	&#125;,<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"p3"</span>);</span><br><span class="line">		resolve(<span class="string">"p3"</span>);</span><br><span class="line">	&#125;,<span class="built_in">Math</span>.random() * <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1,p2,p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">winner</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(winner + <span class="string">"优先完成"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="最后">最后</h2><p>Promise 也是一个 Monad （逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"拉数据"</span>);</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"做这个那个，再发数据"</span>);</span><br><span class="line">		setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"数据发送成功，恭喜充值成功游戏时间 +1s!"</span>);</span><br><span class="line">		&#125;,<span class="number">3000</span>)</span><br><span class="line">	&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>噢，亲爱的，你一定去过地狱，是吗？</p>]]>
    
    </summary>
    
      <category term="Promise" scheme="http://en.ors-sro.com/tags/Promise/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SICP 1.2 过程及产生的过程]]></title>
    <link href="http://en.ors-sro.com/SICP-1-2-procedures-and-the-Process-They-Generate/"/>
    <id>http://en.ors-sro.com/SICP-1-2-procedures-and-the-Process-They-Generate/</id>
    <published>2016-12-11T02:56:18.000Z</published>
    <updated>2016-12-11T06:46:51.377Z</updated>
    <content type="html"><![CDATA[<p>填坑</p>
<a id="more"></a>
<h2 id="笔记">笔记</h2><h3 id="递归与迭代">递归与迭代</h3><p>说到递归的时候有两层含义。</p>
<p>一是指语法形式。从语法形式上讲，函数调用自身称为递归。</p>
<p>二是指计算方式。从计算方式上讲，将问题求解一层层地转化为子问题求解的计算方式称为递归。相对应地，从最底层的子问题开始求解，逐渐求得更高层乃至最后问题的计算方式称为迭代。</p>
<p>书中介绍了求阶乘的两种方法。从语法形式上讲都是递归。从计算方式上讲，一个是递归，一个是迭代。</p>
<p>递归的计算通常分为两步。一步是将问题的求解层层深入逐步化为子问题解的组合，也就是递进。下一步是求解子问题的解，组合这些解，层层返回，也就是回归。</p>
<p>迭代的计算只有一步。从最底层的问题开始求解，由底层问题的解得出高层问题的解，一层层叠上去，最终得到问题的解。</p>
<p>递归的计算过程是先展开后收缩，所以线性递归看来的形状像是一个箭头。</p>
<p>迭代的计算过程是一层层叠上去的，所以迭代看起来的形状像是一个直桶。</p>
<p>书中提到了尾递归。还提到了有了尾递归，循环结构就只是语法糖。</p>
<p>迭代计算过程的递归称为尾递归。尾递归之所以能够被现在编译器优化为循环是因为没有了回归的过程，也就是每一步的计算结果只与输入（参数）有关，不用考虑解的组合方式，如阶乘解的组合方式是相乘，斐波那契解的组合方式是相加。不考虑后可以丢弃上一步计算产生的结果和环境，防止爆栈。</p>
<p>递归的计算过程问题只分解为一个子问题的求解称为线性递归。</p>
<p>可能是因为这种方式子问题的增长是线性的 = = 。</p>
<p>递归的计算过程问题分解为两个子问题的求解称为树形递归，更确切地说是二叉树型递归。书中斐波那契的求解过程就是一个二叉树的中序遍历过程。</p>
<p>如果问题分解为三个子问题呢？那当然是三叉树啦！</p>
<h3 id="递归转迭代">递归转迭代</h3><p>递归转迭代有一定的通用技巧。对于那些一眼就能看出如何迭代的，最简单的方式是用循环结构写一遍，然后转成递归的语法形式。如果看不出来，还有一条比较有用的技巧。把计算过程用到的所有上一个过程的量放到输入中，也就是参数化。所有计算的状态只需要全部输入就能还原。将迭代的过程转为参数的变化过程，这个过程中，设法保持参数变化，但结果不变。这一点可以参考习题 1.16</p>
<h3 id="复杂度">复杂度</h3><p>衡量复杂度沿用了数学中的阶级比较记号。</p>
<p>$O$ 表示渐近上界，类似于 $\le$ </p>
<p>$\Theta$ 表示夹在中间，类似于 $=$</p>
<p>$\Omega$ 表示渐进下界，类似于 $\ge$</p>
<p>这是大写记号。还有对应的小写记号。</p>
<p>$o$  表示上界，类似于 $&lt;$</p>
<p>$\omega$  表示下界，类似于 $&gt;$ </p>
<p>例如对于 $f(n) = 3n^2 + n$ 有</p>
<p>$f(n) = O(n^2)$</p>
<p>$f(n) = \Theta(n^2)$</p>
<p>$f(n) = \Omega(n^2)$ </p>
<p>$f(n) = o(n^3)$</p>
<p>$f(n) = \omega(n)$</p>
<p>因为 $O$ 表示渐进上界，所以经常用来描述算法最坏情况。</p>
<p>因为 $\Omega$ 表示渐进下界，所以经常用来描述算法最好情况。</p>
<p>而 $\Theta$ 通常用于描述算法的平均情况。</p>
<p>$O$ 会更常用。因为有时只需要知道最坏情况，还有就是 $O$ 打起来方便啊。不支持数学公式的情况下打 $\Theta$ 和 $\Omega$ 还要去找字符。</p>
<p>复杂度可以用于分析时间复杂度和空间复杂度。</p>
<p>时间复杂度是问题求解的步骤次数。</p>
<p>空间复杂度是问题求解的所需要的额外空间。</p>
<p>对于递归，空间复杂度的求解所需要的额外空间主要是记录参数，也就是求递归的深度。 时间复杂度可以考虑使用<a href="https://en.wikipedia.org/wiki/Master_theorem#Inadmissible_equations" target="_blank" rel="external">主方法</a>求解。</p>
<h2 id="习题">习题</h2><h3 id="习题_1-9">习题  1.9</h3><blockquote>
<p><strong>Exercise 1.9.</strong>  Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">0</span>)</span></span><br><span class="line">      b</span><br><span class="line">      <span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> a)</span> b)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">0</span>)</span></span><br><span class="line">      b</span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> a)</span> <span class="list">(<span class="keyword">inc</span> b)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>分别展开就能区分。第一种方法</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(inc (+ (dec 2) 3))</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(inc (inc (+ (dec 1) 3)))</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">0</span> <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="list">(<span class="keyword">inc</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">inc</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>第二种方法</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword">inc</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(+ 1 4)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">dec</span> <span class="number">1</span>)</span> <span class="list">(<span class="keyword">inc</span> <span class="number">4</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;;(+ 0 5)</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>可以看出，第一种方式式子越来越长，整个过程像是一个箭头。而第二种式子式子长度不变，整个过程像是直桶。</p>
<p>第一种是递归的，因为它展开后再收缩，需要记录整个计算链。</p>
<p>第二种是迭代的，因为它没有发生嵌套，只需要记录两个变量。</p>
<h3 id="习题_1-10">习题  1.10</h3><blockquote>
<p><strong>Exercise 1.10.</strong>  The following procedure computes a mathematical function called Ackermann’s function.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">A</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> y <span class="number">0</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">0</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> y)</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> y <span class="number">1</span>)</span> <span class="number">2</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">A</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> x <span class="number">1</span>)</span></span><br><span class="line">                 <span class="list">(<span class="keyword">A</span> x <span class="list">(<span class="keyword"><span class="built_in">-</span></span> y <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>What are the values of the following expressions?</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">3</span> <span class="number">3</span>)</span></span><br></pre></td></tr></table></figure>
<p>Consider the following procedures, where A is the procedure defined above:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">g</span> n)</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">h</span> n)</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">k</span> n)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">5</span> n n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Give concise mathematical definitions for the functions computed by the procedures $f$, $g$, and $h$ for positive integer values of $n$. For example, <code>(k n)</code> computes $5n^2$.</p>
</blockquote>
<p>将式子带入求值即可。 <code>(A 1 10)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">10</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">9</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">8</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">7</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">6</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">5</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">4</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">3</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">2</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">4</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">8</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">16</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">32</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">64</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">128</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">256</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="number">512</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">1024</span></span><br></pre></td></tr></table></figure>
<p><code>(A 2 4)</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">(A 2 4)</span><br><span class="line"></span><br><span class="line">(A 1 (A 2 3))</span><br><span class="line"></span><br><span class="line">(A 1 (A 1 (A 2 2)))</span><br><span class="line"></span><br><span class="line">(A 1 (A 1 (A 1 (A 2 1))))</span><br><span class="line"></span><br><span class="line">(A 1 (A 1 (A 1 2)))</span><br><span class="line"></span><br><span class="line">(A 1 (A 1 (A 0 (A 1 1))))</span><br><span class="line"></span><br><span class="line">(A 1 (A 1 (A 0 2)))</span><br><span class="line"></span><br><span class="line">(A 1 (A 1 4))</span><br><span class="line"></span><br><span class="line">(A 1 (A 0 (A 1 3)))</span><br><span class="line"></span><br><span class="line">(A 1 (A 0 (A 0 (A 1 2))))</span><br><span class="line"></span><br><span class="line">(A 1 (A 0 (A 0 (A 0 (A 1 1)))))</span><br><span class="line"></span><br><span class="line">(A 1 (A 0 (A 0 (A 0 2))))</span><br><span class="line"></span><br><span class="line">(A 1 (A 0 (A 0 4)))</span><br><span class="line"></span><br><span class="line">(A 1 (A 0 8))</span><br><span class="line"></span><br><span class="line">(A 1 16)</span><br><span class="line"></span><br><span class="line">(A 0 (A 1 15))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 1 14)))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 1 13))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 1 12)))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 10)))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 9))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 8)))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 7))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 6)))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 32)))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 64)))))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 128)))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0(A 0 256))))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 512)))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 (A 0 2048)))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 (A 0 4096))))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 (A 0 8192)))</span><br><span class="line"></span><br><span class="line">(A 0 (A 0 16384))</span><br><span class="line"></span><br><span class="line">(A 0 32768)</span><br><span class="line"></span><br><span class="line">65536</span><br></pre></td></tr></table></figure>
<p><code>(A 3 3)</code> </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(A 3 3)</span><br><span class="line"></span><br><span class="line">(A 2 (A 3 2))</span><br><span class="line"></span><br><span class="line">(A 2 (A 2 (A 3 1)))</span><br><span class="line"></span><br><span class="line">(A 2 (A 2 2))</span><br><span class="line"></span><br><span class="line">(A 2 (A 1 (A 2 1)))</span><br><span class="line"></span><br><span class="line">(A 2 (A 1 2))</span><br><span class="line"></span><br><span class="line">(A 2 (A 0 (A 1 1)))</span><br><span class="line"></span><br><span class="line">(A 2 (A 0 2)))</span><br><span class="line"></span><br><span class="line">(A 2 4)</span><br><span class="line">;;后面结果为上面 (A 2 4) 的展开</span><br><span class="line">65536</span><br></pre></td></tr></table></figure>
<p><code>(f n)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">f</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 2n</span></span><br></pre></td></tr></table></figure>
<p><code>(g n)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">g</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> n)</span></span><br><span class="line"><span class="comment">;; n = 0</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">0</span>)</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; n = 1</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; else</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">0</span> <span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 每求值一次就多一次 (A 0 。n 就会 - 1</span></span><br><span class="line"><span class="comment">;; 一直到 n = 1 ，也就是有 n - 1 个 (A 0 </span></span><br><span class="line"><span class="comment">;; (A 0 X) 最终会转化为 2*X</span></span><br><span class="line"><span class="comment">;; (A 0 (A 0 (A 0 ....[n - 1 个] (A 1 1))))</span></span><br><span class="line"><span class="comment">;; 2 * 2 * 2 * 2 ... [n - 1 个] (A 1 1)</span></span><br><span class="line"><span class="comment">;; (2 ^ (n - 1)) * (A 1 1)</span></span><br><span class="line"><span class="comment">;; (2 ^ (n - 1)) * 2</span></span><br><span class="line"><span class="comment">;; 2 ^ n</span></span><br></pre></td></tr></table></figure>
<p><code>(h n)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">h</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> n)</span></span><br><span class="line"><span class="comment">;; n = 0</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">0</span>)</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; n = 1</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; else</span></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">2</span> n)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">A</span> <span class="number">1</span> <span class="list">(<span class="keyword">A</span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; (h n) =&gt; (A 2 n)</span></span><br><span class="line"><span class="comment">;; (g n) =&gt; (A 1 n) =&gt; 2 ^ n</span></span><br><span class="line"><span class="comment">;; 2 ^ (A 2 (- n 1)) =&gt; 2 ^ (h (- n 1))</span></span><br></pre></td></tr></table></figure>
<p>所以答案是</p>
<p><code>(A 1 10)</code> 为 $1024$</p>
<p><code>(A 2 4)</code> 为 $65536$</p>
<p><code>(A 3 3)</code> 为 $65536$</p>
<p><code>(f n)</code> 为 $2n$</p>
<p><code>(g n)</code> 为 $2^n$</p>
<p><code>(h n)</code> 为<br>$$<br>h(n) = \begin{cases} 0 ,  &amp;n = 0\\\underbrace{2 ^ {2 ^ {2 ^ {.  ^ {. ^{.  ^ 2 }}}}}}_{n个 2}  &amp; n \ge 1  \end{cases}<br>$$</p>
<h3 id="习题_1-11">习题 1.11</h3><blockquote>
<p><strong>Exercise 1.11.</strong>  A function <em>f</em> is defined by the rule that $f(n) = n $ if  $n &lt; 3 $ and $f(n) = f(n-1) + 2f(n-2) + 3f(n-3)$ if $n \ge 3$ . Write a procedure that computes $f$ by means of a recursive process. Write a procedure that computes $f$ by means of an iterative process.</p>
</blockquote>
<p>递归形式的很好写，直接翻译即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> n <span class="number">3</span>)</span> n)</span></span><br><span class="line">		<span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;=</span></span> n <span class="number">3</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">2</span>)</span>)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">3</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>观察递归的计算过程，分为两步。第一步展开，将递归式展开到有具体数值的分支。第二步计算，一步步计算回去。所以第二步就是想要的迭代。考虑到 $f(n)$ 需要 $f(n-1)$ ，$f(n-2)$ 和 $f(n-3)$ 三个变量，再加上当前计算到了第几个还需要一个变量。所以一共需要四个变量。用 $a$ $b$ $c$ 分别代表 $f(n-1)$  $f(n-2)$  $f(n-3)$ 。根据 $f$ 的定义得。</p>
<p>$a \leftarrow a + 2b + 3c$</p>
<p>$b \leftarrow a$</p>
<p>$c \leftarrow b$</p>
<p>翻译成代码</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f-iter</span> a b c n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> n <span class="number">0</span>)</span> </span><br><span class="line">      a</span><br><span class="line">      <span class="list">(<span class="keyword">f-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> c)</span>)</span></span><br><span class="line">              a</span><br><span class="line">              b</span><br><span class="line">              <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">f-iter</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">3</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>但是这样的代码是有问题的。因为没有考虑 $n &lt; 3$ 的情况。考虑到 $n &lt; 3$  的情况应该是这样的</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f-iter</span> a b c n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">0</span>)</span> c)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">1</span>)</span> b)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">2</span>)</span> a)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">f-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> c)</span>)</span> a b <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">f-iter</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>通过观察规律发现 $c = f(n)$ 所以还可以这么写</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f-iter</span> a b c n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">0</span>)</span> </span><br><span class="line">      c</span><br><span class="line">      <span class="list">(<span class="keyword">f-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> c)</span>)</span></span><br><span class="line">              a</span><br><span class="line">              b</span><br><span class="line">              <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">f</span> n)</span> <span class="list">(<span class="keyword">f-iter</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 4</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 11</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">;; 25</span></span><br><span class="line"><span class="list">(<span class="keyword">f</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="comment">;; 1892</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-12">习题 1.12</h3><blockquote>
<p><strong>Exercise 1.12.</strong>  The following pattern of numbers is called <em>Pascal’s triangle</em>.</p>
<p>​     1 </p>
<p>​    1 1</p>
<p>   1 2 1</p>
<p>  1 3 3 1</p>
<p>1 4 6 4 1</p>
</blockquote>
<p>规律题目已经说明，假设 <code>(y row col)</code> 表示第 <code>row</code> 行第 <code>col</code> 列的值，则有</p>
<p>$$<br>y(row,col) = \begin{cases} 1, &amp; col = 1\\1 , &amp; col = row\\y(row - 1,col - 1) + y(row - 1,col) , &amp; otherwise\end{cases}<br>$$<br>对应的代码为</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">y</span> row col)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> col <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">	    <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> col row)</span> <span class="number">1</span>)</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword">y</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> row <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> col <span class="number">1</span>)</span>)</span></span><br><span class="line">	             <span class="list">(<span class="keyword">y</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> row <span class="number">1</span>)</span> col)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">1</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">2</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">2</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">3</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">3</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">y</span> <span class="number">3</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 1</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-13">习题 1.13</h3><blockquote>
<p><strong>Exercise 1.13.</strong>  Prove that $Fib(n)$ is the closest integer to $\phi^n/\sqrt 5$, where $\phi = (1 + \sqrt 5) / 2$. Hint: Let $\psi = (1 - \sqrt 5)/2$. Use induction and the definition of the Fibonacci numbers (see section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a>) to prove that $Fib(n) = (\phi^n - \psi^n) / \sqrt 5$.</p>
</blockquote>
<p>题目提示先证明 $Fib(n) = (\phi^n - \psi^n) / \sqrt 5$ 。</p>
<p>这里使用最偷懒最耍赖的数学归纳法来证明。</p>
<p>当 $n = 0$ 时 $Fib(0) = (\phi^0 - \psi^0)/\sqrt 5 = 0 / \sqrt 5 = 0$ ，等式成立。</p>
<p>当 $n = 1$ 时<br>$$<br>\begin{aligned}<br>Fib(1)&amp; = (\phi^1 - \psi^ 1) / \sqrt 5<br>\\&amp;= (\phi - \psi) / \sqrt 5<br>\\&amp;= (\frac{(1+ \sqrt5)}{2} - \frac{(1 - \sqrt 5)}{2}) / \sqrt 5<br>\\&amp;= \sqrt5 / \sqrt 5<br>\\&amp;= 1<br>\end{aligned}<br>$$<br>等式成立。</p>
<p>设当 $n = k$ 时， $Fib(k) = (\phi^k - \psi^k) / \sqrt 5$ 成立。</p>
<p>当 $ n = k  + 1$ 时<br>$$<br>\begin{aligned}<br>&amp;Fib(k+1)<br>\\=&amp; Fib(k) + Fib(k - 1)<br>\\=&amp; (\phi^k - \psi^k) / \sqrt{5} + (\phi^{k-1} - \psi^{k-1}) / \sqrt 5<br>\\=&amp; \frac{(\phi^k+\phi^{k-1}) - (\psi^k + \psi^{k-1})} {\sqrt 5}<br>\\=&amp; \frac{\phi^{k+1}(\phi^{-1} + \phi^{-2}) - \psi^{k+1}(\psi^{-1} + \psi^{-2})}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1}\cfrac{(\phi + 1)}{ \phi^2} - \psi^{k+1}\cfrac{(\psi+1)}{\psi^2}}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1}\cfrac{\cfrac{1+\sqrt 5}{2} + 1}{(\cfrac{1+\sqrt5}{2})^2} - \psi^{k+1}\cfrac{\cfrac{1 - \sqrt5}{2} + 1}{(\cfrac{1-\sqrt5}{2})^2}}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1}\cfrac{\cfrac{3+\sqrt 5}{2}}{\cfrac{3+\sqrt 5}{2}} - \psi^{k+1}\cfrac{\cfrac{3-\sqrt 5}{2}}{\cfrac{3-\sqrt 5}{2}}}{\sqrt 5}<br>\\=&amp; \cfrac{\phi^{k+1} - \psi^{k+1}}{\sqrt 5}<br>\end{aligned}<br>$$</p>
<p>证毕。</p>
<p>接着证明 $Fib(n)$ 是最接近 $\phi^n/\sqrt 5$ 的整数。</p>
<p>若要证明 $Fib(n)$ 是最接近 $\phi^n/\sqrt 5$ 的整数，</p>
<p>只需要证明 $|Fib(n) - \phi^n/\sqrt 5| &lt; 1$ </p>
<p>根据上面的结论有<br>$$<br>\begin{aligned}<br>\left|Fib(n) - \frac{\phi^n}{\sqrt 5}\right| &amp;= \left|\frac{\phi^n - \psi^n}{\sqrt 5} - \frac{\phi^n}{\sqrt 5}\right|<br>\\&amp;= \left|-\frac{\psi^n}{\sqrt 5}\right|<br>\\&amp;= \frac{|\psi^n|}{\sqrt5}<br>\\&amp;&lt; \frac{1}{\sqrt 5} \left(\because 0 &lt; \left|\frac{1 - \sqrt 5}{2}\right| &lt; 1 \right)<br>\\&amp;&lt; 1<br>\end{aligned}<br>$$<br>证毕。</p>
<h3 id="习题_1-14">习题 1.14</h3><blockquote>
<p><strong>Exercise 1.14.</strong>  Draw the tree illustrating the process generated by the count-change procedure of section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a> in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?</p>
</blockquote>
<p>先看程序是怎么执行的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c 11 5&#10;&#9500;&#9472;&#9472;&#9472;c 11 4&#10;&#9474;   &#9500;&#9472;&#9472;&#9472;c 11 3&#10;&#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 11 2&#10;&#9474;   &#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 11 1&#10;&#9474;   &#9474;   &#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 11 0&#10;&#9474;   &#9474;   &#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 10 1&#10;&#9474;   &#9474;   &#9474;   &#9474;       &#9500;&#9472;&#9472;&#9472;c 10 0&#10;&#9474;   &#9474;   &#9474;   &#9474;       &#9492;&#9472;&#9472;&#9472;c 9 1&#10;&#9474;   &#9474;   &#9474;   &#9474;           &#9500;&#9472;&#9472;&#9472;c 9 0&#10;&#9474;   &#9474;   &#9474;   &#9474;           &#9492;&#9472;&#9472;&#9472;c 8 1&#10;&#9474;   &#9474;   &#9474;   &#9474;               &#9500;&#9472;&#9472;&#9472;c 8 0&#10;&#9474;   &#9474;   &#9474;   &#9474;               &#9492;&#9472;&#9472;&#9472;c 7 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                   &#9500;&#9472;&#9472;&#9472;c 7 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                   &#9492;&#9472;&#9472;&#9472;c 6 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                       &#9500;&#9472;&#9472;&#9472;c 6 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                       &#9492;&#9472;&#9472;&#9472;c 5 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                           &#9500;&#9472;&#9472;&#9472;c 5 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                           &#9492;&#9472;&#9472;&#9472;c 4 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                               &#9500;&#9472;&#9472;&#9472;c 4 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                               &#9492;&#9472;&#9472;&#9472;c 3 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                                   &#9500;&#9472;&#9472;&#9472;c 3 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                                   &#9492;&#9472;&#9472;&#9472;c 2 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                                       &#9500;&#9472;&#9472;&#9472;c 2 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                                       &#9492;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;   &#9474;   &#9474;                                           &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;   &#9474;   &#9474;                                           &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 6 2&#10;&#9474;   &#9474;   &#9474;       &#9500;&#9472;&#9472;&#9472;c 6 1&#10;&#9474;   &#9474;   &#9474;       &#9474;   &#9500;&#9472;&#9472;&#9472;c 6 0&#10;&#9474;   &#9474;   &#9474;       &#9474;   &#9492;&#9472;&#9472;&#9472;c 5 1&#10;&#9474;   &#9474;   &#9474;       &#9474;       &#9500;&#9472;&#9472;&#9472;c 5 0&#10;&#9474;   &#9474;   &#9474;       &#9474;       &#9492;&#9472;&#9472;&#9472;c 4 1&#10;&#9474;   &#9474;   &#9474;       &#9474;           &#9500;&#9472;&#9472;&#9472;c 4 0&#10;&#9474;   &#9474;   &#9474;       &#9474;           &#9492;&#9472;&#9472;&#9472;c 3 1&#10;&#9474;   &#9474;   &#9474;       &#9474;               &#9500;&#9472;&#9472;&#9472;c 3 0&#10;&#9474;   &#9474;   &#9474;       &#9474;               &#9492;&#9472;&#9472;&#9472;c 2 1&#10;&#9474;   &#9474;   &#9474;       &#9474;                   &#9500;&#9472;&#9472;&#9472;c 2 0&#10;&#9474;   &#9474;   &#9474;       &#9474;                   &#9492;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;   &#9474;       &#9474;                       &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;   &#9474;       &#9474;                       &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;   &#9474;       &#9492;&#9472;&#9472;&#9472;c 1 2&#10;&#9474;   &#9474;   &#9474;           &#9500;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;   &#9474;           &#9474;   &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;   &#9474;           &#9474;   &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;   &#9474;           &#9492;&#9472;&#9472;&#9472;c -4 2&#10;&#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 1 3&#10;&#9474;   &#9474;       &#9500;&#9472;&#9472;&#9472;c 1 2&#10;&#9474;   &#9474;       &#9474;   &#9500;&#9472;&#9472;&#9472;c 1 1&#10;&#9474;   &#9474;       &#9474;   &#9474;   &#9500;&#9472;&#9472;&#9472;c 1 0&#10;&#9474;   &#9474;       &#9474;   &#9474;   &#9492;&#9472;&#9472;&#9472;c 0 1&#10;&#9474;   &#9474;       &#9474;   &#9492;&#9472;&#9472;&#9472;c -4 2&#10;&#9474;   &#9474;       &#9492;&#9472;&#9472;&#9472;c -11 3&#10;&#9474;   &#9492;&#9472;&#9472;&#9472;c -14 4&#10;&#9492;&#9472;&#9472;&#9472;c -39 5</span><br></pre></td></tr></table></figure>
<p>接着求时间复杂度和空间复杂度。</p>
<p>空间复杂度是树的最大深度。显然对于换硬币问题，嵌套最深的情况是全部都以最小的零钱兑换。也就是深度是 $change \div 1 = change$  。所以空间复杂度是 $\Theta(change)$ 或者说 $\Theta(n)$ 。</p>
<p>时间复杂度是树的子节点个数。</p>
<p>没算出来= =</p>
<h3 id="习题_1-15">习题 1.15</h3><blockquote>
<p><strong>Exercise 1.15.</strong>  The sine of an angle (specified in radians) can be computed by making use of the approximation $\sin x \approx x$ if x is sufficiently small, and the trigonometric identity<br>$$<br>\sin x = 3 \sin \frac{x}{3} - 4\sin^3 \frac{x}{3}<br>$$<br>to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered “sufficiently small’’ if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x x)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">p</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">4</span> <span class="list">(<span class="keyword">cube</span> x)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sine</span> angle)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">not</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> angle)</span> <span class="number">0.1</span>)</span>)</span></span><br><span class="line">       angle</span><br><span class="line">       <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> angle <span class="number">3.0</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>a.  How many times is the procedure <code>p</code> applied when <code>(sine 12.15)</code> is evaluated?</p>
<p>b.  What is the order of growth in space and number of steps (as a function of <em>a</em>) used by the process generated by the sine procedure when <code>(sine a)</code> is evaluated?</p>
</blockquote>
<p>执行过程</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sine</span> <span class="number">12.15</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">4.5</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">1.5</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">0.5</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">0.1666667</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">sine</span> <span class="number">0.0555556</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="list">(<span class="keyword">p</span> <span class="number">0.0555556</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>最后迭代到 <code>(p (p (p (p (p (sine 0.0555556))))))</code> 所以问题 a 的答案是 <code>p</code> 一共被调用了 5 次。</p>
<p>空间复杂度等于树的深度，在这里等于 <code>p</code> 的调用次数 $x$，根据题意有<br>$$<br>\begin{aligned}<br>&amp;angle \div 3^x &lt; 0.1<br>\\&amp; angle &lt; 0.1 \times 3^x<br>\\&amp; 10angle &lt; 3^x<br>\\&amp; \log_3{10angle} &lt; x<br>\end{aligned}<br>$$<br>所以空间复杂度为 $\Theta(\log_3{angle})$ 或者说 $\Theta(\log{n})$ </p>
<p>时间复杂度等于树的节点数，在这里也等于 <code>p</code> 的调用次数，所以时间复杂度为 $\Theta(\log{n})$ 。</p>
<h3 id="习题_1-16">习题 1.16</h3><blockquote>
<p><strong>Exercise 1.16.</strong>  Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does <code>fast-expt</code>. (Hint: Using the observation that $ (b^{n/2})^2 = (b^2)^{n/2} $, keep, along with the exponent $n$ and the base $b$, an additional state variable $a$, and define the state transformation in such a way that the product $ab^n$ is unchanged from state to state. At the beginning of the process $a$ is taken to be $1$, and the answer is given by the value of $a$ at the end of the process. In general, the technique of defining an <em>invariant quantity</em> that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)</p>
</blockquote>
<p>题目的提示已经说得很清楚了。按照题目的思路做就可以了。题目思路如下</p>
<p>除了底 $b$，幂 $n$ 还需要一个变量 $a$ 来记录累积的值，在迭代中保持 $ab^n$ 不变。也就是</p>
<p>当 $n = 0$ 时，结果为 $ab^n$</p>
<p>当 $n$ 是偶数时 ， $b^n = (b^2)^{n/2}$ ， a 不变 。 此时 $ab^n = a(b^2)^{n/2}$ ，转化为求 $\frac{n}{2}$ 次方。</p>
<p>当 $n$ 是奇数时，$b^n = b \cdot b^{(n-1)}$ ，$ a \leftarrow a \cdot b$ ，此时 $ab^n = b \cdot b^{n-1}$ ，转化为求 $n-1$ 次方</p>
<p>写成代码是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fast-expt-iter</span> b n a)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> n <span class="number">0</span>)</span></span><br><span class="line">      a</span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> n)</span></span><br><span class="line">          <span class="list">(<span class="keyword">fast-expt-iter</span> <span class="list">(<span class="keyword">square</span> b)</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> n <span class="number">2</span>)</span> a)</span></span><br><span class="line">          <span class="list">(<span class="keyword">fast-expt-iter</span> b <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b a)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fast-expt</span> b n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fast-expt-iter</span> b n <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fast-expt</span> <span class="number">2</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">fast-expt</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 16</span></span><br><span class="line"><span class="list">(<span class="keyword">fast-expt</span> <span class="number">10</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="comment">;; 10000000000</span></span><br></pre></td></tr></table></figure>
<p>这种找出恒等关系的做法很常用。</p>
<h3 id="习题_1-17">习题 1.17</h3><blockquote>
<p><strong>Exercise 1.17.</strong>  The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the expt procedure:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">0</span>)</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a <span class="list">(<span class="keyword"><span class="built_in">-</span></span> b <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>This algorithm takes a number of steps that is linear in $b$. Now suppose we include, together with addition, operations <code>double</code>, which doubles an integer, and <code>halve</code>, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to <code>fast-expt</code> that uses a logarithmic number of steps.</p>
</blockquote>
<p>按照题目原有的思路 $ a $ 一直变大，$b$ 一直变小直到 $0$ 为止。不过 $a$ 变大使用 <code>double</code> ，$b$ 变小使用 <code>halve</code> 。</p>
<p>还需要考虑 $ b$ 的奇偶性。</p>
<p>当 $b$ 是偶数时，$a \cdot b = double(a) \cdot halve(b)$ 。</p>
<p>当 $b$ 是奇数时，$a \cdot b = a + a \cdot ( b -1)$ 。</p>
<p>写成代码是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">0</span>)</span></span><br><span class="line">	    <span class="number">0</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> b)</span></span><br><span class="line">	        <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">double</span> a)</span> <span class="list">(<span class="keyword">halve</span> b)</span>)</span></span><br><span class="line">	        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a <span class="list">(<span class="keyword"><span class="built_in">-</span></span> b <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-18">习题 1.18</h3><blockquote>
<p><strong>Exercise 1.18.</strong>  Using the results of exercises <a href="#1.16">1.16</a> and <a href="#1.17">1.17</a>, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#footnote_Temp_68" target="_blank" rel="external">40</a></p>
</blockquote>
<p>将上题改成迭代式的。需要多一个变量记录累积值。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">mul-iter</span> a b acc)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">0</span>)</span></span><br><span class="line">	    acc</span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> b)</span></span><br><span class="line">	        <span class="list">(<span class="keyword">mul-iter</span> <span class="list">(<span class="keyword">double</span> a)</span> <span class="list">(<span class="keyword">halve</span> b)</span> acc)</span></span><br><span class="line">	        <span class="list">(<span class="keyword">mul-iter</span> a <span class="list">(<span class="keyword"><span class="built_in">-</span></span> b <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a acc)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span> <span class="list">(<span class="keyword">mul-iter</span> a b <span class="number">0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-19">习题 1.19</h3><blockquote>
<p><strong>Exercise 1.19.</strong>   There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables <em>a</em> and <em>b</em> in the <code>fib-iter</code> process of section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2" target="_blank" rel="external">1.2.2</a>: $ a \leftarrow a + b$  and  $b \leftarrow a$ .Call this transformation $T$, and observe that applying $T$ over and over again $n$ times, starting with $1$ and $0$, produces the pair $Fib(n+1)$ and $Fib(n)$. In other words, the Fibonacci numbers are produced by applying $T^n$, the $n$th power of the transformation $T$ , starting with the pair $(1,0)$. Now consider $T$ to be the special case of $p = 0$  and $q = 1$ in a family of transformations $T_{pq}$, where $T_{pq}$ transforms the pair $(a,b)$ according to $a \leftarrow bq + aq + ap$ and $b \leftarrow bp + aq$ . Show that if we apply such a transformation $T_{pq}$ twice, the effect is the same as using a single transformation $T_{p^{,}q^{,}}$ of the same form, and compute $p^{,}$ and $q^{,}$ in terms of $p$ and $q$. This gives us an explicit way to square these transformations, and thus we can compute $T^n$ using successive squaring, as in the fast-expt procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#footnote_Temp_70" target="_blank" rel="external">41</a></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fib</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fib-iter</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> n)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fib-iter</span> a b p q count)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> count <span class="number">0</span>)</span> b)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">even?</span></span> count)</span></span><br><span class="line">         <span class="list">(<span class="keyword">fib-iter</span> a</span><br><span class="line">                   b</span><br><span class="line">                   &lt;??&gt;      <span class="comment">; compute p'</span></span><br><span class="line">                   &lt;??&gt;      <span class="comment">; compute q'</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">/</span></span> count <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">fib-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a p)</span>)</span></span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b p)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span>)</span></span><br><span class="line">                        p</span><br><span class="line">                        q</span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">-</span></span> count <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>不得不说这个算法真的很机智。线性迭代很容易想到矩阵变换，多次变化相当于矩阵的幂，通过<a href="http://www.ruanyifeng.com/blog/2015/09/matrix-multiplication.html" target="_blank" rel="external">矩阵乘法</a>的结合律就能一次把整个变换矩阵算出来，最后应用到 $a$ ，$b$ 的初始值就可以算出最终的值。</p>
<p>用迭代法计算 $Fib(n) = b_n$ 是这样的。</p>
<p>有一对$(a,b)$ 的初始值$(a_0,b_0)$ ，那么 $(a_1,b_1)$ 是这么得来的<br>$$<br>\begin{aligned}<br>&amp;a_1 \leftarrow  1a_0 + 1b_0 \\<br>&amp;b_1 \leftarrow 1a_0 + 0b_0<br>\end{aligned}<br>$$</p>
<p>用矩阵表示就是<br>$$<br>\begin{bmatrix}<br>1 &amp; 1 \\<br>1 &amp; 0<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>a_1\\b_1<br>\end{bmatrix}<br>$$<br>可以发现只要乘上左边的矩阵 $T = \begin{bmatrix}1 &amp; 1\\1 &amp; 0\end{bmatrix}$ 就可以得到下一对 $(a,b)$ </p>
<p>要求 $Fib(2)$ 的值由 $Fib(n) = b_n$ 得知只需要求 $b_2$</p>
<p>由 $b_0$ 到 $b_2$ 需要做两次变换，也就是<br>$$<br>\begin{aligned}<br>\begin{bmatrix}<br>a_2\\b_2<br>\end{bmatrix}<br>&amp;=<br>\begin{bmatrix}<br>1 &amp; 1\\<br>1 &amp; 0<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_1\\b_1<br>\end{bmatrix}<br>\\&amp;=<br>\begin{bmatrix}<br>1 &amp; 1\\<br>1 &amp; 0<br>\end{bmatrix}^2<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>\\&amp;=<br>\begin{bmatrix}<br>2 &amp; 1\\<br>1 &amp; 1<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>\end{aligned}<br>$$<br>由矩阵的定义得 $b_2 = 1a_0 + 1b_0 = a_0 + b_0$ 。</p>
<p>在迭代法开始时 $a = 1,b=0$ 也就是 $a_0 = 1,b_0 = 0$</p>
<p>所以 $Fib(2) = b_2 = a_0 + b_0 = 1 + 0 = 1$ 。与其他方式计算的结果相同。</p>
<p>回到题目中机智的算法，它其实是这样的</p>
<p>当 $ n $ 是偶数时，$Fib(n) = T^n b_0 = (T^2)^{n/2} b_0$ 。</p>
<p>当 $n$ 是奇数时，$Fib(n) = T \cdot T^{n-1} b_0$ </p>
<p>题目源代码丢失的部分是求偶数条件下 $p$ 和 $q$ 的值。</p>
<p>题目给出的 $(a,b)$ 递推式是<br>$$<br>\begin{aligned}<br>&amp;a_1 \leftarrow  (p+q)a_0 + qb_0 \\<br>&amp;b_1 \leftarrow qa_0 + pb_0<br>\end{aligned}<br>$$<br>用矩阵表示是<br>$$<br>\begin{bmatrix}<br>p+q &amp; q\\<br>q &amp; p<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>a_0\\b_0<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>a_1\\b_1<br>\end{bmatrix}<br>$$<br>所以变换矩阵 $T = \begin{bmatrix}p+q &amp; q\\q &amp; p\end{bmatrix}$ ，那么<br>$$<br>\begin{aligned}<br>T^2 &amp;= T \cdot T<br>\\&amp;=<br>\begin{bmatrix}<br>p+q &amp; q\\<br>q &amp; p<br>\end{bmatrix}<br>\times<br>\begin{bmatrix}<br>p+q &amp; q\\<br>q &amp; p<br>\end{bmatrix}<br>\\&amp;=<br>\begin{bmatrix}<br>(p+q)^2 + q^2 &amp; q(p+q) + qp\\<br>q(p+q)+pq &amp; q^2 + p^2<br>\end{bmatrix}<br>\end{aligned}<br>$$<br>对比 $T$ 和 $T^2$ 得<br>$$<br>\begin{aligned}<br>p &amp;\leftarrow q^2 + p^2\\<br>q &amp;\leftarrow q(p+q) + pq<br>\end{aligned}<br>$$<br>所以最后答案是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fib-iter</span> a b p q count)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> count <span class="number">0</span>)</span> b)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">even?</span></span> count)</span></span><br><span class="line">         <span class="list">(<span class="keyword">fib-iter</span> a</span><br><span class="line">                   b</span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> q q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> p p)</span>)</span>            <span class="comment">; compute p'</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> q <span class="list">(<span class="keyword"><span class="built_in">+</span></span> p q)</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> p q)</span>)</span>      <span class="comment">; compute q'</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">/</span></span> count <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">fib-iter</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a p)</span>)</span></span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> b p)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a q)</span>)</span></span><br><span class="line">                        p</span><br><span class="line">                        q</span><br><span class="line">                        <span class="list">(<span class="keyword"><span class="built_in">-</span></span> count <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">;; 5</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">6</span>)</span></span><br><span class="line"><span class="comment">;; 8</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">10</span>)</span></span><br><span class="line"><span class="comment">;; 55</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-20">习题 1.20</h3><blockquote>
<p><strong>Exercise 1.20.</strong>  The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative gcd procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.5" target="_blank" rel="external">1.1.5</a>. (The normal-order-evaluation rule for ifis described in exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.5" target="_blank" rel="external">1.5</a>.) Using the substitution method (for normal order), illustrate the process generated in evaluating <code>(gcd 206 40)</code> and indicate the remainder operations that are actually performed. How many remainderoperations are actually performed in the normal-order evaluation of <code>(gcd 206 40)</code>? In the applicative-order evaluation?</p>
</blockquote>
<p>求 normal-order 和 applicative-order 中的 <code>remainder</code> 调用次数。<code>if</code> 语句先执行判断语句，后执行条件分支。</p>
<p>按 normal-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">40</span> <span class="number">0</span>)</span></span><br><span class="line">    <span class="number">206</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="comment">;; gcd(40,6)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> <span class="number">0</span>)</span> <span class="comment">;; 先执行判断语句 remainder 调用次数 1</span></span><br><span class="line">    <span class="number">40</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span></span><br><span class="line">   </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> <span class="comment">;; gcd(6,4)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="number">0</span>)</span> <span class="comment">;; remainder 调用次数 3</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                    <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"> </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                 <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span> <span class="comment">;; gcd(4,2)</span></span><br><span class="line"> </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> <span class="comment">;; remainder 调用次数 7</span></span><br><span class="line">        <span class="number">0</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> </span><br><span class="line">          <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">                     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                                <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">     </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                 <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> </span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">                 <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                            <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span> <span class="comment">;; gcd (2,0)</span></span><br><span class="line"> </span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="comment">;; remainder 调用次数 14</span></span><br><span class="line">                   <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                              <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span> </span><br><span class="line">        <span class="number">0</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line">                <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span></span><br><span class="line">     <span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> </span><br><span class="line">                     <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> </span><br><span class="line">                                <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">    </span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span>)</span> <span class="comment">;; remainder 调用次数 18</span></span></span><br></pre></td></tr></table></figure>
<p>按 applicative-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">206</span> <span class="number">40</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">206</span> <span class="number">40</span>)</span>)</span> <span class="comment">;; remainder 调用次数 1</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">40</span> <span class="number">6</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">6</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">40</span> <span class="number">6</span>)</span>)</span> <span class="comment">;; remainder 调用次数 2</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">6</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">4</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">6</span> <span class="number">4</span>)</span>)</span> <span class="comment">;; remainder 调用次数 3</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">4</span> <span class="number">2</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">4</span> <span class="number">2</span>)</span>)</span> <span class="comment">;; remainder 调用次数 4</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">gcd</span></span> <span class="number">2</span> <span class="number">0</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>所以答案是 normal-order 18 次 ，applicative-order 4 次。</p>
<h3 id="习题_1-21">习题 1.21</h3><blockquote>
<p><strong>Exercise 1.21.</strong>  Use the smallest-divisor procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.</p>
</blockquote>
<p>用 <code>smallest-divisor</code> 求 199，1999，19999 的最小约数</p>
<p>求值</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">smallest-divisor</span> <span class="number">199</span>)</span></span><br><span class="line"><span class="comment">;; 199</span></span><br><span class="line"><span class="list">(<span class="keyword">smallest-divisor</span> <span class="number">1999</span>)</span></span><br><span class="line"><span class="comment">;; 1999</span></span><br><span class="line"><span class="list">(<span class="keyword">smallest-divisor</span> <span class="number">19999</span>)</span></span><br><span class="line"><span class="comment">;; 7</span></span><br><span class="line"><span class="comment">;; 19999 = 7 x 2857</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-22">习题 1.22</h3><blockquote>
<p><strong>Exercise 1.22.</strong>  Most Lisp implementations include a primitive called <code>runtime</code> that returns an integer that specifies the amount of time the system has been running (measured, for example, in microseconds). The following <code>timed-prime-test</code> procedure, when called with an integer $n$, prints $n$ and checks to see if $n$ is prime. If $n$ is prime, the procedure prints three asterisks followed by the amount of time used in performing the test.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">timed-prime-test</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">newline</span></span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">start-prime-test</span> n <span class="list">(<span class="keyword">runtime</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">start-prime-test</span> n start-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">prime?</span> n)</span></span><br><span class="line">      <span class="list">(<span class="keyword">report-prime</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">runtime</span>)</span> start-time)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">report-prime</span> elapsed-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">" *** "</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> elapsed-time)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Using this procedure, write a procedure <code>search-for-primes</code> that checks the primality of consecutive odd integers in a specified range. Use your procedure to find the three smallest primes larger than $1000$; larger than $10,000$; larger than $100,000$; larger than $1,000,000$. Note the time needed to test each prime. Since the testing algorithm has order of growth of $\Theta(\sqrt n)$ , you should expect that testing for primes around $10,000$ should take about $\sqrt {10}$ times as long as testing for primes around $1000$. Do your timing data bear this out? How well do the data for $100,000$ and $1,000,000$ support the $\sqrt n$  prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?</p>
</blockquote>
<p>编写一个查找一定区间所有奇数中的函数 <code>search-for-prime</code> </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">search-for-prime</span> begin end)</span></span><br><span class="line">	<span class="list">(<span class="keyword">timed-prime-test</span> begin)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> begin end)</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">even?</span></span> begin)</span></span><br><span class="line">	    	<span class="list">(<span class="keyword">search-for-prime</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> begin)</span> end)</span></span><br><span class="line">	    	<span class="list">(<span class="keyword">search-for-prime</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> begin)</span> end)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试发现现在机器速度太快了。所以前后 <code>runtime</code> 差值太小总是 0 。所以改为计算总的时间。从<a href="https://www.gnu.org/software/mit-scheme/documentation/mit-scheme-ref/Machine-Time.html" target="_blank" rel="external">Machine-Time</a>得知尝试了几种不同的计时方式。发现 <code>real-time-clock</code> 效果较好。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">time-for</span> n start-time)</span></span><br><span class="line">	<span class="list">(<span class="keyword">search-for-prime</span> n <span class="list">(<span class="keyword"><span class="built_in">+</span></span> n <span class="number">1000</span>)</span>)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">real-time-clock</span>)</span> start-time)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">search</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">time-for</span> n <span class="list">(<span class="keyword">real-time-clock</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1 ]=&gt; (search 100000) </span><br><span class="line">100003 *** 0.</span><br><span class="line">100019 *** 0.</span><br><span class="line">100043 *** 0.</span><br><span class="line">100049 *** 1.5999999999999986e-2</span><br><span class="line">100057 *** 0.</span><br><span class="line">100069 *** 0. </span><br><span class="line">...</span><br><span class="line">;Value: 93 </span><br><span class="line">1 ]=&gt; (search 1000000) </span><br><span class="line">1000003 *** 0.</span><br><span class="line">1000033 *** 1.5000000000000013e-2</span><br><span class="line">1000037 *** 0.</span><br><span class="line">1000039 *** 0.</span><br><span class="line">1000081 *** 1.6000000000000014e-2</span><br><span class="line">1000099 *** 0. </span><br><span class="line">...</span><br><span class="line">;Value: 202</span><br><span class="line">1 ]=&gt; (search 10000000) </span><br><span class="line">10000019 *** 1.5999999999999986e-2</span><br><span class="line">10000079 *** 1.5999999999999986e-2 </span><br><span class="line">10000103 *** 1.5999999999999986e-2 </span><br><span class="line">;Value: 344</span><br></pre></td></tr></table></figure>
<p>每次 <code>search n</code> 的计算次数为单次计算次数乘上1000 。结果为 $1000\sqrt  n = \Theta(\sqrt n)$ 。</p>
<p>所以如果 <code>(search 1000000)</code> 耗时为 202 ，</p>
<p>那么 <code>(search 10000000)</code> 应该等于 </p>
<p>$\Theta(\sqrt {10^8}) = \Theta(\sqrt {10} \cdot \sqrt {10^7}) $<br>$= \sqrt {10} * 202 \approx 638$ 。</p>
<p>但从上面看出实际结果是 344</p>
<h3 id="习题_1-23">习题 1.23</h3><blockquote>
<p><strong>Exercise 1.23.</strong>  The smallest-divisor procedure shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for test-divisor should not be 2, 3, 4, 5, 6, …, but rather 2, 3, 5, 7, 9, …. To implement this change, define a procedure next that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the smallest-divisor procedure to use (next test-divisor)instead of (+ test-divisor 1). With timed-prime-test incorporating this modified version of smallest-divisor, run the test for each of the 12 primes found in exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.22" target="_blank" rel="external">1.22</a>. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?</p>
</blockquote>
<p>找最小约数的时候考虑了除了 2 以外的偶数，做了多余的工作。所以编写函数 <code>next</code> 返回下一个奇数。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">next</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">2</span>)</span></span><br><span class="line">      <span class="number">3</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> x <span class="number">2</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>相应的修改<code>find-divisor</code> 中的 <code>(+ test-divisor 1)</code> 为 <code>(next test-divisor)</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">smallest-divisor</span> n)</span></span><br><span class="line">   <span class="list">(<span class="keyword">find-divisor</span> n <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">find-divisor</span> n test-divisor)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> <span class="list">(<span class="keyword">square</span> test-divisor)</span> n)</span> n)</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword">divides?</span> test-divisor n)</span> test-divisor)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="list">(<span class="keyword">find-divisor</span> n <span class="list">(<span class="keyword">next</span> test-divisor)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试时间</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">search</span> <span class="number">100000</span>)</span></span><br><span class="line"><span class="comment">;Value: 78</span></span><br><span class="line"><span class="list">(<span class="keyword">search</span> <span class="number">1000000</span>)</span></span><br><span class="line"><span class="comment">;Value: 125 之前是 202</span></span><br><span class="line"><span class="list">(<span class="keyword">search</span> <span class="number">10000000</span>)</span></span><br><span class="line"><span class="comment">;Value: 296 之前是 344</span></span><br></pre></td></tr></table></figure>
<p>$10^6$ 的时间为之前的 1.6 倍，而 $10^7$ 为之前的 1.1 倍。这是因为</p>
<h3 id="习题_1-24">习题 1.24</h3><blockquote>
<p><strong>Exercise 1.24.</strong>  Modify the timed-prime-test procedure of exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.22" target="_blank" rel="external">1.22</a> to use fast-prime? (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has $\Theta(\log n)$ growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find?</p>
</blockquote>
<p>将 <code>prime?</code> 改为 <code>fast-prime?</code> </p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">timed-prime-test</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">newline</span></span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">start-prime-test</span> n <span class="list">(<span class="keyword">system-clock</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">start-prime-test</span> n start-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">fast-prime?</span> n <span class="number">1000</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">report-prime</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">system-clock</span>)</span> start-time)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">report-prime</span> elapsed-time)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> <span class="string">" *** "</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">display</span></span> elapsed-time)</span>)</span></span><br></pre></td></tr></table></figure>
<p>$1000$ 太小了。分别选择 $10^5$ ，$10^6$ 和 $10^7$ 附近的质数进行测试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(timed-prime-test 100003)</span><br><span class="line">100003 *** 63</span><br><span class="line">(timed-prime-test 1000003)</span><br><span class="line">1000003 *** 78</span><br><span class="line">(timed-prime-test 10000019)</span><br><span class="line">10000019 *** 94</span><br></pre></td></tr></table></figure>
<p>$10^6$ 的复杂度是<br>$\Theta(\log_2{10^6}) = \Theta(\log_2{10^5 \cdot 10})$<br>$= \Theta(\log_2{10}) + \Theta(\log_2{10^5})$ </p>
<p>$\Theta(\log_2{10^5}) $ 也就是 $10^5$ 的时间 $63$</p>
<p>所以 $\Theta(\log_2{10}) = \Theta(\log_2{10^6}) - \Theta(\log_2{10^5}) $<br>$= 78 - 63 = 15$ 。</p>
<p>类似地，$\Theta(\log_2{10^7}) = \Theta(\log_2{10^6}) + \Theta(\log_2{10}) $<br>$= 78 + 15 = 93$ 。</p>
<p>跟实际时间 $94$ 非常接近。</p>
<h3 id="习题_1-25">习题 1.25</h3><blockquote>
<p><strong>Exercise 1.25.</strong>  Alyssa P. Hacker complains that we went to a lot of extra work in writing <code>expmod</code>. After all, she says, since we already know how to compute exponentials, we could have simply written</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">expmod</span> base exp m)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">fast-expt</span> base exp)</span> m)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Is she correct? Would this procedure serve as well for our fast prime tester? Explain.</p>
</blockquote>
<p>看起来没有什么问题。随便测试了几个也没问题。既然是用了不同的方式，肯定有区别。</p>
<p>先看原来的求值过程</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">expmod</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">expmode</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">5</span> <span class="list">(<span class="keyword">expmod</span> <span class="number">5</span> <span class="number">0</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">5</span> <span class="number">1</span>)</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">15</span> <span class="number">4</span>)</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword">square</span> <span class="number">3</span>)</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="number">9</span> <span class="number">4</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>对比本题中的 <code>(expmod 5 2 4) = (remainder 25 4)</code> </p>
<p>发现书中的不是直接求余，而是先把数字减小后求余。这样的好处是当防止在数字比较大的情况下整数溢出。</p>
<h3 id="习题_1-26">习题 1.26</h3><blockquote>
<p><strong>Exercise 1.26.</strong>  Louis Reasoner is having great difficulty doing exercise <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_thm_1.24" target="_blank" rel="external">1.24</a>. His <code>fast-prime?</code> test seems to run more slowly than his <code>prime?</code> test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis’s code, they find that he has rewritten the <code>expmod</code> procedure to use an explicit multiplication, rather than calling <code>square</code>:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">expmod</span> base exp m)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> exp <span class="number">0</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">even?</span></span> exp)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">expmod</span> base <span class="list">(<span class="keyword"><span class="built_in">/</span></span> exp <span class="number">2</span>)</span> m)</span></span><br><span class="line">                       <span class="list">(<span class="keyword">expmod</span> base <span class="list">(<span class="keyword"><span class="built_in">/</span></span> exp <span class="number">2</span>)</span> m)</span>)</span></span><br><span class="line">                    m)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">remainder</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> base <span class="list">(<span class="keyword">expmod</span> base <span class="list">(<span class="keyword"><span class="built_in">-</span></span> exp <span class="number">1</span>)</span> m)</span>)</span></span><br><span class="line">                    m)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>“I don’t see what difference that could make,’’ says Louis. “I do.” says Eva. “By writing the procedure like that, you have transformed the $\Theta(\log n)$ process into a $\Theta(n)$ process.’’ Explain.</p>
</blockquote>
<p>这种情形有点类似 applicative-order 和 normal-order 的区别。</p>
<p>例如 <code>(square (+ 1 1))</code> 和 <code>(* (+ 1 1) (+ 1 1))</code> 计算过程</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="number">2</span>)</span> <span class="comment">;; (+ 1 1) 只被计算了一次</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">2</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">1</span>)</span>)</span> <span class="comment">;; 第一次计算 (+ 1 1)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">2</span>)</span> <span class="comment">;; 第二次计算 (+ 1 1)</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>所以不用 <code>square</code> 的情况下会多计算一次。</p>
<p>如果像题目中这种需要计算的式子是递归的，那么相当于每次都多计算了一次。</p>
<p>原来只需要计算 $\log_2{n}$ 次。</p>
<p>现在需要每次都计算两次。求值展开的形状相当于二叉树，叶子数量就是计算次数。</p>
<p>叶子数量等于 2 的树高次方。树高为 $\log_2{n}$ 。所以叶子数量为 $2^h = 2^{\log_2{n}} = n$ 。</p>
<p>所以复杂度为 $\Theta(n)$  。</p>
<h3 id="习题_1-27">习题 1.27</h3><blockquote>
<p><strong>Exercise 1.27.</strong>  Demonstrate that the Carmichael numbers listed in footnote <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#footnote_Temp_80" target="_blank" rel="external">47</a> really do fool the Fermat test. That is, write a procedure that takes an integer $n$ and tests whether $a^n$ is congruent to <em>a</em> modulo $n$ for every $a&lt;n$, and try your procedure on the given Carmichael numbers.</p>
</blockquote>
<p>编写函数对 $n$ 用所有小于 $n$ 的数进行费马测试。</p>
<p>首先编写一次费马测试的函数。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">one-fermat-test</span> n a)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="list">(<span class="keyword">expmod</span> a n n)</span> a)</span>)</span></span><br></pre></td></tr></table></figure>
<p>其次编写对所有小于 $n$ 的数进行费马测试的函数 <code>(test n a)</code> </p>
<p>当 $ a \le 2$ 时，无论 $n$ 是多少直接通过费马测验。</p>
<p>当 $ a &gt; 2$ 时，$test (n,a) = one-fermat-test(n,a) \wedge test(n,a-1)$ </p>
<p>写成代码</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">test-all</span> n a)</span></span><br><span class="line">	<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&lt;=</span></span> a <span class="number">2</span>)</span></span><br><span class="line">	    <span class="literal">#t</span></span><br><span class="line">	    <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword">one-fermat-test</span> n a)</span> <span class="list">(<span class="keyword">test-all</span> n <span class="list">(<span class="keyword"><span class="built_in">-</span></span> a <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>费马测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">fermat-test</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">test-all</span> n <span class="list">(<span class="keyword"><span class="built_in">-</span></span> n <span class="number">1</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">5</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">561</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br><span class="line"><span class="list">(<span class="keyword">fermat-test</span> <span class="number">1105</span>)</span></span><br><span class="line"><span class="comment">;; #t</span></span><br></pre></td></tr></table></figure>
<p>果然 561 和 1105 把费马测试给耍了。</p>
<h3 id="习题_1-28">习题 1.28</h3><blockquote>
<p><strong>Exercise 1.28.</strong>  One variant of the Fermat test that cannot be fooled is called the <em>Miller-Rabin test</em> (Miller 1976; Rabin 1980). This starts from an alternate form of Fermat’s Little Theorem, which states that if $n$ is a prime number and $a$ is any positive integer less than $n$, then $a$ raised to the $(n - 1)$st power is congruent to 1 modulo $n$. To test the primality of a number $n$ by the Miller-Rabin test, we pick a random number $a&lt;n$ and raise $a$ to the $(n - 1)$st power modulo $n$ using the <code>expmod</code> procedure. However, whenever we perform the squaring step in <code>expmod</code>, we check to see if we have discovered a “nontrivial square root of 1 modulo $n$, that is, a number not equal to 1 or $n$ - 1 whose square is equal to 1 modulo $n$. It is possible to prove that if such a nontrivial square root of 1 exists, then $n$ is not prime. It is also possible to prove that if $n$ is an odd number that is not prime, then, for at least half the numbers $a&lt;n$, computing $a^{n-1}$ in this way will reveal a nontrivial square root of 1 modulo $n$. (This is why the Miller-Rabin test cannot be fooled.) Modify the <code>expmod</code> procedure to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a procedure analogous to fermat-test. Check your procedure by testing various known primes and non-primes. Hint: One convenient way to make <code>expmod</code> signal is to have it return 0.</p>
</blockquote>
<p>如果米勒测试的非平凡平方根 $number \in (1,n-1)$ ，那么对于非素数的奇数 $9$ 有</p>
<p>$2^2 \equiv 4 \pmod {9} $</p>
<p>$3^2 \equiv 0 \pmod 9$</p>
<p>$4^2 \equiv 7 \pmod 9$</p>
<p>$5^2 \equiv 7 \pmod 9$</p>
<p>$6^2 \equiv 0 \pmod 9$</p>
<p>$7^2 \equiv 4 \pmod 9$</p>
<p>显然没有任何一个数满足 $ number^2 \equiv 1 \pmod 9$ 。但是题目中说到对于非素数的奇数至少有一半小于 $n$ 的数 $a$ 在计算$a^{n-1} \bmod n$ 的过程中可以找到非平凡平方根。</p>
<p>那么把条件改为非平凡平方根不一定小于 $n$ ，那么对于质数 $13$ 在计算 $10^{12} \bmod 13$ 过程中发现 </p>
<p>$10^6 = (10^3)^2 \equiv 1 \pmod {13}$</p>
<p>也就是存在非平凡平方根 $10^3$ ，使得 $13$ 没有通过米勒测试。但是 $13$ 是质数。 </p>
<p>后来找 Miller-Rabin 测试的相关资料。发现了一篇文章。恍然大悟。原来是计算过程不是这样的。觉得写不出更好的。所以答案请看<a href="http://blog.rainy.im/2015/08/27/miller-rabin-n-rsa/" target="_blank" rel="external">这篇文章</a>。</p>
<h2 id="总结">总结</h2><p>这一小节主要讲述了解决问题的两种方式，递归和迭代。分别介绍了它们的特点。同时引入算法复杂度的衡量方法，目的是为了督促读者写出更好的解决方法。</p>
<p>这一小节有不少习题还挺难的。花了很多时间才多完。自以为编程老司机结果才第二小节就翻车了（逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>填坑</p>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://en.ors-sro.com/tags/SICP/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BrainFuck]]></title>
    <link href="http://en.ors-sro.com/BrainFuck/"/>
    <id>http://en.ors-sro.com/BrainFuck/</id>
    <published>2016-12-04T05:28:39.000Z</published>
    <updated>2016-12-04T07:58:41.542Z</updated>
    <content type="html"><![CDATA[<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span>&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面这段 <strong>BrainFuck</strong> 代码输出结果是 <a href="http://brainfuck.tryitonline.net/#code=KysrKysrKysrK1s-KysrKysrKz4rKysrKysrKysrPisrKz4rPDw8PC1dPisrLj4rLisrKysrKysuLisrKy4-KysuPDwrKysrKysrKysrKysrKysuPi4rKysuLS0tLS0tLi0tLS0tLS0tLj4rLj4u&amp;input=" target="_blank" rel="external">Hello World!</a> 。是不是第一次看到这样的代码的时候一脸懵〇。</p>
<h2 id="原语">原语</h2><p><strong>BrainFuck</strong> 是故意刁难程序员的图灵完备语言。语言的执行类似栈的出栈入栈，搭配一个指向栈顶的指针，进行相应的输出输入等操作。整个语言只有 8 个原语</p>
<table>
<thead>
<tr>
<th style="text-align:center">原语</th>
<th style="text-align:center">操作</th>
<th style="text-align:center">类比C语言</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">指针 + 1</td>
<td style="text-align:center">++ptr</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">指针 - 1</td>
<td style="text-align:center">—ptr</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">指针指向的数据 + 1</td>
<td style="text-align:center">++*ptr</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">指针指向的数据 - 1</td>
<td style="text-align:center">—*ptr</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">输出指针指向的数据</td>
<td style="text-align:center">putChar(*ptr)</td>
</tr>
<tr>
<td style="text-align:center">,</td>
<td style="text-align:center">接受数据输入，存在指针所指向的位置</td>
<td style="text-align:center">*ptr = getChar()</td>
</tr>
<tr>
<td style="text-align:center">[</td>
<td style="text-align:center">循环开始，数据为零则结束循环</td>
<td style="text-align:center">while(*ptr){</td>
</tr>
<tr>
<td style="text-align:center">]</td>
<td style="text-align:center">循环结束</td>
<td style="text-align:center">}</td>
</tr>
</tbody>
</table>
<p>BrainFuck 只接受这 8 个字符，其他字符全部忽略。所以写注释可以直接写，只要注释中没有原语。</p>
<h2 id="简单的程序">简单的程序</h2><p>BrainFuck 中所有数据都初始化为 0 ，模型看起来像是这样的</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="string">.</span><span class="string">.</span><span class="string">.</span> <span class="comment">()用于表示当前指针的位置</span></span><br></pre></td></tr></table></figure>
<p>输出以 <strong>ASCII</strong> 编码输出。输出后数据不会清零。</p>
<p>ASCII 中第一个可见字符是 <code>!</code> ，ASCII 码为 33 。所以只要用 <code>+</code> 加 33 次就可以从 0 变成 33 了。之后输出即可。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></span><br><span class="line"><span class="comment">输出</span> <span class="comment">!</span></span><br></pre></td></tr></table></figure>
<p>直接写 33 个 <code>+</code> 似乎有点蠢。既然做的事是重复的事情，用循环是最自然的。</p>
<p>$33 = 3 \times 11$ 。循环 3 次，每次加 11 就可以了。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">(3)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">[</span>   <span class="comment">循环开始</span></span><br><span class="line">&gt;   <span class="comment">3</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">3</span> <span class="comment">(11)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&lt; <span class="comment">(3)</span> <span class="comment">11</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">-</span> <span class="comment">(2)</span> <span class="comment">11</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">]</span> <span class="comment">当前数据不为</span> <span class="comment">0</span> <span class="comment">则跳转到循环开始部分</span></span><br><span class="line"><span class="comment">当循环结束后是这样</span> <span class="comment">(0)</span> <span class="comment">33</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">(33)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">以</span> <span class="comment">ASCII</span> <span class="comment">编码输出</span></span><br></pre></td></tr></table></figure>
<p>完整的代码</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="string">.</span></span><br></pre></td></tr></table></figure>
<p>22 个字符，比原来 34 个字符少了 12 个字符。</p>
<h2 id="Hello_World!">Hello World!</h2><p><code>Hello World!</code> 的输出方式也是类似的。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">(10)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">[</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">10</span> <span class="comment">(7)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">7</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">10</span> <span class="comment">7</span> <span class="comment">(10)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">(3)</span> <span class="comment">0</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">(0)</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span> <span class="comment">10</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">(1)</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&lt;&lt;&lt;&lt; <span class="comment">(10)</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">1</span> <span class="comment">0</span> <span class="comment">……</span> </span><br><span class="line"><span class="literal">-</span> <span class="comment">(9)</span> <span class="comment">7</span> <span class="comment">10</span> <span class="comment">3</span> <span class="comment">1</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="title">]</span> <span class="comment">循环结束后</span> <span class="comment">(0)</span> <span class="comment">7*10</span> <span class="comment">10*10</span> <span class="comment">3*10</span> <span class="comment">1*10</span> <span class="comment">0</span> <span class="comment">……</span> <span class="comment">也就是</span> <span class="comment">(0)</span> <span class="comment">70</span> <span class="comment">100</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">(70)</span> <span class="comment">100</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">(72)</span> <span class="comment">100</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">72</span> <span class="comment">也就是</span> <span class="comment">H</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(100)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span> </span><br><span class="line"><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(101)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">101</span> <span class="comment">也就是</span> <span class="comment">e</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(108)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">108</span> <span class="comment">也就是</span> <span class="comment">l</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">108</span> <span class="comment">也就是</span> <span class="comment">l</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">(111)</span> <span class="comment">30</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">111</span> <span class="comment">也就是</span> <span class="comment">o</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">72</span> <span class="comment">111</span> <span class="comment">(30)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">72</span> <span class="comment">111</span> <span class="comment">(32)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">32</span>  <span class="comment">也就是</span> <span class="comment">空格</span></span><br><span class="line">&lt;&lt; <span class="comment">0</span> <span class="comment">(72)</span> <span class="comment">111</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">(87)</span> <span class="comment">111</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">87</span> <span class="comment">也就是</span> <span class="comment">W</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(111)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">111</span> <span class="comment">也就是</span> <span class="comment">o</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(114)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">114</span> <span class="comment">也就是</span> <span class="comment">r</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(108)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">108</span> <span class="comment">也就是</span> <span class="comment">l</span></span><br><span class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">(100)</span> <span class="comment">32</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">100</span> <span class="comment">也就是</span> <span class="comment">d</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">87</span> <span class="comment">100</span> <span class="comment">(32)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="literal">+</span> <span class="comment">0</span> <span class="comment">87</span> <span class="comment">100</span> <span class="comment">(33)</span> <span class="comment">10</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">33</span> <span class="comment">也就是</span> <span class="comment">!</span></span><br><span class="line">&gt; <span class="comment">0</span> <span class="comment">87</span> <span class="comment">100</span> <span class="comment">33</span> <span class="comment">(10)</span> <span class="comment">0</span> <span class="comment">……</span></span><br><span class="line"><span class="string">.</span> <span class="comment">输出</span> <span class="comment">ASCII</span> <span class="comment">10</span> <span class="comment">也就是</span> <span class="comment">换行</span></span><br></pre></td></tr></table></figure>
<p>也不是很难嘛。只不过把实现的思想隐藏到了代码中。</p>
<h2 id="最后">最后</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span>&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="BrainFuck" scheme="http://en.ors-sro.com/tags/BrainFuck/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Haskell 中的 Functor Applicative Functor 和 Monad]]></title>
    <link href="http://en.ors-sro.com/Functor-applicative-functor-and-monad-in-Haskell/"/>
    <id>http://en.ors-sro.com/Functor-applicative-functor-and-monad-in-Haskell/</id>
    <published>2016-11-27T05:37:24.000Z</published>
    <updated>2016-11-27T09:58:55.609Z</updated>
    <content type="html"><![CDATA[<p>整理一下 <a href="http://learnyouahaskell.com/chapters" target="_blank" rel="external">《Learn You a Haskell for Great Good !》</a> 介绍的 <code>Funtor</code> ，<code>Applicative Funtor</code> 和 <code>Monad</code> 。</p>
<p>并不打算写 <code>Monad</code> 相关的教程 ╮(╯▽╰)╭</p>
<a id="more"></a>
<h2 id="柯里化">柯里化</h2><p>柯里化（<a href="https://en.wikipedia.org/wiki/Currying" target="_blank" rel="external">Currying</a>）是将多个参数的函数化成一系列单个参数函数组合的技术。</p>
<p>多参函数柯里化后传递和使用都更加灵活。</p>
<p>很多语言支持手动柯里化。这个过程很简单。比如在 JavaScript 中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对第一个参数柯里化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OnePlus</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对第二个参数柯里化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusOne</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Haskell 中多参函数接受参数不全时，会自动柯里化，返回一个接受剩余参数的函数。这个过程称为偏应用（partial apply，部分应用）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; (+<span class="number">1</span>) <span class="number">2</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="comment">-- (+1) 是一个接受整形参数的函数，返回该参数 + 1 后的结果。</span></span><br><span class="line"><span class="type">Prelude</span>&gt; (<span class="number">1</span>+) <span class="number">2</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="comment">-- (1+) 是一个接受整形参数的函数，返回 1 + 该参数后的结果。</span></span><br></pre></td></tr></table></figure>
<p>两个函数的类型是这样的</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t (+<span class="number">1</span>)</span><br><span class="line">(+<span class="number">1</span>) :: <span class="type">Num</span> a =&gt; a -&gt; a</span><br><span class="line"><span class="type">Prelude</span>&gt; :t (<span class="number">1</span>+)</span><br><span class="line">(<span class="number">1</span>+) :: <span class="type">Num</span> a =&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<h2 id="类型签名">类型签名</h2><p>类型签名，或者说类型声明，用于声明函数的类型，如参数的类型，接受几个参数，返回类型等。</p>
<p>上面 <code>(+1)</code> 函数的类型是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t (+<span class="number">1</span>)</span><br><span class="line">(+<span class="number">1</span>) :: <span class="type">Num</span> a =&gt; a -&gt; a</span><br></pre></td></tr></table></figure>
<p>从左往右看，<code>(+1)</code> 说的是函数名。 <code>::</code> 类型说明操作符。可读为 「……的类型是」</p>
<p><code>Num a</code> 是一种类型约束。这部分很像变量声明，<code>Num</code> 指的是数字类型。 <code>a</code> 是变量名，可以任意取，习惯上为了<ruby>方便<rt>偷懒</rt></ruby>使用单个字母。所以 <code>Num a</code> 的意思是 <code>a</code> 的类型为 <code>Num</code> 。</p>
<p><code>=&gt;</code> 表示推出。用于分隔类型约束和函数签名的主体。</p>
<p><code>a</code> 表示接受一个变量 <code>a</code> 型的参数</p>
<p><code>-&gt;</code> 表示返回</p>
<p><code>a</code> 因为是在函数最后，所以就是返回一个 <code>a</code> 类型的参数。</p>
<h2 id="Functor">Functor</h2><p><code>Functor</code> 是可以应用 <code>fmap</code> 的类型。</p>
<p><code>fmap</code> 的类型是</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; :t fmap</span><br><span class="line"><span class="title">fmap</span> :: <span class="type">Functor</span> f =&gt; (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure>
<p>这里的签名有括号。不影响结果。可以简单的认为把 <code>(a -&gt; b)</code> 视为接受 <code>a</code> 返回 <code>b</code> 的函数。</p>
<p>从签名中可以看出，<code>fmap</code> 接受一个函数 <code>a -&gt; b</code> ，在接受一个 <code>Funtor f</code> 类型的参数 a ，返回一个 <code>Funtor f</code> 类型的 <code>b</code></p>
<p>把签名改一下，改成<code>fmap :: Functor f =&gt; (a -&gt; b) -&gt; (f a -&gt; f b)</code></p>
<p>这样理解为接受一个函数返回另外一个参数和返回值都是 <code>Funtor f</code> 类型的函数</p>
<p>看具体的例子。比如 <code>Maybe</code> 是一个 <code>Funtor</code> 。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    fmap f (<span class="type">Just</span> x) = <span class="type">Just</span> (f x)  </span><br><span class="line">    fmap f <span class="type">Nothing</span> = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure>
<p>并不是实现了 <code>fmap</code> 的实例都能称为 <code>Funtor</code> 。要想成为 <code>Funtor</code> 必须满足 Functor Law （函子律）。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fmap</span> id = id</span><br><span class="line"><span class="title">fmap</span> f . g = fmap f . fmap g</span><br></pre></td></tr></table></figure>
<p>第一条中 <code>id</code> 是一个返回自身的函数。也就是 <code>\x -&gt; x</code> 。<code>fmap id = id</code> 实际上是 <code>point-free</code> 写法，也就是无参写法。</p>
<p>写得完整一点是 <code>fmap id x = id x</code> 。意思是 <code>fmap</code> 应用返回自身的函数相当于直接应用返回自身的函数。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; fmap id (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- fmap id (Just 3) = Just (id 3) = Just 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; id (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- id (Just 3) = (\x -&gt; x) (Just 3) = Just 3</span></span><br></pre></td></tr></table></figure>
<p>第二条说的是分配律。也就是应用两个函数的组合等用于分别应用两个函数结果的组合。</p>
<p>写的完整一点是 <code>fmap f . g x = fmap f (fmap g x)</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; fmap ( (+<span class="number">1</span>) . (*<span class="number">2</span>) ) (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) (fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">3</span>))</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h2 id="Applicative_Functor">Applicative Functor</h2><p><code>Applicative Functor</code> 是可以应用 <code>pure</code> 和 apply (<code>&lt;*&gt;</code>) 的 <code>Funtor</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="container">(<span class="type">Functor</span> <span class="title">f</span>)</span> =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span>  </span><br><span class="line">    pure :: a -&gt; f a  </span><br><span class="line">    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure>
<p><code>pure</code> 的类型是 <code>a -&gt; f a</code> ，用于将类型 <code>a</code> 转化为 <code>Funtor f</code> 类型的函数。</p>
<p><code>&lt;*&gt;</code> 的类型是 <code>f (a -&gt; b) -&gt; f a -&gt; f b</code> ，用于取出 <code>Funtor f</code> 类型中函数 <code>a -&gt; b</code> ，再接受一个 <code>Funtor f</code> 类型的参数 a ，返回一个 <code>Funtor f</code>类型 b 。</p>
<p><code>Maybe</code> 是一个 <code>Applicative Funtor</code> </p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    pure = <span class="type">Just</span>  </span><br><span class="line">    <span class="type">Nothing</span> &lt;*&gt; _ = <span class="type">Nothing</span>  </span><br><span class="line">    (<span class="type">Just</span> f) &lt;*&gt; something = fmap f something</span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; pure <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure (+<span class="number">1</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> (+<span class="number">1</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">1</span> &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- pure (+) &lt;*&gt; Just 1 &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just (+) &lt;*&gt; Just 1 &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just (+1 3)</span></span><br><span class="line"><span class="comment">-- Just 4</span></span><br></pre></td></tr></table></figure>
<p>同样并不是实现了 <code>pure</code> 和 <code>&lt;*&gt;</code> 的类型就是 <code>Applicative Funtor</code> 。</p>
<p>要想成为 <code>Applicative funtor</code> 必须满足 Applicative Functor Law 。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">pure</span> f &lt;*&gt; x = fmap f x</span><br><span class="line"><span class="title">pure</span> id &lt;*&gt; v = v</span><br><span class="line"><span class="title">pure</span> (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)</span><br><span class="line"><span class="title">pure</span> f &lt;*&gt; pure x = pure (f x)</span><br><span class="line"><span class="title">u</span> &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u</span><br></pre></td></tr></table></figure>
<p>在第一条 <code>pure f &lt;*&gt; x = fmap f x</code> 可以得到其他几条</p>
<p>对于 <code>Maybe</code> 来说是这样的</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; pure (+<span class="number">1</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- pure (+1) &lt;*&gt; 3 = Just (+1) &lt;*&gt; 3 = fmap (+1) 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap (+<span class="number">1</span>) (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure id &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- pure id &lt;*&gt; Just 3 = fmap id (Just 3)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; fmap id (<span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; ((pure (.) &lt;*&gt; <span class="type">Just</span> (+<span class="number">1</span>)) &lt;*&gt; <span class="type">Just</span> (*<span class="number">2</span>)) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="comment">-- ((pure (.) &lt;*&gt; Just (+1)) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- ((Just (.) &lt;*&gt; Just (+1)) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((.) (+1)) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((+1) . )) &lt;*&gt; Just (*2)) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((+1 . ) (*2))) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- (Just ((+1) . (*2))) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- fmap ((+1) . (*2)) (Just 3)</span></span><br><span class="line"><span class="comment">-- fmap (+1) (fmap (*2) (Just 3))</span></span><br><span class="line"><span class="comment">-- fmap (+1) (Just (*2) &lt;*&gt; (Just 3))</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; (Just (*2) &lt;*&gt; Just 3)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> (+<span class="number">1</span>) &lt;*&gt; (<span class="type">Just</span> (*<span class="number">2</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure (+<span class="number">1</span>) &lt;*&gt; pure <span class="number">3</span> :: <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- pure (+1) &lt;*&gt; pure 3</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just ((+1) 3)</span></span><br><span class="line"><span class="comment">-- pure ((+1) 3)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure ( (+<span class="number">1</span>) <span class="number">3</span>) :: <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> (+<span class="number">1</span>) &lt;*&gt; pure <span class="number">3</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; pure 3</span></span><br><span class="line"><span class="comment">-- Just (+1) &lt;*&gt; Just 3</span></span><br><span class="line"><span class="comment">-- Just ((+1) (3))</span></span><br><span class="line"><span class="comment">-- Just (($ 3) (+1))</span></span><br><span class="line"><span class="comment">-- Just ($ 3) &lt;*&gt; Just (+1)</span></span><br><span class="line"><span class="comment">-- pure ($ 3) &lt;*&gt; Just (+1)</span></span><br><span class="line"><span class="type">Prelude</span>&gt; pure ($ <span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> (+<span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h2 id="Monad">Monad</h2><p><code>Monad</code> 是可以应用 bind （<code>&gt;&gt;=</code> ）的 <code>Applicative Funtor</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Monad</span> m <span class="keyword">where</span></span>  </span><br><span class="line">    return :: a -&gt; m a  </span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure>
<p>这里的 <code>return</code> 相当于 <code>Applicative Funtor</code> 的 <code>pure</code> 。</p>
<p>不出所料的 <code>Maybe</code> 也是一个 <code>Monad</code></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    return = <span class="type">Just</span>  </span><br><span class="line">    <span class="type">Nothing</span> &gt;&gt;= f = <span class="type">Nothing</span></span><br><span class="line">    (<span class="type">Just</span> x) &gt;&gt;= f = f x</span><br></pre></td></tr></table></figure>
<p>应用</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; return <span class="number">1</span> :: <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">1</span></span><br><span class="line"><span class="type">Prelude</span>&gt; return <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Nothing</span> &gt;&gt;= (\x -&gt; return (<span class="number">1</span>+x))</span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= (\x -&gt; return (<span class="number">1</span>+x))</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>同样并不是实现了 <code>&gt;&gt;=</code> 就是 <code>Monad</code> 。要想成为 <code>Monad</code> 必须满足 Monad Law （单子律）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">return</span> x &gt;&gt;= f = f x</span><br><span class="line"><span class="title">m</span> &gt;&gt;= return = m</span><br><span class="line">(m &gt;&gt;= f) &gt;&gt;= g = m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</span><br></pre></td></tr></table></figure>
<p>对于 <code>Maybe</code> 来说是这样的</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; return <span class="number">3</span> &gt;&gt;= (\x -&gt; return (x+<span class="number">1</span>)) ::<span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- return 3 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- Just 3 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x+1)) 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; (\x -&gt; return (x+<span class="number">1</span>)) <span class="number">3</span> ::<span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= return</span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="comment">-- Just 3 &gt;&gt;= return</span></span><br><span class="line"><span class="comment">-- return 3</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= (\x -&gt; return (x*<span class="number">2</span>)) &gt;&gt;= (\x -&gt; return (x+<span class="number">1</span>))</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="comment">-- Just 3 &gt;&gt;= (\x -&gt; return (x*2)) &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x*2)) 3 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- Just 6 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt;return (x+1)) 6</span></span><br><span class="line"><span class="comment">-- Just 7</span></span><br><span class="line"><span class="type">Prelude</span>&gt; <span class="type">Just</span> <span class="number">3</span> &gt;&gt;= (\x -&gt; return (x*<span class="number">2</span>) &gt;&gt;= (\x -&gt; return (x+<span class="number">1</span>)))</span><br><span class="line"><span class="type">Just</span> <span class="number">7</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x*2) &gt;&gt;= (\x -&gt; return (x+1))) 3</span></span><br><span class="line"><span class="comment">-- return (3*2) &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- Just 6 &gt;&gt;= (\x -&gt; return (x+1))</span></span><br><span class="line"><span class="comment">-- (\x -&gt; return (x+1)) 6</span></span><br><span class="line"><span class="comment">-- return (6+1)</span></span><br><span class="line"><span class="comment">-- Just 7</span></span><br></pre></td></tr></table></figure>
<h2 id="最后">最后</h2><p>还有 <code>Comonad</code> 我懒得来写了（逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理一下 <a href="http://learnyouahaskell.com/chapters">《Learn You a Haskell for Great Good !》</a> 介绍的 <code>Funtor</code> ，<code>Applicative Funtor</code> 和 <code>Monad</code> 。</p>
<p>并不打算写 <code>Monad</code> 相关的教程 ╮(╯▽╰)╭</p>]]>
    
    </summary>
    
      <category term="Haskell" scheme="http://en.ors-sro.com/tags/Haskell/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在匿名函数中递归]]></title>
    <link href="http://en.ors-sro.com/Recursive-lambda/"/>
    <id>http://en.ors-sro.com/Recursive-lambda/</id>
    <published>2016-11-20T06:13:59.000Z</published>
    <updated>2016-11-20T09:39:17.610Z</updated>
    <content type="html"><![CDATA[<p>匿名函数也就是不需要取名的函数。函数递归指的是函数通过引用自己的名字调用自身。匿名函数没有名字怎样才能递归呢？<br><a id="more"></a></p>
<h2 id="匿名函数">匿名函数</h2><p>匿名函数（lambda，$\lambda$），作为函数式编程的基本元素，已经被原来越多的语言支持。</p>
<p>比如 <strong>C#</strong> 中是这样编写匿名函数的</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = x =&gt; x + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>JavaScript</strong> 中是这样编写匿名函数的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匿名递归">匿名递归</h2><p>最典型的递归函数是阶乘函数。<br>$$<br>f(n) =<br>\begin{cases}<br>1, &amp; n \le 1 \ n*f(n-1),&amp; n \gt 1<br>\end{cases}<br>$$<br>翻译成 JavaScript </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * f(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个递归，但不是一个真正意义上的匿名递归函数。因为函数体中的 <code>f(n-1)</code> 引用了自身的名字。</p>
<p>通常递归函数需要引用自身的名字来调用自身达到递归的效果。</p>
<p>匿名函数没有名字，没办法这么做。</p>
<p>这么想想递归匿名函数看似是不可能的。</p>
<p>但是是可以做到的。</p>
<p>看下面的这个函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> g(g);</span><br><span class="line">	&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> f(h(h))(x);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">self</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * self(n - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>测试调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> g(g);</span><br><span class="line">	&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> f(h(h))(x);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">self</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * self(n - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> g(g);</span><br><span class="line">	&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> f(h(h))(x);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">self</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * self(n - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure>
<p>这个函数就是阶乘函数的匿名递归版。里面用到了 <strong>Y 组合子</strong> 。</p>
<h2 id="推导过程">推导过程</h2><h2 id="来龙去脉">来龙去脉</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>匿名函数也就是不需要取名的函数。函数递归指的是函数通过引用自己的名字调用自身。匿名函数没有名字怎样才能递归呢？<br>]]>
    
    </summary>
    
      <category term="lambda" scheme="http://en.ors-sro.com/tags/lambda/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SICP 1.1 编程的要素]]></title>
    <link href="http://en.ors-sro.com/SICP-1-1-The-Elements-of-Programming-exercise/"/>
    <id>http://en.ors-sro.com/SICP-1-1-The-Elements-of-Programming-exercise/</id>
    <published>2016-11-12T00:59:55.000Z</published>
    <updated>2016-11-12T02:28:58.015Z</updated>
    <content type="html"><![CDATA[<p>开新坑啦！</p>
<a id="more"></a>
<h2 id="前言">前言</h2><p>很早之前就已经接触 《计算机程序的构造和解释》 （Structure and Interpretation of Computer Programs，SICP），也曾经大致看完，不过只是单纯的看，没有做习题。所以过后很快就忘了。这次开坑目的是希望能一字一句仔细阅读，完成课后练习，加深对书中概念的理解。</p>
<p>目前暂定为一个小节如 <strong>1.1</strong> 的笔记和所有习题解答为一篇文章。因为是自己做的，所以不保证答案正确。</p>
<p>目测深坑，可能弃坑，请勿尾随。</p>
<h2 id="笔记">笔记</h2><h3 id="三种方式">三种方式</h3><ol>
<li>基本表达式，用于展现语言所关注的最简单的元素。</li>
<li>组合的方式，用于组合最基本的元素。</li>
<li>抽象的方式，用于组合和操作命名的元素。</li>
</ol>
<p>这里说的比较抽象。个人理解是第一个基本表达式就是程序的保留字，操作符和内置函数等，如 <code>if</code> <code>while</code> <code>int</code> <code>=</code> 。第二个组合的方式说的是用第一个基本表达式之间的组合。比如 <code>if</code> 和 <code>while</code> 组合可以实现绝大部分的逻辑。第三个抽象的方式就是第二个组合之后的结果，可以将其命名，形成一个个单元，比如函数。这样编写函数的过程本质就是抽象的过程。</p>
<h3 id="数据和过程">数据和过程</h3><p>数据和过程并不是那么严格区分的。在面向过程式编程中，通常数据和过程比较容易区分。程序的输入可以算作一种数据。函数是一种很典型的过程。例如计算阶乘的程序，接收一个 <code>n</code> 作为输入，<code>n</code> 被视为数据。之后计算出 <code>n</code> 的阶乘，返回结果。计算的步骤就是一个过程。在面向对象中也差不多，只不过数据变成了属性，过程变成了成员函数。函数的参数是一种数据，但如果把过程当作参数传递，那么传递的是过程还是数据呢？也就是说当传递函数指针（或者回调）的时候，数据和过程的界限就不是那么清晰了。在 <code>Lisp</code> 系列的语言中，所有的程序都是 S 表达式，也就是列表。过程是一个列表，数据也是一个列表。所以过程和数据在语言看来是一样的。因此在 <code>Lisp</code> 系列的语言中，编写操作数据的过程和编写操作过程的过程难度差不多。元编程，或者说宏，就是自然而然的思想。</p>
<h3 id="表达式">表达式</h3><p>书中约定了教学语言是 <code>Lisp</code> 方言 <code>Scheme</code> 。语言所用的表达式是 <a href="https://en.wikipedia.org/wiki/S-expression" target="_blank" rel="external">S 表达式</a>。S 表达式使用<a href="https://en.wikipedia.org/wiki/Polish_notation" target="_blank" rel="external">前缀表示法</a>，操作符放在操作数前面。例如 <code>1 + 2</code> 是这么表示</p>
<table>
<thead>
<tr>
<th>表示方式</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>前缀表达式</td>
<td>+ 1 2</td>
</tr>
<tr>
<td>中缀表达式</td>
<td>1 + 2</td>
</tr>
<tr>
<td>后缀表达式</td>
<td>1 2 +</td>
</tr>
</tbody>
</table>
<p>为什么不用更常用的中缀表达式呢。因为中缀表达式的计算规则有两条，一是先计算优先级大的，二是从左往右计算。你也许听过那个很烂熟的哏：</p>
<p>「一加二乘三等于多少？」</p>
<p>「九啊」</p>
<p>「你个傻〇！是七！」</p>
<p>这个很无聊的哏中展现了 <code>(1 + 2) * 3 = 9</code> ， <code>1 + 2 * 3 = 7</code> 。也就是说如果想要改变计算的顺序，就必须使用优先级更高的括号操作符括住表达式。</p>
<p>如果是使用前缀表达式就只需要一条规则，从左往右计算。没有优先级的说法，自然也不需要有括号。比如 <code>1 + 2 * 3</code> 的前缀表达式是 <code>+ 1 * 2 3</code> 。</p>
<p>从左往右扫描，看到 <code>+ 1</code> 知道要用 1 和其他数字相加，这个数字是多少呢？再看到 <code>* 2 3</code>，原来这个数字是 <code>* 2 3</code> ，也就是 6，最后就是 <code>+ 1 6</code> 也就是 7 。有一点递归返回的感觉。</p>
<p>如果要计算 <code>(1 + 2) * 3</code> ，那么相应的前缀表达式是 <code>* + 1 2 3</code> 。</p>
<p>计算过程也很简单</p>
<p><code>* + 1 2 3</code> ⇒ <code>* 3 3</code> ⇒ 9</p>
<p>那为什么不用<a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank" rel="external">后缀表达式</a>呢？</p>
<p>S 表达式为什么不用不了解。个人觉得后缀表达式真的很丧心病狂，非常反直觉。例如 <code>1 2 + 3 *</code> 是怎么计算的呢？</p>
<p>它不是 <code>1 + 2 * 3</code> ，也不是从右往左计算的 <code>(3 + 2) * 1</code> ，而是 <code>(1 + 2) * 3</code> 。</p>
<p>虽说不用中缀表达式可以节省括号，但是 S 表达式里面全是括号啊！摔！</p>
<p>不使用中缀表达式另外一个优点是可以天然地支持多参数。</p>
<p>例如 1 + 2 + 3 的 S 表达式是 <code>(+ (+ 1 2) 3)</code> 。可以写成 <code>(+ 1 2 3)</code> 。</p>
<p>因为中缀表达式操作符两边要有操作数，所以不能很方便的表达多参数的情况。</p>
<h3 id="好好写代码">好好写代码</h3><p>S 表达式无脑嵌套会非常辣眼睛。比如看到 <code>(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))</code> 会一脸懵 X，写成这样就会好很多</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">4</span>)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">3</span> <span class="number">5</span>)</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">10</span> <span class="number">7</span>)</span></span><br><span class="line">      <span class="number">6</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>也就是操作符在前，操作数垂直对齐。</p>
<h3 id="变量绑定与环境">变量绑定与环境</h3><p><code>Scheme</code> 使用 <code>define</code> 绑定全局变量。如果不允许声明和绑定变量，那就只能用递归来写程序了，也就是「纯函数式」编程（大雾）。</p>
<p>出现在函数参数列表中的变量称为绑定变量。如 <code>(define (square x) (* x x))</code> 中的 <code>x</code> 称为绑定变量。</p>
<p>没有被绑定的变量称为自由变量。如 <code>(define (cube x) (* (square x) x))</code> 中的 <code>square</code> 是自由变量。因为参数列表 <code>cube x</code> 中只有 <code>x</code> ，没有 <code>square</code> 。这意味着 <code>x</code> 的值由调用函数 <code>cube</code> 传入的参数决定，与 <code>cube</code> 死死的绑在了一起。而 <code>square</code> 的值则需要去<strong>上下文环境</strong>查找。</p>
<p>上下文环境可以简单的理解为储存变量的地方。既然有储存肯定有读取，读取的时候按规则区分为<strong>词法作用域</strong>和<strong>动态作用域</strong>。</p>
<p>词法作用域，也称为动态作用域，是大部分语言常用的查找规则。</p>
<p>动态作用域，有些反直觉，早期语言使用的规则。因为环境创建的时候什么事都不用干就是天然的动态作用域。熟悉 <code>Javascript</code> 的都知道 <code>this</code>关键字吧。这个家伙有很多的异常表现就是因为它是动态作用域。还好 <code>Scheme</code> 出现解决了动态作用域的问题。</p>
<p>词法作用域和动态作用域的区别可以用<a href="http://zhihu.com/question/20032419/answer/44059188" target="_blank" rel="external">两句话解释清楚</a>。</p>
<p>替换绑定的变量不影响结果。也就是</p>
<p><code>(define (square x) (* x x))</code> 和 <code>(define (square y) (* y y))</code> 结果是一样的。其实这是 $\alpha$ 变换（大雾）。</p>
<p>函数的定义也是一个变量绑定的过程。在 <code>Scheme</code> 中函数默认返回最后一个计算结果，不需要显式地 <code>return</code> 。</p>
<p>还有一个语法细节，定义变量是 <code>(define a 1)</code> ，定义函数是 <code>(define  (square x) (* x x))</code> 。</p>
<p>语法看似不一致，其实是统一的。可以把 <code>define</code> 看作 <code>=</code> 。式子可以这么理解。</p>
<p><code>(define a 1)</code> ⇒ <code>a = 1</code></p>
<p><code>(define (square x) (* x x))</code> ⇒ <code>(square x) = (* x x)</code></p>
<h3 id="求值规则">求值规则</h3><blockquote>
<p>To evaluate a combination, do the following:</p>
<ol>
<li>Evaluate the subexpressions of the combination.</li>
<li>Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands)</li>
</ol>
</blockquote>
<p>求值表达式，按以下规则进行</p>
<ol>
<li>求值子表达式</li>
<li>应用其操作符于该子表达式</li>
</ol>
<p>所以这是一个嵌套的求值过程。嵌套结构用树结构很容易表示。如果用树来表示，那么求值的时候相当于树的遍历。</p>
<p>这里没有似乎没有说清楚参数求值是从左往右还是从右往左。</p>
<p>这种求值方式是传值调用（Call by value），这里说的传值调用强调的是求值的时机。</p>
<p>传值调用，也就是在函数调用前，求出每个参数的值。例如平方函数 <code>(define (square x) (* x x))</code> 在接收参数 5 的调用时是这么求值的。</p>
<p><code>(square 5)</code> ⇒ <code>(* 5 5)</code> ⇒ 25</p>
<p>在接收参数为 <code>(square 2)</code> 时是这么求值的</p>
<p><code>(square (square 2))</code> ⇒ <code>(square (* 2 2))</code> ⇒ <code>(square 4)</code> ⇒ <code>(* 4 4)</code> ⇒ 16</p>
<p>传值调用在书中被称为 <strong>Applicative-order</strong> 。</p>
<p>还有一种求值方式是传名调用（Call by name），在书中被称为 <strong>Normal-order</strong> 。</p>
<p>简单地说是把所有表达式中命名的变量求值完成后，再对整个表达式求值。</p>
<p>比如 <code>(square (square (+ 1 2)))</code> 按传名调用是这样</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">3</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">9</span> <span class="number">9</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>
<p>如果是传值调用是这样</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">1</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword">square</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">square</span> <span class="number">9</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">9</span> <span class="number">9</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="number">81</span></span><br></pre></td></tr></table></figure>
<p>在这里两种方式最后的结果一致。但是在参数求值有副作用或者有求值短路等现象出现时，结果就会不一样。习题 1.5 会给出这样的情况。</p>
<h3 id="递归与循环">递归与循环</h3><p>平方根函数 <code>sqrt-iter</code> 在最后调用了<code>sqrt-iter</code>。也就是自己调用自己。这种方式称为递归。</p>
<p>与递归对应的是迭代。实际上递归更符合人类思维，迭代更符合计算机思维。</p>
<p>递归很容易给人一种计算效率低的印象。但并不是所有的递归都是这样。</p>
<p>像平方根函数这种在函数最后一句只调用自身的递归称为尾递归。</p>
<p>普通的递归在计算到出口后会将结果一层层向上返回，所以需要在堆栈中记录返回地址等相关信息，层数一多很可能就爆栈。</p>
<p>而尾递归因为递归放在尾部，返回后也没有后续可执行内容（continuation），所以可以直接抛弃之前的调用信息。也就是尾递归通过抛弃之前的调用信息而防止爆栈。常见的现代编译器都会将尾递归优化为循环。所以尾递归的效率并不低。</p>
<p>然而并不是所有的递归都能转化为循环。</p>
<h3 id="封装与面向对象">封装与面向对象</h3><p><code>Scheme</code> 允许在函数定义中定义函数，所以通常会看到一个函数，内部定义不少小函数和常量，之后调用这些小函数。</p>
<p>这样把数据和过程包装在一个函数的手段称为封装。</p>
<p>说到封装，很自然就想到了面向对象。毕竟面向对象的三大特性是封装，继承，多态。</p>
<p>说到对象就会想到 <code>class</code>，实际上面向对象跟 <code>class</code> 一点关系都没有。</p>
<p><code>class</code>是实现面向对象的一种方式但不是唯一方式。 原型链也是一种实现面向对象方式。</p>
<p>现在的面向对象跟 Alan Kay 的面向对象已经不是同一个东西了。</p>
<p>Alan Kay 的面向对象强调封装与消息发送。他认为每一个对象都要有一个 IP 。</p>
<p>如果按照 Alan Kay 的观点大家的面向对象都跑偏了（逃</p>
<h2 id="习题">习题</h2><h3 id="习题_1-1">习题 1.1</h3><blockquote>
<p><strong>Exercise 1.1.</strong>  Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">9</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">6</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">4</span> <span class="number">6</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> a <span class="number">3</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> b <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">=</span></span> a b)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span>)</span></span><br><span class="line">    b</span><br><span class="line">    a)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">4</span>)</span> <span class="number">6</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span> <span class="number">7</span> a)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">25</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> b a)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span> a)</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> a b)</span> b)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">-1</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这道题所有表达式都不存在命名的函数，所以直接求值，不用考虑求值方式。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="comment">;; 10 规则 1.1.3 第一条：字面量的值为它们相应的值</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 12 规则 1.1.3 第二条：内置操作符为它们相应的操作符</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">9</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 8 是 9 - 1 不是 1 - 9 。参考前缀表达式定义</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">6</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 6/2 = 3</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">4</span> <span class="number">6</span>)</span>)</span></span><br><span class="line"><span class="comment">;; (+ 8 (- 2)) = 6</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> a <span class="number">3</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> b <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 注意此时 b 已经被赋值为 a + 1 = 3 + 1 = 4</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span></span><br><span class="line"><span class="comment">;;规则 1.1.3 第三条：命名的符号值从环境中获取</span></span><br><span class="line"><span class="comment">;;这里使用了参数从左往右求值的顺序</span></span><br><span class="line"><span class="comment">;;(+ 3 b (* a b))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 (* a b))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 (* 3 b))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 (* 3 4))</span></span><br><span class="line"><span class="comment">;;(+ 3 4 12)</span></span><br><span class="line"><span class="comment">;;19</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">=</span></span> a b)</span></span><br><span class="line"><span class="comment">;;(= 3 b)</span></span><br><span class="line"><span class="comment">;;(= 3 4)</span></span><br><span class="line"><span class="comment">;; #f Scheme 用 #t 和 #f 表示 true 和 false。在脚注 17 中有提到</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">and</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> b <span class="list">(<span class="keyword"><span class="built_in">*</span></span> a b)</span>)</span>)</span></span><br><span class="line">    b</span><br><span class="line">    a)</span></span><br><span class="line"><span class="comment">;;(if (and (&gt; 4 3) (&lt; b (* a b))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; b (* a b))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; 4 (* a b))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; 4 (* 3 4))) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t (&lt; 4 12)) b a)</span></span><br><span class="line"><span class="comment">;;(if (and #t #t) b a)</span></span><br><span class="line"><span class="comment">;;b</span></span><br><span class="line"><span class="comment">;;4</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> a <span class="number">4</span>)</span> <span class="number">6</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">=</span></span> b <span class="number">4</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span> <span class="number">7</span> a)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">25</span>)</span>)</span></span><br><span class="line"><span class="comment">;;(cond ((= 3 4) 6) ((= b 4) (+ 6 7 a)) (else 25))</span></span><br><span class="line"><span class="comment">;;(cond (#f 6) ((= b 4) (+ 6 7 a)) (else 25))</span></span><br><span class="line"><span class="comment">;;(cond (#f 6) (#t (+ 6 7 a)) (else 25))</span></span><br><span class="line"><span class="comment">;;(+ 6 7 a)</span></span><br><span class="line"><span class="comment">;;(+ 6 7 3)</span></span><br><span class="line"><span class="comment">;;16</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b a)</span> b a)</span>)</span></span><br><span class="line"><span class="comment">;;(+ 2 (if (&gt; 4 a) b a))</span></span><br><span class="line"><span class="comment">;;(+ 2 (if (&gt; 4 3) b a))</span></span><br><span class="line"><span class="comment">;;(+ 2 (if #t b a))</span></span><br><span class="line"><span class="comment">;;(+ 2 b)</span></span><br><span class="line"><span class="comment">;;(+ 2 4)</span></span><br><span class="line"><span class="comment">;;6</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span> a)</span></span><br><span class="line">         <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> a b)</span> b)</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">else</span></span> <span class="number">-1</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="comment">;;(* (cond ((&gt; 3 4) a) ((&lt; a b) b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) ((&lt; a b) b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) ((&lt; 3 4) b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) (#t b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* (cond (#f a) (#t b) (else -1)) (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* b (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* 4 (+ a 1))</span></span><br><span class="line"><span class="comment">;;(* 4 (+ 3 1))</span></span><br><span class="line"><span class="comment">;;(* 4 4)</span></span><br><span class="line"><span class="comment">;;16</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-2">习题 1.2</h3><blockquote>
<p><strong>Exercise 1.2.</strong>  Translate the following expression into prefix form<br>$$<br>\frac {5+4+(2-(3-(6+ \frac 4 3)))} {3(6-2)(2-7)}<br>$$</p>
</blockquote>
<p>先把分子和分母转成前缀表达式，利用前缀表达式<a href="#表达式">支持多参数的特性</a>简化式子，再用 <code>(/ 分子 分母)</code> 连起来即可。</p>
<p><strong>这里说明中缀表达式转前缀表达式的过程</strong></p>
<p>分子</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> </span><br><span class="line">   <span class="number">4</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">3</span></span><br><span class="line">         <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span></span><br><span class="line">            <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">4</span></span><br><span class="line">               <span class="number">3</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>分母</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">6</span></span><br><span class="line">      <span class="number">2</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span></span><br><span class="line">      <span class="number">7</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>所以答案是</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">5</span> <span class="number">4</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">3</span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="number">6</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">4</span> <span class="number">3</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">   <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">3</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">6</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">2</span> <span class="number">7</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-3">习题 1.3</h3><blockquote>
<p><strong>Exercise 1.3.</strong>  Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.</p>
</blockquote>
<p>从动词可以判断有多少个函数</p>
<ol>
<li>a procedure that take … return ..</li>
<li>sum of …</li>
<li>squares…</li>
</ol>
<p>从下往上一个个写回去，<code>square</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br></pre></td></tr></table></figure>
<p><code>sum</code>求和</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">+</span></span> a b)</span>)</span></span><br></pre></td></tr></table></figure>
<p>接收三个参数返回最大和次大的两个数。因为加法满足交换律 <code>a + b = b + a</code> 所以只需要确定出最小的数，把比较大的两个数求平方和即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sum-larger-square</span> a b c)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a b)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b c)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> a)</span> <span class="list">(<span class="keyword">square</span> b)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> a)</span> <span class="list">(<span class="keyword">square</span> c)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> a c)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> b)</span> <span class="list">(<span class="keyword">square</span> a)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">square</span> b)</span> <span class="list">(<span class="keyword">square</span> c)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span></span><br><span class="line"><span class="comment">;; 13</span></span><br><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;; 61</span></span><br><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span>)</span></span><br><span class="line"><span class="comment">;; 145</span></span><br><span class="line"><span class="list">(<span class="keyword">sum-larger-square</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br></pre></td></tr></table></figure>
<h3 id="习题_1-4">习题 1.4</h3><blockquote>
<p><strong>Exercise 1.4.</strong>  Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">a-plus-abs-b</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">&gt;</span></span> b <span class="number">0</span>)</span> + -)</span> a b)</span>)</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>描述函数行为。按语句翻译即可。首先看到函数定义 <code>(define (a-plus-abs-b a b) (...)</code> 这是一个接收两个参数的函数，再看函数体 <code>((if (&gt; b 0) + -) a b)</code> 如果 <code>b</code> 大于 0 则结果为 <code>+</code> 操作符，否则为 <code>-</code> 操作符。然后将该操作符应用到参数 <code>a</code> <code>b</code> 上。所以答案是</p>
<p><code>a</code> 加上 <code>b</code> 的绝对值。 （虽然函数名字已经提示得够明显了。）</p>
<p>这道题展示了过程（函数）是可以作为结果返回的。根据<code>b</code> 的正负，返回<code>+</code> 或 <code>-</code> 。这种做法在 <code>Scheme</code> 中很常见。因为过程（函数）和数据在语言看来没有区别。既然可以返回数字（典型的数据），也自然可以返回函数（典型的过程）。</p>
<h3 id="习题_1-5">习题 1.5</h3><blockquote>
<p><strong>Exercise 1.5.</strong>  Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">p</span>)</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">test</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> x <span class="number">0</span>)</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      y)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Then he evaluates the expression<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)</p>
</blockquote>
<p>先回顾一下概念</p>
<p><strong>Applicative-order</strong>: evaluate the arguments and then apply. 求值参数并应用。</p>
<p><strong>Normal-order</strong>: fully expand and then reduce. 完全展开后规约。</p>
<p>先按 applicative-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; applicative-order</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 挨个求值参数 0 (p)</span></span><br><span class="line"><span class="comment">;; 求值 0 结果为 0 1.1.3 第一条：字面量的值为它们相应的值</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求值 (p) 规则 1.1.3 第三条：命名的符号值从环境中获取</span></span><br><span class="line"><span class="comment">;; 环境中 (define (p) (p))</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="list">(<span class="keyword">p</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求值后又出现 p ，再次对 p 求值</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="list">(<span class="list">(<span class="keyword">p</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 递归，没有办法获得具体的值。无限循环</span></span><br></pre></td></tr></table></figure>
<p>按 normal-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; normal-order</span></span><br><span class="line"><span class="list">(<span class="keyword">test</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 先完全展开定义的函数，在规约求值</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword"><span class="built_in">=</span></span> <span class="number">0</span> <span class="number">0</span>)</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="literal">#t</span> <span class="number">0</span> <span class="list">(<span class="keyword">p</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 题目中提到 if 语句中的条件判断优先执行，结果只执行相应的分支</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>所以答案是按 applicative-order 执行会无限循环，按 normal-order 执行结果是 0 。</p>
<h3 id="习题_1-6">习题 1.6</h3><blockquote>
<p><strong>Exercise 1.6.</strong>  Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. ``Why can’t I just define it as an ordinary procedure in terms of cond?’’ she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">new-if</span> predicate then-clause else-clause)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">cond</span></span> <span class="list">(<span class="keyword">predicate</span> then-clause)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">else</span></span> else-clause)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>Eva demonstrates the program for Alyssa:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(new-if (= 2 3) 0 5)</span><br><span class="line">*5*</span><br><span class="line">(new-if (= 1 1) 0 5)</span><br><span class="line">*0*</span><br></pre></td></tr></table></figure>
<p>Delighted, Alyssa uses new-if to rewrite the square-root program:</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">sqrt-iter</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">          guess</span><br><span class="line">          <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">                     x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>What happens when Alyssa attempts to use this to compute square roots? Explain.</p>
</blockquote>
<p>按默认的 applicative-order 展开</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sqrt-iter</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line"><span class="comment">;; 根据 applicative-order 先求参数的值</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword">good-enough?</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求 (good-enough 1 2) 的值</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">square</span> <span class="number">1</span>)</span> <span class="number">2</span>)</span> <span class="number">0.001</span>)</span>)</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 2 - 1 &gt; 0.001 所以结果是 #f</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1</span> <span class="number">2</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;;接着求 (sqrt-iter (improve 1 2)2)</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">average</span> <span class="number">1</span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="number">2</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;;1 和 2 的平均值为 1.5</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">sqrt-iter</span> <span class="number">1.5</span> </span><br><span class="line">                   <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 求值 (sqrt-iter 1.5 2)</span></span><br><span class="line"><span class="list">(<span class="keyword">new-if</span> <span class="literal">#f</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="list">(<span class="keyword">new-if</span> <span class="list">(<span class="keyword">good-enough?</span> <span class="number">1.5</span> <span class="number">2</span>)</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">                <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> <span class="number">1.5</span> <span class="number">2</span>)</span></span><br><span class="line">                           <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 又回到开始的地方。无穷无尽的求值</span></span><br></pre></td></tr></table></figure>
<p>所以答案是会一直递归下去。无穷无尽。</p>
<p>解决方法是使用<strong>宏</strong>，宏在求值会先展开后求参数的值。这个后面章节应该会讲。</p>
<h3 id="习题_1-7">习题 1.7</h3><blockquote>
<p><strong>Exercise 1.7.</strong>  The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?</p>
</blockquote>
<p>这道题有两个问题。</p>
<p>第一个问题是解释为什么遇到特别小的数和特别大的数时候 <code>good-enough</code> 失效？第二个问题是请设计一个 <code>good-enough</code></p>
<p>先来看第一个问题。</p>
<p>在遇到特别小的数如0.0001的时候</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">0.0004</span>)</span></span><br><span class="line"><span class="comment">;;(guess next-guess)</span></span><br><span class="line"><span class="comment">;;(1 0.5002)</span></span><br><span class="line"><span class="comment">;;(0.5002 0.2504998400639744)</span></span><br><span class="line"><span class="comment">;;(0.2504998400639744 0.12604832373535454)</span></span><br><span class="line"><span class="comment">;;(0.12604832373535454 0.06461085492374607)</span></span><br><span class="line"><span class="comment">;;(0.06461085492374607 0.0354008825558513)</span></span><br><span class="line"><span class="comment">;;(0.0354008825558513 0.023350017942701275)</span></span><br><span class="line"><span class="comment">;;0.0354008825558513</span></span><br></pre></td></tr></table></figure>
<p>正确结果应该是 0.01。那为什么结果是 0.03 呢。</p>
<p>因为在 <code>(if good-enough? guess x)</code> 中 $|0.035^2 - 0.0004| = 0.0008 &lt; 0.001$ </p>
<p>也就是误差范围太大了。</p>
<p>在遇到特别大的数$10^{50}$的时候</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">1000000000000000000000000000000000000000000000000000</span>)</span></span><br><span class="line"><span class="comment">;;(guess next-guess)</span></span><br><span class="line"><span class="comment">;;(1 5e+50)</span></span><br><span class="line"><span class="comment">;;(5e+50 2.5e+50)</span></span><br><span class="line"><span class="comment">;;(2.5e+50 1.25e+50)</span></span><br><span class="line"><span class="comment">;;(1.25e+50 6.25e+49)</span></span><br><span class="line"><span class="comment">;;(6.25e+49 3.125e+49)</span></span><br><span class="line"><span class="comment">;;......</span></span><br><span class="line"><span class="comment">;;(8.275835485684287e+26 4.143959428915591e+26)</span></span><br><span class="line"><span class="comment">;;(4.143959428915591e+26 2.084045469651032e+26)</span></span><br><span class="line"><span class="comment">;;(2.084045469651032e+26 1.066014533818449e+26)</span></span><br><span class="line"><span class="comment">;;(1.066014533818449e+26 5.799109426226321e+25)</span></span><br><span class="line"><span class="comment">;;(5.799109426226321e+25 3.7617560672361973e+25)</span></span><br><span class="line"><span class="comment">;;(3.7617560672361973e+25 3.2100444948749963e+25)</span></span><br><span class="line"><span class="comment">;;(3.2100444948749963e+25 3.1626330556312044e+25)</span></span><br><span class="line"><span class="comment">;;(3.1626330556312044e+25 3.1622776801368567e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776801368567e+25 3.1622776601683795e+25) </span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br><span class="line"><span class="comment">;;(3.1622776601683795e+25 3.1622776601683795e+25)</span></span><br></pre></td></tr></table></figure>
<p>可以发现某个时刻开始猜测的下一个更好的值和原来是同一个值。</p>
<p>这是因为如果要精确的话应该在3.1622…3795e25 的 …3795继续精确下去。但是浮点数的精确度不够用了，不能再表示更长的小数了。</p>
<p>所以这就是出错的原因。</p>
<p>接下来第二个问题是怎么改进。题目中已经提示观察近似值和下一个近似值之间的变化，当变化足够小的时候停止。</p>
<p>变化足够小可以考虑用差来表示，但是考虑到遇到特别小的数时会出现问题。</p>
<p>所以使用比值判断是否变化足够小，也就是只需要改进 <code>good-enough?</code> 即可</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line"> <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="number">1</span> </span><br><span class="line">            <span class="list">(<span class="keyword"><span class="built_in">/</span></span> guess <span class="list">(<span class="keyword">improve</span> guess x)</span>)</span>)</span>)</span> </span><br><span class="line">    <span class="number">0.001</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>判断近似值的比值是否足够靠近 1 。也就是两个近似值是否足够接近。</p>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">4</span>)</span></span><br><span class="line"><span class="comment">;;(1 2.5)</span></span><br><span class="line"><span class="comment">;;(2.5 2.05)</span></span><br><span class="line"><span class="comment">;;(2.05 2.000609756097561)</span></span><br><span class="line"><span class="comment">;;(2.000609756097561 2.0000000929222947)</span></span><br><span class="line"><span class="comment">;;2.000609756097561</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">0.0004</span>)</span></span><br><span class="line"><span class="comment">;;(1 0.5002)</span></span><br><span class="line"><span class="comment">;;(0.5002 0.2504998400639744)</span></span><br><span class="line"><span class="comment">;;(0.2504998400639744 0.12604832373535454)</span></span><br><span class="line"><span class="comment">;;(0.12604832373535454 0.06461085492374607)</span></span><br><span class="line"><span class="comment">;;(0.06461085492374607 0.0354008825558513)</span></span><br><span class="line"><span class="comment">;;(0.0354008825558513 0.023350017942701275)</span></span><br><span class="line"><span class="comment">;;(0.023350017942701275 0.02024031288207058)</span></span><br><span class="line"><span class="comment">;;(0.02024031288207058 0.020001426615330147)</span></span><br><span class="line"><span class="comment">;;(0.020001426615330147 0.020000000050877154)</span></span><br><span class="line"><span class="comment">;;0.020001426615330147</span></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">sqrt</span></span> <span class="number">1000000000000000000000000000000000000000000000000000</span>)</span></span><br><span class="line"><span class="comment">;;(1 5e+50)</span></span><br><span class="line"><span class="comment">;;(5e+50 2.5e+50)</span></span><br><span class="line"><span class="comment">;;(2.5e+50 1.25e+50)</span></span><br><span class="line"><span class="comment">;;(1.25e+50 6.25e+49)</span></span><br><span class="line"><span class="comment">;;(6.25e+49 3.125e+49)</span></span><br><span class="line"><span class="comment">;;(3.125e+49 1.5625e+49)</span></span><br><span class="line"><span class="comment">;;(1.5625e+49 7.8125e+48)</span></span><br><span class="line"><span class="comment">;;(7.8125e+48 3.90625e+48)</span></span><br><span class="line"><span class="comment">;;(3.90625e+48 1.953125e+48)</span></span><br><span class="line"><span class="comment">;;(1.953125e+48 9.765625e+47)</span></span><br><span class="line"><span class="comment">;;......</span></span><br><span class="line"><span class="comment">;;(8.275835485684287e+26 4.143959428915591e+26)</span></span><br><span class="line"><span class="comment">;;(4.143959428915591e+26 2.084045469651032e+26)</span></span><br><span class="line"><span class="comment">;;(2.084045469651032e+26 1.066014533818449e+26)</span></span><br><span class="line"><span class="comment">;;(1.066014533818449e+26 5.799109426226321e+25)</span></span><br><span class="line"><span class="comment">;;(5.799109426226321e+25 3.7617560672361973e+25)</span></span><br><span class="line"><span class="comment">;;(3.7617560672361973e+25 3.2100444948749963e+25)</span></span><br><span class="line"><span class="comment">;;(3.2100444948749963e+25 3.1626330556312044e+25)</span></span><br><span class="line"><span class="comment">;;(3.1626330556312044e+25 3.1622776801368567e+25)</span></span><br><span class="line"><span class="comment">;;3.1626330556312044e+25</span></span><br></pre></td></tr></table></figure>
<p>程序没有卡死，也能求出近似值。现在程序还有问题吗？有的，很明显是 <code>(sqrt 0)</code>，千万不要轻易尝试后果很严重（认真脸）</p>
<h3 id="习题_1-8">习题 1.8</h3><blockquote>
<p><strong>Exercise 1.8.</strong>  Newton’s method for cube roots is based on the fact that if <em>y</em> is an approximation to the cube root of <em>x</em>, then a better approximation is given by the value<br>$$<br>\frac{x/y^2 + 2y}{3}<br>$$<br>Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3.4" target="_blank" rel="external">1.3.4</a> we will see how to implement Newton’s method in general as an abstraction of these square-root and cube-root procedures.)</p>
</blockquote>
<p>题目中已经给出从一个近似值得到更好的近似值的式子。仿造 <code>sqrt</code> 函数，修改 <code>improve</code> 即可。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">square</span> x)</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.0001</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">cube</span> guess)</span> x)</span>)</span> tolerance)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="list">(<span class="keyword">square</span> guess)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> guess)</span>)</span></span><br><span class="line">     <span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root-iter</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess x)</span></span><br><span class="line">      guess</span><br><span class="line">      <span class="list">(<span class="keyword">cube-root-iter</span> <span class="list">(<span class="keyword">improve</span> guess x)</span> x)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cube-root-iter</span> <span class="number">1.0</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">cube-root</span> <span class="number">8</span>)</span></span><br><span class="line"><span class="comment">;; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">cube-root</span> <span class="number">27</span>)</span></span><br><span class="line"><span class="comment">;; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">cube-root</span> <span class="list">(<span class="keyword">cube</span> <span class="number">27</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 27</span></span><br></pre></td></tr></table></figure>
<p>也可以写成封装的形式</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">square</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> x x)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube</span> x)</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="list">(<span class="keyword">square</span> x)</span> x)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> tolerance <span class="number">0.0001</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">&lt;</span></span> <span class="list">(<span class="keyword"><span class="built_in">abs</span></span> <span class="list">(<span class="keyword"><span class="built_in">-</span></span> <span class="list">(<span class="keyword">cube</span> guess)</span> x)</span>)</span> tolerance)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">/</span></span> <span class="list">(<span class="keyword"><span class="built_in">+</span></span> <span class="list">(<span class="keyword"><span class="built_in">/</span></span> x <span class="list">(<span class="keyword">square</span> guess)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword"><span class="built_in">*</span></span> <span class="number">2</span> guess)</span>)</span></span><br><span class="line">       <span class="number">3</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword"><span class="built_in">define</span></span> <span class="list">(<span class="keyword">cube-root-iter</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword"><span class="built_in">if</span></span> <span class="list">(<span class="keyword">good-enough?</span> guess)</span></span><br><span class="line">        guess</span><br><span class="line">        <span class="list">(<span class="keyword">cube-root-iter</span> <span class="list">(<span class="keyword">improve</span> guess)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cube-root-iter</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>注意到第二行 <code>(define (square x) (* x x))</code> 中的 <code>x</code> 产生了变量覆盖（shadowing），所以<code>(* x x)</code> 的 <code>x</code>其实是 <code>square</code> 的 <code>x</code> 而不是 <code>cube-root</code> 的 <code>x</code> 。编译器会正确区分，不会混淆。</p>
<h2 id="总结">总结</h2><p>本小节讲述了编程的几个要素。一是语言所关注的最基本元素，例如数字，算数操作符，变量定义等。二是元素的组合。如求平方，求平方根等都是最基本元素的组合。最后是抽象，阐述了一个问题是如何拆分成几个小问题，又是如何用基本元素组合解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开新坑啦！</p>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://en.ors-sro.com/tags/SICP/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Non-alpha Javascript]]></title>
    <link href="http://en.ors-sro.com/Non-alpha-Javascript/"/>
    <id>http://en.ors-sro.com/Non-alpha-Javascript/</id>
    <published>2016-11-06T04:23:09.000Z</published>
    <updated>2016-11-06T07:14:32.918Z</updated>
    <content type="html"><![CDATA[<p><code>+[]</code> 也是一段 JS 代码。 运行的结果是什么呢？</p>
<a id="more"></a>
<h2 id="求值">求值</h2><p><code>+[]</code> 的运行结果是 <strong>0</strong> 。 如果不相信，按 F12 打开浏览器的控制台，按 ESC 调出控制台。输入 <code>+[]</code> ，回车就可以看到结果。</p>
<p>结果为什么这么反直觉？</p>
<p>想知道运算过程中发生了什么，一个最好不过的方式就是去看语言的规范。</p>
<p>比如想看 <code>+</code> 操作符的运算过程，打开 <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.6" target="_blank" rel="external">JS 规范</a>。</p>
<p>转到<strong>一元 + 操作符</strong> 这一节。</p>
<blockquote>
<p>The unary + operator converts its operand to Number type.</p>
<p>The production UnaryExpression : + UnaryExpression is evaluated as follows:</p>
<ol>
<li>Let expr be the result of evaluating UnaryExpression.</li>
<li>Return ToNumber(GetValue(expr)).</li>
</ol>
</blockquote>
<p>也就是求 <code>ToNumber(GetValue([]))</code> 。可以简单地认为求的是 <code>ToNumber(false)</code> 。</p>
<p><code>false</code> 转成数字自然是 0 。</p>
<p>所以 <code>+[]</code> 的结果为 0 。</p>
<h2 id="全家福">全家福</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]</span><br></pre></td></tr></table></figure>
<p>这段代码的输出结果是 “Hello” 。是不是有点不可思议？代码中没有包含任何 “Hello” 字母。</p>
<p>JS 可以做到没有任何字母和数字就能编写代码。</p>
<p>只需要用到 <code>!</code> ，<code>+</code>，<code>[]</code> ，<code>{}</code> 和 <code>()</code> 8个字符就可以编写大部分代码。这样没有数字字母的 JS 代码称为 <strong>non-alpha Javascript</strong> 。</p>
<h2 id="数字">数字</h2><p>non-alpha Javascript 是怎么做到没有数字字母也能写代码的呢？</p>
<p>其实本质是将数字字母转化为上述的八个字符。</p>
<p>上面分析了 <code>+[]</code> 等于 0</p>
<p>那么如果是 2 ，5 ，8 这种数字该怎么表达呢？</p>
<p>光用 0 是没有办法得到其他数字的。</p>
<p>1 + 1 = 2 。</p>
<p>所以只需要再得到 1 即可得到其他所有数字。</p>
<p>很容易联想到 false 对应的是 0 ，那么 true 对应的应该是 1 。</p>
<p>怎么得到 true ？已有的条件是 false 。那只需要取反即可。</p>
<p>也就是 <code>!false</code> 。在 JS 中，<code>[]</code> 被当作 <code>false</code> 。所以带入前式得 <code>![]</code> 。</p>
<p>还要使用 <code>+</code> 将 <code>![]</code> 将结果转为数字。</p>
<p>所以 <code>+![]</code> 就会得到 1 。</p>
<p>要是这么想就大错特错了。JS 可不是凡人能够理解的。</p>
<p><code>+![]</code> 的结果是 0 ，跟 <code>+[]</code> 一样。</p>
<p>为什么是这样哪里出错了？</p>
<p>看代码就清楚了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[] == <span class="literal">false</span></span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">![] == <span class="literal">false</span></span><br><span class="line"><span class="comment">// =&gt; true    WTF???</span></span><br><span class="line"></span><br><span class="line">!![] == []</span><br><span class="line"><span class="comment">// =&gt; false   WTFF???</span></span><br><span class="line"></span><br><span class="line">!![] == <span class="literal">true</span></span><br><span class="line"><span class="comment">// =&gt; true    WTFFF???</span></span><br></pre></td></tr></table></figure>
<p>这里面是有深坑的（捂眼痛哭），我比较懒就暂时不深究了。</p>
<p>从上面可以看到 <code>!![] == true</code> 。所以 <code>+true</code> 等于 <code>!![]</code></p>
<p>使用 + 将结果强制转化为数字。</p>
<p><code>+!![]</code> 的结果就是 1 。</p>
<p>所以 2 = 1 + 1</p>
<p>也就是 2 = <code>+!![]</code> + <code>+!![]</code></p>
<p>利用进行 + 运算时只要一边是整数类型，就会把另一边也强制转化为整数类型，上式可以简化为</p>
<p>2 = <code>!![]</code> + <code>!![]</code></p>
<p>1 的表达式不是唯一的。</p>
<p>注意到 <code>!0 == true</code>。</p>
<p>所以 <code>+!0 == 1</code>。</p>
<p>也就是 <code>+!+[]</code> 的值为 1</p>
<p>所以 2 还可以表示为 <code>+!+[]</code> + <code>+!+[]</code></p>
<p>简化一下得 <code>!+[]</code> + <code>!+[]</code></p>
<p>现在知道 JS 有多<ruby>灵活<rt>凌乱</rt></ruby>了吧。</p>
<p>类似的可以得到所有数字</p>
<table>
<thead>
<tr>
<th>数字</th>
<th>JS</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>+[]</td>
</tr>
<tr>
<td>1</td>
<td>!+[]</td>
</tr>
<tr>
<td>2</td>
<td>!+[] + !+[]</td>
</tr>
<tr>
<td>3</td>
<td>!+[] + !+[] + !+[]</td>
</tr>
<tr>
<td>4</td>
<td>!+[] + !+[] + !+[] + !+[]</td>
</tr>
<tr>
<td>5</td>
<td>!+[] + !+[] + !+[] + !+[] + !+[]</td>
</tr>
<tr>
<td>6</td>
<td>!+[] + !+[] + !+[] + !+[] + !+[] + !+[]</td>
</tr>
<tr>
<td>7</td>
<td>!+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[]</td>
</tr>
<tr>
<td>8</td>
<td>!+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[]</td>
</tr>
<tr>
<td>9</td>
<td>!+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[] + !+[]</td>
</tr>
</tbody>
</table>
<p>现在已经拥有所有数字了。假设想得到 12 。用 9 + 4 即可。</p>
<h2 id="字母">字母</h2><p>如果说得到数字的过程还算正常的话，那么下面介绍得到字母的方法只能说是奇技淫巧。</p>
<p>基本的思想是从 JS 内置的关键字中按索引得到单一的字母。</p>
<p>比如 JS 有一个 <code>NaN</code> 表示非数字。</p>
<p>从 <code>NaN</code> 中可以得到 <code>N</code> 和 <code>a</code></p>
<p>想要得到 <code>a</code> 只需要 <code>&quot;NaN&quot;[1]</code> </p>
<p><code>&quot;NaN&quot;</code> 等于 <code>+{}+[]</code></p>
<p>所以 <code>&quot;NaN&quot;[1]</code> 等于 <code>(+{}+[])[1]</code></p>
<p>因为 1 等于 <code>+!+[]</code></p>
<p>所以最后结果是 <code>(+{}+[])[+!+[]]</code></p>
<p>类似地，从 <code>true</code> 中可以得到 <code>t</code>,<code>r</code>,<code>u</code>,<code>e</code></p>
<p>从 <code>undefine</code> 可以得到 <code>n</code>,<code>d</code>,<code>f</code>,<code>i</code></p>
<p>还有一种获取字母的<a href="http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html" target="_blank" rel="external">通用方法</a>。</p>
<p>至此已经获得了所有的数字字母。可以<a href="http://patriciopalladino.com/files/hieroglyphy/" target="_blank" rel="external">愉快的编程</a>了。</p>
<h2 id="后记">后记</h2><p>non-alpha javascript 也不知道是谁先想出来的。真的是太有才了。有的人用它绕过 XSS 的过滤。这种思路写过滤器的人估计也没考虑到吧。也从侧面证明了 JS 的类型转化太灵活了，存在太多种特例。平时写代码要避免这些奇怪的边角情况。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>+[]</code> 也是一段 JS 代码。 运行的结果是什么呢？</p>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://en.ors-sro.com/tags/Javascript/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FiraCode]]></title>
    <link href="http://en.ors-sro.com/FiraCode/"/>
    <id>http://en.ors-sro.com/FiraCode/</id>
    <published>2016-10-30T04:42:35.000Z</published>
    <updated>2016-10-30T07:10:20.520Z</updated>
    <content type="html"><![CDATA[<p>表示大于等于关系通常使用大于等于符号 <code>≥</code> ，编程语言也沿用了这个符号。但是因为这个符号输入不便，所以拆成了外形相似的 <code>&gt;=</code> 。能不能在不改变现有语言的情况下使用 <code>≥</code> 还能编译通过呢。当然是可以的啦！要不然就不会有这篇文章了= =<br><a id="more"></a></p>
<h2 id="合字">合字</h2><p>先来看一段 C 语言代码。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;number);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">0</span> &lt;= number &amp;&amp; number &lt;= <span class="number">60</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"你挂了！\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"还好没挂！\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<style type="text/css">
    @font-face { 
    font-family: FiraCode; 
    src: url('/font/FiraCode-Regular.woff2'); 
    } 

    .article-content pre { 
        font-family: FiraCode !important; 
    }
</style>


<p>很简单的程序，好像没什么特别的。但是注意看第七行也就是第一个 <code>if</code> 中的 <code>≥</code> 符号。有没有发现它居然不是 <code>&gt;=</code> ，并不是作弊使用了 <code>≥</code> 不信你选择大于等于符号试试。（浏览器版本太低会看不到效果。建议升级 Chrome 或者使用水果机上的 Safari 浏览本页）</p>
<p>选择时会发现，这个 <code>≥</code> 居然占了两个字符。也就是可以选择前一半，再选择后一半。</p>
<p>并不是只是在网页上可以有这种效果。编辑器里面也是可以的。</p>
<p><img src="/img/FiraCode/VS2015.png" alt="Visual Studio 2015 ≤可以被部分选择"></p>
<p>为什么可以输入的是 <code>&gt;=</code> ，显示的却是 <code>≥</code> ，而编辑器识别的是 <code>&gt;=</code> 呢？</p>
<p>因为使用了特殊的字体。这个字体中用到了<strong>合字</strong>（<a href="https://en.wikipedia.org/wiki/Typographic_ligature" target="_blank" rel="external">ligature</a>）技术</p>
<p>合字，顾名思义，就是将字合到一起。</p>
<p>比如 a 和 e 对应的合字是 æ 。</p>
<p>其实 &amp; 是一个合字，由 e 和 t 合成。</p>
<p><img src="/img/FiraCode/et.png" alt="&amp; 由 e 和 t 合成"></p>
<p>使用了合字技术后，编辑器会将字体中指定的两个字符渲染为它们的合字。</p>
<p>所以 <code>&gt;</code> 和 <code>=</code> 会被渲染为它们的合字 <code>≥</code> 。</p>
<h2 id="FiraCode">FiraCode</h2><p><strong>FiraCode</strong> 是为数不多的支持合字的编程字体。</p>
<p>支持将 <code>&gt;=</code> 转为 <code>≥</code> ，<code>-&gt;</code> 转为 <code>→</code> 和 <code>!=</code> 转为 <code>≠</code> 等。</p>
<p>全部字符如下</p>
<p><img src="/img/FiraCode/AllLigatures.png" alt="FiraCode 合字列表"></p>
<p>在 VS2015 中启用 FiraCode 也很简单</p>
<p>首先下载 <a href="https://github.com/tonsky/FiraCode" target="_blank" rel="external">FiraCode</a> 字体。</p>
<p>解压，打开 <strong>TTF</strong> 文件夹，在 FiraCode-Regular.ttf 上右键安装。 这样字体就安装完成。</p>
<p>接着在 VS 修改字体。</p>
<p>工具→选项→环境→字体和颜色→FiraCode</p>
<p>试着输入 <code>&gt;=</code> 和 <code>!=</code> 看看吧。</p>
<p>是不是看到了 <code>!=</code> 输入后直接变成了 <code>≠</code></p>
<p><a href="https://github.com/tonsky/FiraCode/issues/273" target="_blank" rel="external">FiraCode 支持</a> <code>-&gt;</code> 转为 <code>→</code> 但是 VS 不支持，所以看不到效果。（鬼知道为什么选择性地支持合字。）</p>
<p>FiraCode 除了支持 VS 之外还支持以下编辑器</p>
<table>
<thead>
<tr>
<th>支持</th>
</tr>
</thead>
<tbody>
<tr>
<td>Anjuta (unless at the EOF)</td>
</tr>
<tr>
<td>AppCode (2016.2+, instructions)</td>
</tr>
<tr>
<td>Atom 1.1 or newer (instructions)</td>
</tr>
<tr>
<td>BBEdit (instructions)</td>
</tr>
<tr>
<td>Brackets (with this plugin)</td>
</tr>
<tr>
<td>Chocolat</td>
</tr>
<tr>
<td>CLion (2016.2+, instructions)</td>
</tr>
<tr>
<td>Coda 2</td>
</tr>
<tr>
<td>CodeLite</td>
</tr>
<tr>
<td>Eclipse (Linux)</td>
</tr>
<tr>
<td>Geany</td>
</tr>
<tr>
<td>gEdit / Pluma</td>
</tr>
<tr>
<td>GNOME Builder</td>
</tr>
<tr>
<td>IntelliJ IDEA (2016.2+, instructions)</td>
</tr>
<tr>
<td>Kate, KWrite</td>
</tr>
<tr>
<td>Komodo</td>
</tr>
<tr>
<td>Leafpad</td>
</tr>
<tr>
<td>LibreOffice</td>
</tr>
<tr>
<td>LightTable (instructions)</td>
</tr>
<tr>
<td>MacVim 7.4 or newer (instructions)</td>
</tr>
<tr>
<td>Mancy</td>
</tr>
<tr>
<td>Meld</td>
</tr>
<tr>
<td>Mousepad</td>
</tr>
<tr>
<td>NetBeans</td>
</tr>
<tr>
<td>Notepad (Win)</td>
</tr>
<tr>
<td>PhpStorm (2016.2+, instructions)</td>
</tr>
<tr>
<td>PyCharm (2016.2+, instructions)</td>
</tr>
<tr>
<td>QtCreator</td>
</tr>
<tr>
<td>RStudio (instructions)</td>
</tr>
<tr>
<td>RubyMine (2016.2+, instructions)</td>
</tr>
<tr>
<td>Scratch</td>
</tr>
<tr>
<td>TextAdept (Linux, Mac)</td>
</tr>
<tr>
<td>TextEdit</td>
</tr>
<tr>
<td>TextMate 2</td>
</tr>
<tr>
<td>Visual Studio 2015</td>
</tr>
<tr>
<td>Visual Studio Code (instructions)</td>
</tr>
<tr>
<td>WebStorm (2016.2+, instructions)</td>
</tr>
<tr>
<td>Xamarin Studio/Monodevelop</td>
</tr>
<tr>
<td>Xcode (with this plugin)</td>
</tr>
<tr>
<td>Probably work: Smultron, Vico</td>
</tr>
</tbody>
</table>
<p>除了 FiraCode 还有其他支持合字的编程字体</p>
<ul>
<li><a href="https://github.com/i-tu/Hasklig" target="_blank" rel="external">Hasklig (free)</a></li>
<li><a href="http://www.fsd.it/fonts/pragmatapro.htm" target="_blank" rel="external">PragmataPro (€59)</a></li>
<li><a href="http://larsenwork.com/monoid/" target="_blank" rel="external">Monoid (free)</a></li>
<li><a href="https://github.com/kika/fixedsys" target="_blank" rel="external">Fixedsys Excelsior (free)</a></li>
<li><a href="https://be5invis.github.io/Iosevka/" target="_blank" rel="external">Iosevka (free)</a></li>
<li><a href="https://github.com/SSNikolaevich/DejaVuSansCode" target="_blank" rel="external">DejaVu Sans Code (free)</a></li>
</ul>
<h2 id="最后">最后</h2><p>支持合字的编程字体还很少。使用合字能够让代码看起来更易读，而且能一眼看出错误的字符输入。但是 FiraCode 感觉不是很好看。什么时候有大神能让 Consolas 支持合字技术啊。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>表示大于等于关系通常使用大于等于符号 <code>≥</code> ，编程语言也沿用了这个符号。但是因为这个符号输入不便，所以拆成了外形相似的 <code>&gt;=</code> 。能不能在不改变现有语言的情况下使用 <code>≥</code> 还能编译通过呢。当然是可以的啦！要不然就不会有这篇文章了= =<br>]]>
    
    </summary>
    
      <category term="FiraCode" scheme="http://en.ors-sro.com/tags/FiraCode/"/>
    
      <category term="编程字体" scheme="http://en.ors-sro.com/tags/%E7%BC%96%E7%A8%8B%E5%AD%97%E4%BD%93/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 绘制三角形]]></title>
    <link href="http://en.ors-sro.com/Make-a-triangle-with-CSS/"/>
    <id>http://en.ors-sro.com/Make-a-triangle-with-CSS/</id>
    <published>2016-10-23T05:17:11.000Z</published>
    <updated>2016-11-06T07:32:06.947Z</updated>
    <content type="html"><![CDATA[<p>CSS (Cascading Style Sheets，层叠样式表)，用于指定 HTML 中元素的样式。由浏览器渲染。本质上一种图像绘制。既然是图像绘制，能否绘制常见的形状比如三角形呢？</p>
<a id="more"></a>
<h2 id="矩形">矩形</h2><p>在绘制三角形之前，先来看看如何绘制矩形。</p>
<p>绘制矩形比较简单，主要用到了 <code>border</code> 属性。也就是一个东西四边都是边框就是矩形了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"border:1px solid black"</span>&gt;</span>矩形<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><span style="border:1px solid black">矩形</span></p>
<p>把中间的文字去掉就可以了。因为没有文字支撑。所以需要指定宽度或者使用空格（样式是样式，内容是内容，不要混淆，这里我偷懒就用空格来演示了）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"border:1px solid black"</span>&gt;</span>　　<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><span style="border:1px solid black">　　</span></p>
<p>但是这跟绘制三角形有什么关系呢？</p>
<p>这就不得不提一个 CSS 的花招。</p>
<h2 id="三角形花招">三角形花招</h2><p>如果把矩形的四边涂上颜色。看起来是这样的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"border: 100px solid;border-left-color: #0066cc;</span><br><span class="line">             border-right-color: #0066cc;</span><br><span class="line">             border-top-color: white;</span><br><span class="line">             border-bottom-color: white;</span><br><span class="line">             display: inline-block;"</span>&gt;</span>囧<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><span style="border: 100px solid;border-left-color: #0066cc;border-right-color: #0066cc;border-top-color: white;border-bottom-color: white;display: inline-block;">囧</span></p>
<p>把中间的文字去掉，就变成了这样。</p>
<p><span style="border: 100px solid;border-left-color: #0066cc;border-right-color: #0066cc;border-top-color: white;border-bottom-color: white;display: inline-block;"></span></p>
<p>很明显出现了四个三角形。那怎么得到一个三角形呢？</p>
<p>把其他三个三角形隐藏。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"border: 100px solid;</span><br><span class="line">			 border-left-color: #0066cc;</span><br><span class="line">			 border-right-color: transparent;</span><br><span class="line">			 border-top-color: transparent;</span><br><span class="line">			 border-bottom-color: transparent;</span><br><span class="line">			 display: inline-block;"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><span style="border: 100px solid;border-left-color: #0066cc;border-right-color: transparent;border-top-color: transparent;border-bottom-color: transparent;display: inline-block;"></span></p>
<h2 id="原理">原理</h2><p>这究竟发生了什么？矩形的边是怎么变成三角形的？</p>
<p>先从头看起。回到最开始的图形。</p>
<p><span style="border: 100px solid;border-left-color: #0066cc;border-right-color: #0066cc;border-top-color: white;border-bottom-color: white;display: inline-block;">囧</span></p>
<p>注意看会发现，边其实不是一条线或者矩形，而是一个等腰梯形。</p>
<p>当把文字去掉了之后就变成了三角形。</p>
<p><span style="border: 100px solid;border-left-color: #0066cc;border-right-color: #0066cc;border-top-color: white;border-bottom-color: white;display: inline-block;"></span></p>
<p>这时候隐藏其他的三角形即可。</p>
<p>也就是说原来边缘并不是我们想象中的一条线，而是一个梯形，当元素的宽度和高度都为0时，梯形就变成了三角形。</p>
<p>动态过程是这样的。</p>
<p style="width:300px;height:300px;"><span style="border: 100px solid;border-left-color: #0066cc;border-right-color: #0066cc;border-top-color: white;border-bottom-color: white;width: 100px;height:100px;display: inline-block;animation: triangle 3s infinite ease;"></span></p>

<style type="text/css">
    @keyframes triangle{
        from{width:100px;height:100px;}
        to{width:0px;height:0px;}
    }
</style>

<p>隐藏的过程是这样的</p>
<p><span style="border: 100px solid;border-left-color: #0066cc;border-right-color: #0066cc;border-top-color: white;border-bottom-color: white;display: inline-block;animation: one-triangle 3s infinite ease;"></span></p>
<style type="text/css">
    @keyframes one-triangle{
        0% {border-left-color: #0066cc;border-right-color: #0066cc;border-top-color: white;border-bottom-color: white;}
        25% {border-top-color:transparent;}
        50% {border-top-color:transparent;border-right-color:transparent;}
        100% {border-top-color:transparent;border-right-color:transparent;border-bottom-color:transparent;}
    }
</style>

<h2 id="扩展">扩展</h2><p>利用类似的技巧就可以画出很多很多有趣的图形。<a href="http://cssicon.space/" target="_blank" rel="external">CSSIcon</a> 上有很好的示例。</p>
<p><img src="/img/CSSTriangle/MainPage.png" alt="纯 CSS 图标"></p>
<p>点开其中一个，鼠标移到属性上，会有详细介绍怎么实现的。</p>
<p><img src="/img/CSSTriangle/Item.png" alt="详细实现"></p>
<p>当然还可以用 CSS 绘制微信微笑的表情（<del>我就偷懒不写了</del>）</p>
<div class="smiley icon"><i></i></div>

<style type="text/css">
    .smiley.icon {
      color: #000;
      position: absolute;
      margin-left: 2px;
      margin-top: 2px;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: solid 1px currentColor;
    }

    .smiley.icon:before {
      content: '';
      position: absolute;
      left: 2px;
      top: 3px;
      width: 3px;
      height: 4px;
      border-radius: 3px;
      border: solid 1px currentColor;
    }

    .smiley.icon:after {
      content: '';
      position: absolute;
      right: 2px;
      top: 3px;
      width: 3px;
      height: 4px;
      border-radius: 3px;
      border: solid 1px currentColor;
    }

    .smiley.icon i {
      position: absolute;
      left: 2px;
      top: 7px;
      width: 10px;
      height: 5px;
      border-radius: 0 0 6px 6px;
      border-top: solid 1px transparent;
      border-bottom: solid 1px currentColor;
      border-left: solid 1px currentColor;
      border-right: solid 1px currentColor;
    }

    .smiley.icon i:before {
      content: '';
      position: absolute;
      left: 0px;
      top: -3px;
      width: 1px;
      height: 1px;
      border-radius: 50%;
      border: solid 1px currentColor;
      background-color: currentColor;
    }

    .smiley.icon i:after {
      content: '';
      position: absolute;
      right: 0px;
      top: -3px;
      width: 1px;
      height: 1px;
      border-radius: 50%;
      border: solid 1px currentColor;
      background-color: currentColor;
    }
</style>

<h2 id="后记">后记</h2><p>三个月前看到这个 CSS 花招，到现在终于把这个坑填了。在写的时候多次想放弃。最有意思的是将原理用动态的方式展现，顺便学了一点 CSS 动画的皮毛。其实绘制三角形最简单的方法是使用 ► 符号（逃</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>CSS (Cascading Style Sheets，层叠样式表)，用于指定 HTML 中元素的样式。由浏览器渲染。本质上一种图像绘制。既然是图像绘制，能否绘制常见的形状比如三角形呢？</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://en.ors-sro.com/tags/CSS/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学一些 Javascript]]></title>
    <link href="http://en.ors-sro.com/Learn-some-Javascript/"/>
    <id>http://en.ors-sro.com/Learn-some-Javascript/</id>
    <published>2016-10-15T07:47:34.000Z</published>
    <updated>2016-11-06T07:22:19.521Z</updated>
    <content type="html"><![CDATA[<p>如果再学一种编程语言，会选择哪个语言呢？<br><a id="more"></a></p>
<p>当然是 JS (Javascript) 啦！</p>
<p>原因有很多。</p>
<h2 id="随手可得">随手可得</h2><p>假设现在需要将一段字符串转成大写字母，例如转换 <code>Hello World</code> 为大写，最快的方式是怎样的？</p>
<p>有些人可能会打开 Visual Studio 新建工程等等</p>
<p>有些人可能会打开命令行进入 Python 的交互模式</p>
<p>有些人可能会打开在线 IDE 输入代码运行。</p>
<p>如果是学习过 JS 的人就会直接在浏览器中按 <code>F12</code> 打开控制台输入</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello World"</span>.toUpperCase()</span><br><span class="line"><span class="comment">// =&gt; "HELLO WORLD"</span></span><br></pre></td></tr></table></figure>
<p>就这么简单快速。因为浏览器内置了 JS 的运行环境。所以无论走到哪里，无论是谁的电脑。只要有浏览器就可以运行 JS 代码。</p>
<h2 id="脚本语言">脚本语言</h2><p>脚本语言的优点有很多。跟编译型语言不同的是脚本语言是解释执行的。也就是脚本语言通常都有 REPL (Read, Eval, Print, Loop) 。</p>
<p>简单的说就是可以交互式编程。一边写一边运行。</p>
<p>平时写编译型语言都是很大一部分才能运行。而如果是脚本语言可以一句一句来写。快速的迭代，直到完成后，将所有代码复制到一个文件就写完了。</p>
<h2 id="函数式编程">函数式编程</h2><p>现在函数式的讨论很火热。许多语言纷纷加入对函数式编程的支持。</p>
<p>函数式编程最基本的一点是函数是第一公民（First Class）。</p>
<p>也就是函数跟其他类型，比如整数，在使用上可以很方便的定义，传递和返回。</p>
<p>有些语言不支持匿名函数，所以得先定义函数，在通过变量引用函数，通过传递这个变量才能传递函数。</p>
<p>有些语言不支持传递和返回函数，只能通过面向对象的方式模拟。</p>
<p>而在 JS 里全都支持。函数式编程在 JS 里很自然也很简单。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义匿名函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">"Hello World"</span>;&#125;)</span><br><span class="line"><span class="comment">// =&gt; function()&#123;return "Hello World";&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义匿名函数并立刻求值</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">"Hello World"</span>;&#125;)()</span><br><span class="line"><span class="comment">// =&gt; "Hello World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将函数作为值传递</span></span><br><span class="line"><span class="comment">/// 直接赋值</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">"Hello World"</span>&#125;;</span><br><span class="line"><span class="comment">/// 传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">f</span>)</span>&#123;<span class="built_in">console</span>.log(f())&#125;;</span><br><span class="line">sayHello(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">"Hello World"</span>&#125;);</span><br><span class="line"><span class="comment">// =&gt; Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回函数</span></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> number + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// 可以这么用</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(plusOne());</span><br><span class="line"><span class="comment">// =&gt; [2,3,4]</span></span><br></pre></td></tr></table></figure>
<p>当然还支持 <ruby>柯理<rt>咖喱</rt></ruby> 化（Curring），函数组合，单子，匿名递归等。</p>
<p>这并不意味着 JS 只能使用函数式编程。实际上 JS 支持多范式编程。比如支持面向对象编程，支持过程式编程。甚至如果愿意的话也可以支持面向组合子编程。</p>
<h2 id="虚拟机和垃圾回收">虚拟机和垃圾回收</h2><p>有了垃圾回收（Garbage Collect）之后在写小程序的时候不用担心内存的问题了。也不用计较分配内存，手动释放内存。真的很方便。</p>
<p>JS 运行在虚拟机上。通常宿主语言会比较慢。</p>
<p>以前的 JS 确实比较慢。但是自从<ruby>谷歌<rt>希望</rt></ruby>开发了 V8 引擎后在某些情况下速度甚至比传统编译型语言还要快。</p>
<h2 id="非常流行">非常流行</h2><p>JS 曾经获得 Github 公布的语言排行榜 2014 年和 2016 年的冠军。</p>
<p>在 Github 上最热门的语言就是 JS </p>
<p>最近很火热的微信小程序所使用的编程语言也是 JS</p>
<p>这对于一个诞生于 1995 年的语言来说真的很不容易，尤其在现在优秀语言倍出的大背景下。</p>
<h2 id="丰富的库">丰富的库</h2><p>作为 JS 流行的必然结果，JS 拥有很多类库。</p>
<p>比如杀手级的类库 jQuery 。用于操作浏览器中的标签对象 （DOM）。</p>
<p>又比如基于 MVVM 的框架 AngularJS 。大大方便了单页应用（SPA）的开发。</p>
<p>又比如改善异步编程的 Promise 等等。<del>每一个库都能让我水好多篇文章</del></p>
<p>在 JS 的世界里，你有丰富的轮子可选，你遇到的问题基本上都有相应的轮子来解决。如果不满意你还可以自己造轮子。</p>
<h2 id="买一送二">买一送二</h2><p>学习了 JS ，就不会仅仅学习 JS 。</p>
<p>因为 JS 跟浏览器密切相关。</p>
<p>浏览器中页面的显示使用 Html （<del>How To Make Love</del> Hyper Text Markup Language，超文本标记语言） 和 CSS (层叠样式表)</p>
<p>于是就顺便学了 Html 和 JS。</p>
<p>买一送二啊。世界上哪有这等好事。</p>
<p>这样就很自然地会做网页了。</p>
<p>哇！一个年薪 20K 的前端程序员诞生了！</p>
<h2 id="不局限于浏览器">不局限于浏览器</h2><p>JS 虽然跟浏览器紧紧相连。但不是说 JS 只能在浏览器中运行。</p>
<p>使用谷歌 V8 引擎 + Node.js 即可编写桌面应用程序。而且还是跨平台的。</p>
<p>比如 Viusal Studio Code 就是这么做的。</p>
<p>用网页的方式控制外观比传统的使用控件方便多了，而且更加灵活。学习成本低。只要会 CSS 就能绘制画面。</p>
<p>JS 还可以编写移动应用。</p>
<p>通过 PhoneGap 等框架可以开发 Native app 。也就是不懂 Java ，OC 和 Swift 也可以写移动应用。只需要会 JS 就行。</p>
<p>JS 还可以编写嵌入式程序。</p>
<p>espruino 和 Tessel 都支持使用 JS 进行嵌入式编程。</p>
<p>JS 除了用于客户端，还可用于服务端。</p>
<p>比如淘宝，Paypal等公司都有使用 JS 写服务器。</p>
<p>这样的一个好处是前后端数据统一。而且 JS 天生支持异步编程。很适合用于高并发的场景。 这是另外一个好处。</p>
<p><del>最大的好处当然是不用学习世界上最好的语言啦</del></p>
<p>一个语言就能前后端通吃，世界上还有第二个这样的语言吗？</p>
<blockquote>
<p>一切能用 JS 编写的都将用 JS 重写。</p>
</blockquote>
<h2 id="与_C_语法类似">与 C 语法类似</h2><p>JS 的语法和 C 语言大部分类似。</p>
<p>这意味着学习成本大幅降低啊。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环语句</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件语句</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Yes"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"no"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然跟 C 语言语法类似。那还要学习什么呢？</p>
<p>当然是学习一些不类似的情况。</p>
<p>最起码要能一次性答对 <a href="http://javascript-puzzlers.herokuapp.com/" target="_blank" rel="external">JS 常见问题</a>吧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[]==[]</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="string">'5'</span> + <span class="number">3</span></span><br><span class="line"><span class="comment">// =&gt; "53"</span></span><br><span class="line"><span class="string">'5'</span> - <span class="number">3</span></span><br><span class="line"><span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> == [[[<span class="number">2</span>]]]</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>toString()</span><br><span class="line"><span class="comment">// =&gt; error</span></span><br><span class="line"><span class="number">3.</span>.toString()</span><br><span class="line"><span class="comment">// =&gt; "3"</span></span><br><span class="line"><span class="number">3.</span>..toString()</span><br><span class="line"><span class="comment">// =&gt; error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(), max = <span class="built_in">Math</span>.max()</span><br><span class="line">min &lt; max</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> END = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>);</span><br><span class="line"><span class="keyword">var</span> START = END - <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = START; i &lt;= END; i++) &#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br><span class="line"><span class="comment">// endless loop</span></span><br></pre></td></tr></table></figure>
<p>也不是太难嘛（逃</p>
<h2 id="可扩展">可扩展</h2><p>JS 最大的优点是可扩展。不爽可以写一个库啊。如果还不行那就写一个转译成 JS 的语言啊。</p>
<p>如果你觉得写语言太麻烦可以直接使用现成的。比如 CoffeeScript</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋值:</span></span><br><span class="line">number   = <span class="number">42</span></span><br><span class="line">opposite = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件:</span></span><br><span class="line">number = -<span class="number">42</span> <span class="keyword">if</span> opposite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数:</span></span><br><span class="line"><span class="function"><span class="title">square</span> = <span class="params">(x)</span> -&gt;</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组:</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象:</span></span><br><span class="line">math =</span><br><span class="line">  <span class="attribute">root</span>:   Math.sqrt</span><br><span class="line">  <span class="attribute">square</span>: square</span><br><span class="line">  <span class="attribute">cube</span>:   <span class="function"><span class="params">(x)</span> -&gt;</span> x * square x</span><br><span class="line"></span><br><span class="line"><span class="comment"># Splats:</span></span><br><span class="line"><span class="function"><span class="title">race</span> = <span class="params">(winner, runners...)</span> -&gt;</span></span><br><span class="line">  <span class="built_in">print</span> winner, runners</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存在性:</span></span><br><span class="line">alert <span class="string">"I knew it!"</span> <span class="keyword">if</span> elvis?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组 推导(comprehensions):</span></span><br><span class="line">cubes = (math.cube num <span class="keyword">for</span> num <span class="keyword">in</span> list)</span><br></pre></td></tr></table></figure>
<p>将转译成以下 JS</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cubes, list, math, num, number, opposite, race, square,</span><br><span class="line">  __slice = [].slice;</span><br><span class="line"></span><br><span class="line">number = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">opposite = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (opposite) &#123;</span><br><span class="line">  number = -<span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">math = &#123;</span><br><span class="line">  root: <span class="built_in">Math</span>.sqrt,</span><br><span class="line">  square: square,</span><br><span class="line">  cube: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * square(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">race = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> runners, winner;</span><br><span class="line">  winner = <span class="built_in">arguments</span>[<span class="number">0</span>], runners = <span class="number">2</span> &lt;= <span class="built_in">arguments</span>.length ? __slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>) : [];</span><br><span class="line">  <span class="keyword">return</span> print(winner, runners);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> elvis !== <span class="string">"undefined"</span> &amp;&amp; elvis !== <span class="literal">null</span>) &#123;</span><br><span class="line">  alert(<span class="string">"I knew it!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cubes = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _i, _len, _results;</span><br><span class="line">  _results = [];</span><br><span class="line">  <span class="keyword">for</span> (_i = <span class="number">0</span>, _len = list.length; _i &lt; _len; _i++) &#123;</span><br><span class="line">    num = list[_i];</span><br><span class="line">    _results.push(math.cube(num));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _results;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>微软脑残粉还可以使用 M$ 山寨 JS 失败不死心后出的 Typescript</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官网访问太慢懒得贴代码了。</span></span><br></pre></td></tr></table></figure>
<p>Typescript 加上了静态类型，把解释执行的语言搞得类似编译型语言一样。</p>
<p>觉得太死板？可以用<a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="external">颜文字来写 JS</a> ！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ﾟωﾟﾉ= <span class="regexp">/｀ｍ´）ﾉ ~┻━┻   /</span><span class="comment">/*´∇｀*/</span> [<span class="string">'_'</span>]; o=(ﾟｰﾟ)  =_=<span class="number">3</span>; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: <span class="string">'_'</span> ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ <span class="string">'_'</span>)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">'_'</span>) [c^_^o];(ﾟДﾟ) [<span class="string">'c'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [<span class="string">'o'</span>] = ((ﾟДﾟ)+<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [<span class="string">'c'</span>]+(ﾟДﾟ) [<span class="string">'o'</span>]+(ﾟωﾟﾉ +<span class="string">'_'</span>)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟｰﾟ] + ((ﾟДﾟ) +<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [<span class="string">'c'</span>]+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [<span class="string">'o'</span>]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ];(ﾟДﾟ) [<span class="string">'_'</span>] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+<span class="string">'_'</span>) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">'_'</span>) [ﾟΘﾟ]+ (ﾟωﾟﾉ +<span class="string">'_'</span>) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=<span class="string">'\\'</span>; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +<span class="string">'_'</span>)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=<span class="string">'\"'</span>;(ﾟДﾟ) [<span class="string">'_'</span>] ( (ﾟДﾟ) [<span class="string">'_'</span>] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (<span class="string">'_'</span>);</span><br><span class="line"><span class="comment">// =&gt; "Hello"</span></span><br></pre></td></tr></table></figure>
<p>颜文字输入太麻烦？你可以只用 <a href="/Non-alpha-Javascript">8 种字符写 JS</a> ！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()([][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+([]+[][(![]+[])[!+[]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+([]+&#123;&#125;)[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([][[]]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]+([]+&#123;&#125;)[!+[]+!![]+!![]+!![]+!![]]+(+&#123;&#125;+[])[+!![]]+(!![]+[])[+[]]+([][[]]+[])[!+[]+!![]+!![]+!![]+!![]]+([]+&#123;&#125;)[+!![]]+([][[]]+[])[+!![]])())[!+[]+!![]+!![]]+([][[]]+[])[!+[]+!![]+!![]])()(([]+&#123;&#125;)[+[]])[+[]]+(!+[]+!![]+!![]+!![]+[])+(!+[]+!![]+!![]+!![]+!![]+!![]+!![]+!![]+[]))+([][[]]+[])[!+[]+!![]+!![]]+(![]+[])[!+[]+!![]]+(![]+[])[!+[]+!![]]+([]+&#123;&#125;)[+!![]]</span><br><span class="line"><span class="comment">// =&gt; Hello</span></span><br></pre></td></tr></table></figure>
<p>满意了吗？还有哪个语言能这么灵活满足各种奇奇怪怪的要求？</p>
<h2 id="最后">最后</h2><p>本文仅用于调侃 JS 。并不是用于安利 JS 。请不要相信文中的任何<ruby>一本正经<rt>胡说八道</rt></ruby>的话。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果再学一种编程语言，会选择哪个语言呢？<br>]]>
    
    </summary>
    
      <category term="Javascript" scheme="http://en.ors-sro.com/tags/Javascript/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ZeroNet]]></title>
    <link href="http://en.ors-sro.com/Zeronet/"/>
    <id>http://en.ors-sro.com/Zeronet/</id>
    <published>2016-10-09T07:03:25.000Z</published>
    <updated>2016-10-09T10:45:54.788Z</updated>
    <content type="html"><![CDATA[<p>比特币中的一项特性是去中心化。这使得比特币拥有较为自由的能力，不会因为某些服务器故障而无法运行。这是因为使用了去中心化技术。如果互联网去中心化会是怎样的呢？</p>
<a id="more"></a>
<h2 id="安装_ZeroNet">安装 ZeroNet</h2><p><a href="https://github.com/HelloZeroNet/ZeroNet" target="_blank" rel="external">ZeroNet</a> 是一个使用了比特币加密技术和 BT 分布式技术的网络。它的主要目的是将互联网去中心化。</p>
<p>使用起来很方便，首先<a href="https://github.com/HelloZeroNet/ZeroNet#how-to-join" target="_blank" rel="external">下载</a> 相应的客户端。</p>
<p>解压。发现文件目录为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZeroBundle&#10;  &#9500;&#9472;Python&#10;  &#9492;&#9472;ZeroNet.cmd</span><br></pre></td></tr></table></figure>
<p>有一个 <code>python2</code> 的环境和一个启动脚本。</p>
<p>如果你是 Windows 用户直接运行 <strong>ZeroNet.cmd</strong> </p>
<p>弹出黑框并开始下载主程序</p>
<blockquote>
<p>Downloading <a href="https://github.com/HelloZeroNet/ZeroNet/archive/master.zip" target="_blank" rel="external">https://github.com/HelloZeroNet/ZeroNet/archive/master.zip</a> to ZeroNet directory.</p>
</blockquote>
<p>大约一分钟后主程序下载完毕，你会发现任务栏里面出现一个 ZeroNet 的图标。</p>
<p>这时候会弹出 Windows 防火墙，点允许免得出奇奇怪怪的问题。</p>
<h2 id="初尝_ZeroNet">初尝 ZeroNet</h2><p>双击 ZeroNet 的图标或者直接在地址栏中输入 <a href="http://127.0.0.1:43110/" target="_blank" rel="external">http://127.0.0.1:43110/</a> 就会打开 ZeroNet 的初始欢迎界面。</p>
<p><img src="/img/ZeroNet/Hello.png" alt="ZeroNet 欢迎页面"></p>
<p>左边列出了 ZeroNet 中的部分网站。随便点一个进去</p>
<p><img src="/img/ZeroNet/Loading.png" alt="ZeroNet 加载页面"></p>
<p>等待一两秒的载入后，网页内容刷新出来了。</p>
<p><img src="/img/ZeroNet/ZeroBoard.png" alt="ZeroNet ZeroBoard页面"></p>
<p>从这个地址中我们发现它并没有直接访问任何现存互联网的资源。而是直接访问电脑地址 127.0.0.1 。</p>
<p>这是官方的一个公告板网站，里面有很多刚来的人打招呼。</p>
<p>这就是使用 ZeroNet 的基本流程。跟访问普通网站没有太大的区别。唯一要做的就是打开 ZeroNet 的客户端。这样才能访问 ZeroNet 中的网站。</p>
<p>在使用者看来不连接现有互联网的情况下能够访问网页，感觉挺神奇的，像是打开了新世界。</p>
<h2 id="探索_ZeroNet">探索 ZeroNet</h2><p>第一次打开 ZeroNet 你会发现欢迎页面中的网站很少。是不是 ZeroNet 上只有这些网站呢？</p>
<p>其实不是。实际上 ZeroNet 拥有很多网站。只是没有看到而已。</p>
<p>回想在普通的互联网上，想要访问一个网站应该怎么做？</p>
<p>在地址栏中输入它的网址即可。</p>
<p>那这个网址是怎么来的呢？有很多种渠道，不过最典型的渠道是搜索引擎。</p>
<p>目前还没发现 ZeroNet 有相关的搜索引擎。不过作者也考虑到了这一点所以提供了一个 ZeroNet 网站的列表</p>
<p>这个列表就在欢迎页面的左边 <a href="http://127.0.0.1:43110/0list.bit/" target="_blank" rel="external">more site @ 0list</a></p>
<p><img src="/img/ZeroNet/0list.png" alt="ZeroNet 网站列表"></p>
<p>随便点击一个<a href="http://127.0.0.1:43110/1BEJbnufyav7TK23ADTs2Qi2UJeKSGDzw6/" target="_blank" rel="external">网站</a></p>
<p><img src="/img/ZeroNet/ResouceSite.png" alt="ZeroNet 一个资源站"></p>
<p>这是一个视频资源网站，相应的资源通过磁力链接下载。</p>
<p>如果有耐心可以发现很多好玩的网站。比如</p>
<ul>
<li><a href="http://127.0.0.1:43110/14Q1So3DH9qvHts5VuLDgqGp7yCXceujop" target="_blank" rel="external">吃豆人游戏</a></li>
<li><a href="http://127.0.0.1:43110/1EGBRuaoUg5JFENpDwn4RPu2ZP99KQ2h9C/" target="_blank" rel="external">一个中文博客</a></li>
<li><a href="http://127.0.0.1:43110/shadowsocksr.bit" target="_blank" rel="external">SSR</a></li>
</ul>
<p>也会发现一些奇奇怪怪的东西。毕竟 ZeroNet 不受监管。</p>
<h2 id="安家_ZeroNet">安家 ZeroNet</h2><p>在 ZeroNet 上创建一个网站也很方便。无需审核。</p>
<p>在创建之前先关闭 ZeroNet</p>
<p>进入 ZeroNet 的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZeroBundle&#10;  &#9500;&#9472;Python&#10;  &#9500;&#9472;ZeroNet&#10;  &#9474; &#9500;&#9472;data&#10;  &#9474; &#9500;&#9472;log&#10;  &#9474; &#9500;&#9472;plugins  &#9;&#10;  &#9474; &#9500;&#9472;...  &#9;&#10;  &#9474; &#9500;&#9472;zeronet.py  &#60;- &#20851;&#38190;&#33050;&#26412;&#10;  &#9474; &#9492;&#9472;... &#10;  &#9492;&#9472;ZeroNet.cmd</span><br></pre></td></tr></table></figure>
<p>在文件夹地址栏中输入 <code>cmd</code> </p>
<p>就会以当前路径运行黑框。</p>
<p>输入以下命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\Python\python zeronet.py siteCreate</span><br></pre></td></tr></table></figure>
<p>输出为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Starting ZeroNet...&#10;- OpenSSL loaded, version: 01000201F&#10;- Version: 0.4.1 r1536, Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (Intel)], Gevent: 1.1.2&#10;- Generating new privatekey...&#10;- ----------------------------------------------------------------------&#10;- Site private key: 5KYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#10;-                   !!! ^ Save it now, required to modify the site ^ !!!&#10;- Site address:     1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5&#10;- ----------------------------------------------------------------------&#10;? Have you secured your private key? (yes, no) &#62;</span><br></pre></td></tr></table></figure>
<p>其中 <strong>Site private key</strong> 就是你的私钥。在修改自己的网站的时候会用到，请妥善保管</p>
<p>地址为 <strong>Site address</strong> 后面的部分。比如我的就是 <strong>1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5</strong></p>
<p>保存好私钥后输入 yes 。输出为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Creating directory structure...&#10;- Creating content.json...&#10;Site:1BTG4L..eEQ5 Content.json not exist: data/1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5/content.json&#10;Site:1BTG4L..eEQ5 File content.json not exist yet, loading default values...&#10;Site:1BTG4L..eEQ5 Opening site data directory: data/1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5/...&#10;Site:1BTG4L..eEQ5 - index.html (SHA512: 20d3253a86e9e19d99c1e1c1ad7c8c272b0e1037ae1773aecc8ab6e09f2854e7)&#10;Site:1BTG4L..eEQ5 Adding timestamp and sha512sums to new content.json...&#10;Site:1BTG4L..eEQ5 Verifying private key...&#10;Site:1BTG4L..eEQ5 Correct 1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5 in valid signers: [&#39;1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5&#39;]&#10;Site:1BTG4L..eEQ5 Signing content.json...&#10;Site:1BTG4L..eEQ5 Saving to content.json...&#10;Site:1BTG4L..eEQ5 File content.json signed!&#10;- Site created!</span><br></pre></td></tr></table></figure>
<p>说明成功建立站点。地址为 <a href="http://127.0.0.1:43110/你的地址" target="_blank" rel="external">http://127.0.0.1:43110/你的地址</a> 。</p>
<p>比如我的是 <a href="http://127.0.0.1:43110/1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5" target="_blank" rel="external">http://127.0.0.1:43110/1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5</a></p>
<p>双击 <strong>ZeroNet.cmd</strong> 启动 ZeroNet</p>
<p>在地址栏中输入刚建立站点的地址，会看到类似的页面</p>
<p><img src="/img/ZeroNet/PersionalSite.png" alt="ZeroNet 常见站点"></p>
<p>接下来修改个人网站。比如把 <strong>Hello</strong> 该成 <strong>Hi</strong>。这时候需要用到上面产生的私钥</p>
<p>先找到自己的网站。位于 <strong>ZeroBundle\ZeroNet\data\你的地址</strong> 文件夹中。比如我的就是 <strong>ZeroBundle\ZeroNet\data\1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5</strong></p>
<p>其中目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5&#10;  &#9500;&#9472;content.json&#10;  &#9492;&#9472;index.html</span><br></pre></td></tr></table></figure>
<p>用文本编辑器打开 <strong>index.html</strong></p>
<p>把</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello 1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5!</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5!</span><br></pre></td></tr></table></figure>
<p>保存。双击 <strong>index.html</strong> 打开后发现内容已经发生改变。</p>
<p>这只是本地预览的效果。要想其他人也能看到就需要发布。</p>
<p>首先运行命令登陆自己的网站</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\Python\python zeronet.py siteSign &#20320;&#30340;&#22320;&#22336;</span><br></pre></td></tr></table></figure>
<p>出现输入私钥的提示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Starting ZeroNet...&#10;- OpenSSL loaded, version: 01000201F&#10;- Version: 0.4.1 r1536, Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (Intel)], Gevent: 1.1.2&#10;- Signing site: 1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5...&#10;Private key (input hidden):</span><br></pre></td></tr></table></figure>
<p>密码验证正确后提示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Site:1BTG4L..eEQ5 Opening site data directory: data/1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5/...&#10;Site:1BTG4L..eEQ5 - [SKIPPED] content.json&#10;Site:1BTG4L..eEQ5 - index.html (SHA512: d749c3e6ea1668e314fa3a32c5048313d2387a336abcd60b6ba1b50a0f4e0952)&#10;Site:1BTG4L..eEQ5 Adding timestamp and sha512sums to new content.json...&#10;Site:1BTG4L..eEQ5 Verifying private key...&#10;Site:1BTG4L..eEQ5 Correct 1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5 in valid signers: [&#39;1BTG4LYoSYQxNMaQfDCmZv56fQhitFeEQ5&#39;]&#10;Site:1BTG4L..eEQ5 Signing content.json...&#10;Site:1BTG4L..eEQ5 Saving to content.json...&#10;Site:1BTG4L..eEQ5 File content.json signed!</span><br></pre></td></tr></table></figure>
<p>登陆成功后接着发布网站</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\Python\python zeronet.py sitePublish &#20320;&#30340;&#22320;&#22336;</span><br></pre></td></tr></table></figure>
<p>发布成功后提示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- Starting ZeroNet...&#10;- OpenSSL loaded, version: 01000201F&#10;- Version: 0.4.1 r1536, Python 2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (Intel)], Gevent: 1.1.2&#10;- Loading site...&#10;- Creating FileServer....&#10;- Sending siteReload&#10;- &#123;&#39;to&#39;: 1, &#39;cmd&#39;: &#39;response&#39;, &#39;ok&#39;: &#39;Reloaded&#39;&#125;&#10;- Sending sitePublish&#10;- &#123;&#39;to&#39;: 2, &#39;cmd&#39;: &#39;response&#39;, &#39;ok&#39;: &#39;Successfuly published to 0 peers&#39;&#125;&#10;- Done.</span><br></pre></td></tr></table></figure>
<p>其中有提示 <strong>Successfuly published to 0 peers</strong> 每一个访问者都会保存你的网站，因为你的网站还没其他人访问过。所以没有推送给任何一个用户。</p>
<p>如何检验是否更新成功呢？很简单让小伙伴访问一下你的网站就可以了。</p>
<p>如果想要做更多的自定义修改请参考<a href="https://zeronet.readthedocs.io/en/latest/" target="_blank" rel="external">官方开发者文档</a></p>
<h2 id="看待_ZeroNet">看待 ZeroNet</h2><p>ZeroNet 是一个很有意思的项目。目前处于发展阶段。就算不能成功也会启发后来的人。目前 ZeroNet 最大的缺点是用户量比较少，部分网页访问速度比较慢。还有部分内容不是去完全中心化的。要说清楚得从原理说起，这个坑就太大了。<ruby>改天有空<rt>永远没空</rt></ruby>介绍吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>比特币中的一项特性是去中心化。这使得比特币拥有较为自由的能力，不会因为某些服务器故障而无法运行。这是因为使用了去中心化技术。如果互联网去中心化会是怎样的呢？</p>]]>
    
    </summary>
    
      <category term="ZeroNet" scheme="http://en.ors-sro.com/tags/ZeroNet/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Quine]]></title>
    <link href="http://en.ors-sro.com/Quine/"/>
    <id>http://en.ors-sro.com/Quine/</id>
    <published>2016-09-25T05:07:23.000Z</published>
    <updated>2016-09-25T11:01:33.048Z</updated>
    <content type="html"><![CDATA[<p>编写程序输出其源代码。</p>
<a id="more"></a>
<h2 id="奇怪的要求">奇怪的要求</h2><p>有没有一种程序能够将自己的源代码丝毫不差地输出呢？比如最常见的 <code>Hello World</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "stdio.h"</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的是</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Hello</span> world！</span><br></pre></td></tr></table></figure>
<p>如果要达到题目要求应该还要把 <code>#include &quot;stdio.h&quot;</code> <code>int main()</code> <code>{}</code> 等内容输出。也就是符合要求的输出是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &#34;stdio.h&#34;&#10;int main()&#10;&#123;&#10;  printf(&#34;Hello world!&#34;);&#10;  return 0;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>如果要输出以上内容，程序可以是这样</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "stdio.h"</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"#include \"stdio.h\"\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"int main()\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#123;\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">" printf(\"Hello world!\");\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">" return 0;\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这么做的话，符合要求的输出就变了。变成了要输出这样的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &#34;stdio.h&#34;&#10;int main()&#10;&#123;&#10;  printf(&#34;#include \&#34;stdio.h\&#34;\n&#34;);&#10;  printf(&#34;int main()\n&#34;);&#10;  printf(&#34;&#123;\n&#34;);&#10;  printf(&#34; printf(\&#34;Hello world!\&#34;);\n&#34;);&#10;  printf(&#34; return 0;\n&#34;);&#10;  printf(&#34;&#125;\n&#34;);&#10;  return 0;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>似乎陷入了自我指涉的循环。因为要输出源代码的非输出语句（如 <code>main()</code> , <code>return 0</code>）所以又得增加输出这些代码的语句。结果源代码发生变化，所以又要增加输出变化部分的代码，无穷无尽。</p>
<p>那么是否存在可以输出自身源码的代码呢？</p>
<p>答案是肯定的</p>
<h2 id="Quine">Quine</h2><p>先来看一段 <code>Java</code> 代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>; <span class="comment">// Quotation mark character</span></span><br><span class="line">  String[] l = &#123; <span class="comment">// Array of source code</span></span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main(String[] args)"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34; // Quotation mark character"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123; // Array of source code"</span>,</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; 6; i++) // Print opening code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++) // Print string array"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[6] + q + l[i] + q + ',');"</span>,</span><br><span class="line">  <span class="string">" for(int i = 7; i &lt; l.length; i++) // Print this code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="comment">// Print opening code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) <span class="comment">// Print string array</span></span><br><span class="line">  System.out.println(l[<span class="number">6</span>] + q + l[i] + q + <span class="string">','</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &lt; l.length; i++) <span class="comment">// Print this code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先来分析一下它的输出。代码中有三个输出语句</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="comment">// Print opening code</span></span><br><span class="line">System.out.println(l[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) <span class="comment">// Print string array</span></span><br><span class="line">System.out.println(l[<span class="number">6</span>] + q + l[i] + q + <span class="string">','</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &lt; l.length; i++) <span class="comment">// Print this code</span></span><br><span class="line">System.out.println(l[i]);</span><br></pre></td></tr></table></figure>
<p>第一个 <code>println</code> 很简单，就是打印 <code>l</code> 数组中的前六行。输出的内容是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Quine&#10;&#123;&#10;  public static void main(String[] args)&#10;  &#123;&#10;  char q = 34; // Quotation mark character&#10;  String[] l = &#123; // Array of source code</span><br></pre></td></tr></table></figure>
<p>第二个 <code>println</code> 相对复杂， <code>l[6]</code> 是 “  ” 也就是空白符。 <code>q</code> 是 <code>&quot;</code> 双引号。<code>l[i]</code> 是每一行的内容，最后附上一个 <code>,</code>。所以这个 <code>println</code> 主要做的是输出 <code>l</code> 中的每一行，并用双引号括起来，最后拼接上逗号。输出的内容是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;public class Quine&#34;,&#10;&#34;&#123;&#34;,&#10;&#34; public static void main(String[] args)&#34;,&#10;&#34; &#123;&#34;,&#10;&#34; char q = 34; // Quotation mark character&#34;,&#10;&#34; String[] l = &#123; // Array of source code&#34;,&#10;&#34; &#34;,&#10;&#34; &#125;;&#34;,&#10;&#34; for(int i = 0; i &#60; 6; i++) // Print opening code&#34;,&#10;&#34; System.out.println(l[i]);&#34;,&#10;&#34; for(int i = 0; i &#60; l.length; i++) // Print string array&#34;,&#10;&#34; System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#34;,&#10;&#34; for(int i = 7; i &#60; l.length; i++) // Print this code&#34;,&#10;&#34; System.out.println(l[i]);&#34;,&#10;&#34; &#125;&#34;,&#10;&#34;&#125;&#34;,</span><br></pre></td></tr></table></figure>
<p>第三个 <code>println</code> 打印 <code>l</code> 第7行之后的所有内容。输出的内容是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  &#125;;&#10;  for(int i = 0; i &#60; 6; i++) // Print opening code&#10;  System.out.println(l[i]);&#10;  for(int i = 0; i &#60; l.length; i++) // Print string array&#10;  System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#10;  for(int i = 7; i &#60; l.length; i++) // Print this code&#10;  System.out.println(l[i]);&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>三个输出凑一起</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Quine&#10;&#123;&#10;  public static void main(String[] args)&#10;  &#123;&#10;  char q = 34; // Quotation mark character&#10;  String[] l = &#123; // Array of source code&#10;  &#34;public class Quine&#34;,&#10;  &#34;&#123;&#34;,&#10;  &#34; public static void main(String[] args)&#34;,&#10;  &#34; &#123;&#34;,&#10;  &#34; char q = 34; // Quotation mark character&#34;,&#10;  &#34; String[] l = &#123; // Array of source code&#34;,&#10;  &#34; &#34;,&#10;  &#34; &#125;;&#34;,&#10;  &#34; for(int i = 0; i &#60; 6; i++) // Print opening code&#34;,&#10;  &#34; System.out.println(l[i]);&#34;,&#10;  &#34; for(int i = 0; i &#60; l.length; i++) // Print string array&#34;,&#10;  &#34; System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#34;,&#10;  &#34; for(int i = 7; i &#60; l.length; i++) // Print this code&#34;,&#10;  &#34; System.out.println(l[i]);&#34;,&#10;  &#34; &#125;&#34;,&#10;  &#34;&#125;&#34;,&#10;  &#125;;&#10;  for(int i = 0; i &#60; 6; i++) // Print opening code&#10;  System.out.println(l[i]);&#10;  for(int i = 0; i &#60; l.length; i++) // Print string array&#10;  System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#10;  for(int i = 7; i &#60; l.length; i++) // Print this code&#10;  System.out.println(l[i]);&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>与源码比较</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>; <span class="comment">// Quotation mark character</span></span><br><span class="line">  String[] l = &#123; <span class="comment">// Array of source code</span></span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main(String[] args)"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34; // Quotation mark character"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123; // Array of source code"</span>,</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; 6; i++) // Print opening code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++) // Print string array"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[6] + q + l[i] + q + ',');"</span>,</span><br><span class="line">  <span class="string">" for(int i = 7; i &lt; l.length; i++) // Print this code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="comment">// Print opening code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) <span class="comment">// Print string array</span></span><br><span class="line">  System.out.println(l[<span class="number">6</span>] + q + l[i] + q + <span class="string">','</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &lt; l.length; i++) <span class="comment">// Print this code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完全一样。</p>
<p>这就是能够输出自身源码的代码。</p>
<p>通常把这类能够输出自身源码的代码称为 <code>Quine</code> 。<a href="https://en.wikipedia.org/wiki/Quine_(computing)" target="_blank" rel="external">Quine</a> 一词来源于逻辑学家，哲学家 <a href="https://en.wikipedia.org/wiki/Willard_Van_Orman_Quine" target="_blank" rel="external">Willard_Van_Orman_Quine</a></p>
<p>当然不仅是 <code>Java</code> 可以编写 <code>Quine</code>，<code>C</code> 也可以编写 <code>Quine</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;<span class="keyword">char</span> q=<span class="number">34</span>,n=<span class="number">10</span>,*a=<span class="string">"main()&#123;char q=34,n=10,*a=%c%s%c;printf(a,q,a,q,n);&#125;%c"</span>;<span class="built_in">printf</span>(a,q,a,q,n);&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的原理跟之前 <code>Java</code> 版的差不多。此外还有不同的做法，比如使用 <code>C</code> 的<strong>宏</strong>来实现</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> T(a) main()&#123;printf(a,#a);&#125;</span></span><br><span class="line">T(<span class="string">"#define T(a) main()&#123;printf(a,#a);&#125;\nT(%s)"</span>)</span><br></pre></td></tr></table></figure>
<p>还有<a href="http://blog.chinaunix.net/uid-25299072-id-3077417.html" target="_blank" rel="external">很多很多的玩法</a>。通常一种语言的 <code>Quine</code> 不是唯一的。</p>
<p>除了编译型语言，解释形语言也可以编写 <code>Quine</code>。比如 <code>Python</code> 是这样的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'s = %r\nprint(s%%s)'</span></span><br><span class="line">print(s%s)</span><br></pre></td></tr></table></figure>
<p><code>Lua</code> 是这样的</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">[["x = [" .. "[" .. x .. "]" .. "]\nprint(" .. x)]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"x = ["</span> .. <span class="string">"["</span> .. x .. <span class="string">"]"</span> .. <span class="string">"]\nprint("</span> .. x)</span><br></pre></td></tr></table></figure>
<p><code>Javascript</code> 是这样的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Quine = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">var</span> str = <span class="built_in">arguments</span>.callee.toString(); Quine = <span class="built_in">console</span>.log(str.substring(<span class="number">52</span>, <span class="number">60</span>) + str +</span><br><span class="line"> str.substring(<span class="number">32</span>, <span class="number">37</span>) + str.substring(<span class="number">9</span>, <span class="number">11</span>));&#125;.call()</span><br></pre></td></tr></table></figure>
<h2 id="Ouroboros">Ouroboros</h2><p>输出源码还不够，有些人想到了将不同语言的 <code>Quine</code> 嵌套到一起。用一个语言的代码输出另一个语言的源码，该源码又可以输出之前语言的源码。于是就出现了这样的 <code>Java</code> 代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>;</span><br><span class="line">  String[] l = &#123;</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; C++ Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;============="</span>,</span><br><span class="line">  <span class="string">"#include &lt;iostream&gt;"</span>,</span><br><span class="line">  <span class="string">"#include &lt;string&gt;"</span>,</span><br><span class="line">  <span class="string">"using namespace std;"</span>,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">  <span class="string">"int main(int argc, char* argv[])"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" string l[] = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 20; i &lt;= 25; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[0] + q + l[i] + q + ',' &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 26; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" return 0;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Java Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;=========="</span>,</span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main( String[] args )"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 2; i &lt;= 9; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println( l[0] + q + l[i] + q + ',' );"</span>,</span><br><span class="line">  <span class="string">" for(int i = 10; i &lt;= 18; i++))"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++)</span><br><span class="line">  System.out.println( l[<span class="number">0</span>] + q + l[i] + q + <span class="string">','</span> );</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &lt;= <span class="number">18</span>; i++)</span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码输出的是一段 <code>C++</code> 代码</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>;</span><br><span class="line">  <span class="built_in">string</span> l[] = &#123;</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; C++ Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;============="</span>,</span><br><span class="line">  <span class="string">"#include &lt;iostream&gt;"</span>,</span><br><span class="line">  <span class="string">"#include &lt;string&gt;"</span>,</span><br><span class="line">  <span class="string">"using namespace std;"</span>,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">  <span class="string">"int main(int argc, char* argv[])"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" string l[] = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 20; i &lt;= 25; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[0] + q + l[i] + q + ',' &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 26; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" return 0;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Java Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;============="</span>,</span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main(String[] args)"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 2; i &lt;= 9; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println( l[i] );"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[0] + q + l[i] + q + ',');"</span>,</span><br><span class="line">  <span class="string">" for(int i = 10; i &lt;= 18; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">20</span>; i &lt;= <span class="number">25</span>; i++)</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; l[i] &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">34</span>; i++)</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; l[<span class="number">0</span>] + q + l[i] + q + <span class="string">','</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">26</span>; i &lt;= <span class="number">34</span>; i++)</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; l[i] &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段 <code>C++</code> 代码反过来生成上面的 <code>Java</code> 代码。</p>
<p>这样的代码被称为 <code>Quine Relay</code> 或者 <code>Ouroboros</code> 。</p>
<p>大家一看，原来还可以这么玩。于是一发不可收拾，更多语言的版本出现了。</p>
<ul>
<li><a href="http://blog.sigfpe.com/2008/02/third-order-quine-in-three-languages.html" target="_blank" rel="external">Haskell → Python → Ruby</a></li>
<li><a href="http://www.stratigery.com/source.html#Ouroboros" target="_blank" rel="external">Python → Bash → Perl</a></li>
<li><a href="http://archive.is/ACEce" target="_blank" rel="external">C → Haskell → Python → Perl</a></li>
<li><a href="http://blog.sigfpe.com/2011/01/quine-central.html" target="_blank" rel="external">Haskell → Perl → Python → Ruby → C → Java</a></li>
<li><a href="http://asiajin.com/blog/2009/09/22/uroboros-programming-with-11-programming-languages/" target="_blank" rel="external">Ruby → Python → Perl → Lua → OCaml → Haskell → C → Java → Brainfuck → Whitespace → Unlambda</a></li>
</ul>
<p>最后有一个<ruby>聪明绝顶<rt>丧心病狂</rt></ruby>的人做出了<a href="https://github.com/mame/quine-relay" target="_blank" rel="external">100个语言的Quine</a> 。好了好了你赢了。</p>
<h2 id="后记">后记</h2><p>限于篇幅，很多语言的 <code>Quine</code> 还没有给出。感兴趣的童鞋可以去维基查看。编程语言除了这种玩法之外，还有另外一种玩法，也是涉及到多个语言的。<del>我懒得写了就不多说了</del>请相信我一定会在下次更新的！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>编写程序输出其源代码。</p>]]>
    
    </summary>
    
      <category term="Quine" scheme="http://en.ors-sro.com/tags/Quine/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[消除多余的 switch 语句]]></title>
    <link href="http://en.ors-sro.com/Remove-redundant-switch/"/>
    <id>http://en.ors-sro.com/Remove-redundant-switch/</id>
    <published>2016-07-27T06:27:54.000Z</published>
    <updated>2016-07-29T08:23:33.840Z</updated>
    <content type="html"><![CDATA[<p>编写程序遇到多分支的情况总是少不了 <code>switch/if</code> 语句。在面向对象编程里大部分的 <code>switch</code> 语句都是可以避免的。使用<strong>多态</strong>和<strong>简单工厂模式</strong>可以消除多余的 <code>switch</code> 语句。</p>
<a id="more"></a>
<h2 id="简单的需求">简单的需求</h2><blockquote>
<p>编写程序根据序号输出动物的名字和叫声。</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>名字</th>
<th>叫声</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>猫咪</td>
<td>喵喵喵？</td>
</tr>
<tr>
<td>2</td>
<td>青蛙</td>
<td>蛤？</td>
</tr>
</tbody>
</table>
<h2 id="过程式的实现方式">过程式的实现方式</h2><h3 id="思路">思路</h3><p>直接从输入读入数字，用 <code>switch</code> 判断并输出名字和叫声。</p>
<h3 id="代码">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"名为猫咪"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"叫了一声：喵喵喵？"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"名为青蛙"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"叫了一声：蛤？"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"这种情况是要加钱的！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析">解析</h3><p>使用了传统的过程式的编程思想。没有多余的 <code>switch</code> 语句。本文完。。。。。。个屁嘞。实际情况中很可能不需要同时输出名字和叫声。所以需要将相关的逻辑封装。</p>
<h2 id="封装的实现方式">封装的实现方式</h2><h3 id="思路-1">思路</h3><p>将相关的逻辑代码封装到函数中。并将这两个函数封装到一个系统类中。需要时调用即可</p>
<h3 id="代码-1">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">       	<span class="comment">// 具体实现移到 AnimalSystem</span></span><br><span class="line">        Console.WriteLine(AnimalSystem.Name(no)); </span><br><span class="line">        Console.WriteLine(AnimalSystem.Sound(no));</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"名为猫咪"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"名为青蛙"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"叫了一声：喵喵喵？"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"叫了一声：蛤？"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析-1">解析</h3><p>名字和叫声的逻辑都封装到 <code>AnimalSystem</code> 中了。但还不够面向对象。</p>
<h2 id="面向对象的实现方式">面向对象的实现方式</h2><h3 id="思路-2">思路</h3><p>新建<strong>猫咪</strong>和<strong>青蛙</strong>类，继承于<strong>动物</strong>类。将名字和叫声移到相应的类中。</p>
<h3 id="代码-2">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(AnimalSystem.Name(no));</span><br><span class="line">        Console.WriteLine(AnimalSystem.Sound(no));</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 引入对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 第 1 个 switch</span></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat().Name();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Frog().Name();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Animal().Name();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 第 2 个 switch</span></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat().Sound();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Frog().Sound();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Animal().Sound();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)  </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为猫咪"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：喵喵喵？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Frog</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为青蛙"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：蛤？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析-2">解析</h3><p>现在的代码已经足够面向对象了。但是代码中出现了两次 <code>switch</code> 语句。过程式的代码可是只有一次。有没有什么办法既使用面向对象又只使用一次 <code>switch</code> 语句呢？答案是肯定的。使用<strong>简单工程模式</strong>搭配<strong>多态</strong>可以做到。</p>
<h2 id="简单工厂的实现方式">简单工厂的实现方式</h2><h3 id="思路-3">思路</h3><p>两次 <code>switch</code> 语句出现在 序号→名字 和 序号→叫声 中。先使用<strong>简单工厂模式</strong>产生 序号→类型 的转换，这时需要一次 <code>switch</code> 语句。之后利用面向对象的多台性质产生 类型→名字 和 类型→叫声 这两次转换。这次转换不需要 <code>switch</code> 语句。</p>
<h3 id="代码-3">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序号 → 类型</span></span><br><span class="line">        Animal animal = AnimalFactory.GetAnimal(no);</span><br><span class="line">        Console.WriteLine(AnimalSystem.Name(animal));</span><br><span class="line">        Console.WriteLine(AnimalSystem.Sound(animal));</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params">Animal animal</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 类型 → 名字</span></span><br><span class="line">        <span class="keyword">return</span> animal.Name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params">Animal animal</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 类型 → 声音</span></span><br><span class="line">        <span class="keyword">return</span> animal.Sound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)  </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为猫咪"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：喵喵喵？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Frog</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为青蛙"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：蛤？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">GetAnimal</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// switch 语句移到这里。唯一一次 switch</span></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Frog();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析-3">解析</h3><p>通过引入 <code>AnimalFactory</code> 这个简单工厂，之后通过多态特性消除了多次的 <code>switch</code> 语句。如果需要添加新的类型如美羊羊，则需要修改3个地方。</p>
<ol>
<li>新建类继承自 <code>Animal</code></li>
<li>实现相应的 <code>Name()</code> 和 <code>Sound()</code> 方法</li>
<li>在工厂类 <code>AnimalFactory</code> 中添加新的 <code>case</code></li>
</ol>
<p>实际上就算是不了解简单工程模式也很可能写出来。设计模式应该是自然而然的应用而不是刻意地使用，产生冗余的代码。</p>
<h2 id="总结">总结</h2><p>这个简单的例子还有很多可以优化的地方。例如 <code>Animal</code> 类应该是抽象类，不包含具体的实现。同时可以<a href="../Anonying-null/#合理地使用_Null">引入Null Class</a>来用于输出 <strong>这种情况是要加钱的！</strong>等类似没有实现的情况下的默认行为。还可以将简单工厂模式改成工厂模式以符合开放-封闭原则。不过这些都不是本文范围内的。我学膜法去了。 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>编写程序遇到多分支的情况总是少不了 <code>switch/if</code> 语句。在面向对象编程里大部分的 <code>switch</code> 语句都是可以避免的。使用<strong>多态</strong>和<strong>简单工厂模式</strong>可以消除多余的 <code>switch</code> 语句。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://en.ors-sro.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode -- Reverse String]]></title>
    <link href="http://en.ors-sro.com/LeetCode-reverse-string/"/>
    <id>http://en.ors-sro.com/LeetCode-reverse-string/</id>
    <published>2016-07-18T07:09:14.000Z</published>
    <updated>2016-07-29T07:57:25.130Z</updated>
    <content type="html"><![CDATA[<p>找不到工作，刷刷 Leetcode 来保持一下写代码的手感。从最简单的开始，也就是 Acceptance 最高的开始。目前接受率最高的是<a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="external">逆序字符串</a></p>
<a id="more"></a>
<h2 id="题目">题目</h2><blockquote>
<p>编写一个函数能够逆序输出字符串<br><strong> 例子 </strong><br>给定 <code>s = &quot;hello&quot;</code> 返回 <code>olleh</code></p>
</blockquote>
<p>总的来说是一个很简单的题目。<code>CS</code> 的学生估计都做过这道练手题。</p>
<h2 id="In_Haskell_Way">In Haskell Way</h2><h3 id="思路">思路</h3><p>看到这个题目就很自然的想到使用<strong>分治</strong>的思想。如果是空字符串则不需要逆序，直接返回即可。如果是长度为1的字符串</p>
<ol>
<li>如果是空字符串，不需要逆序，直接返回即可</li>
<li>如果不是空字符串，将除了第一个字符外的子字符串逆序，之后拼接上第一个字符串即可。</li>
</ol>
<h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.length() == <span class="number">0</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> reverseString(s.substr(<span class="number">1</span>, s.length())) + s[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果">结果</h3><p>在遇到超长字符时提示 <code>Memory Limit Exceeded</code> 。估计是因为递归的次数太多，调用次数太多而产生 <code>StackOverflow</code> （栈溢出）。所以下一步是要优化递归。通常的解决方案是将递归优化为<strong>尾递归</strong>。递归通常需要全部展开之后才能计算值。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"Hello"</span>)</span></span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"ello"</span>)</span></span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"llo"</span>)</span></span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"lo"</span>)</span></span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">				<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">'o'</span>)</span></span> + <span class="string">'l'</span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">				<span class="string">'o'</span> + <span class="string">'l'</span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span> <span class="comment">// 完全展开 开始计算</span></span><br><span class="line"></span><br><span class="line">			<span class="string">"ol"</span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">		<span class="string">"oll"</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"olle"</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"olleH"</span></span><br></pre></td></tr></table></figure>
<p>尾递归是将计算结果传递到下一次递归中。因此之前的任何信息都不需要保存了，清理栈中的参数和返回地址等。这样就不会出现 <code>StackOverflow</code> 。当然这一步是编译器做的优化工作。</p>
<h2 id="In_Tail_Recursion_Way">In Tail Recursion Way</h2><h3 id="思路-1">思路</h3><p>尾递归需要把计算结果传递到下一次递归中。纯函数的唯一输入只有参数。所以需要通过传递参数的方式将计算结果传递。</p>
<h3 id="代码-1">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseStringTailRecursion</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> result = "")</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> reverseStringTailRecursion(s.substr(<span class="number">1</span>, s.length()), s[<span class="number">0</span>] + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> reverseStringTailRecursion(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-1">结果</h3><p>先来看一下尾递归版本的计算过程</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"Hello"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"Hello"</span>,<span class="string">""</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"ello"</span>,<span class="string">'H'</span> + <span class="string">""</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"llo"</span>,<span class="string">'e'</span> + <span class="string">'H'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"lo"</span>,<span class="string">'l'</span> + <span class="string">"eH"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">'o'</span>,<span class="string">'l'</span> + <span class="string">"leH"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">""</span>,<span class="string">'o'</span> + <span class="string">"lleH"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="string">"olleH"</span></span><br></pre></td></tr></table></figure>
<p>可以发现每一次的计算都与之前的函数不再有关系，只与参数有关。从形状上来看，普通递归是一个箭头型 <code>&gt;</code> 。而尾递归是一个直筒型 <code>≡</code> 。信心满满的提交。最后报错，错误和上次一样 <code>StackOverflow</code> 。 看来编译环境没有开启尾递归优化。只好另行他法。既然不允许递归，那就想办法消除递归。通过观察普通递归的计算过程发现其分为<strong>展开</strong>和<strong>计算</strong>两个阶段。展开阶段会栈溢出。所以想办法去掉展开阶段，转为普通的循环即可。观察计算的过程，发现是从尾部开始拼接字符串。那么循环从尾部开始即可。</p>
<h2 id="In_Loop_Way">In Loop Way</h2><h3 id="思路-2">思路</h3><p>从尾部开始去字符串，一直拼接，拼接到字符串第一个字符。</p>
<h3 id="代码-2">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> result = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		result += s[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-2">结果</h3><p>通过 476 个测试用例，用时 13ms 。超过 25.5% 的人（C++）。总算是通过了。不过似乎成绩不是很理想，居然连一半的人都没有超过。仔细想想还是有优化空间的。现在的时间复杂度是 <code>O(n)</code>, 空间复杂度是 <code>O(1)</code> 。看起来似乎是很优秀的数据。但是逆序的过程需要额外的一个字符串来承载结果。能否做成原地（In Place）的呢？答案是肯定的。</p>
<h2 id="In_Place_Way">In Place Way</h2><h3 id="思路-3">思路</h3><p>交换首尾字符直至完成。</p>
<h3 id="代码-3">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j = s.length() - <span class="number">1</span>; <span class="comment">//s.length() 位置是 '\0'</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(s[i++], s[j--]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-3">结果</h3><p>通过 476 个测试用例，用时 12ms 。超过 29% 的人（C++）。噗，只提升了 5% 。不知道前面的人是不是用了什么稀奇古怪的 <code>Hack</code> 。 尝试了传递参数时传递引用。发现时间没有变化。又尝试了其他方法，都没有什么效果。</p>
<h2 id="总结">总结</h2><p>先是根据直觉写出递归的方式，然后优化为尾递归，发现编译环境没有做优化。于是改为循环，此时时间复杂度为 <code>O(n)</code> 。之后使用原地交换的方法将时间复杂度降为 <code>O(n/2)</code> 。最后还是没有找到更快的解决方案。如果有更快的方案，欢迎交流。</p>
<h2 id="参考">参考</h2><ol>
<li><a href="https://www.zhihu.com/question/20761771/answer/19996299" target="_blank" rel="external">什么是尾递归</a></li>
<li><a href="http://stackoverflow.com/questions/33923/what-is-tail-recursion" target="_blank" rel="external">What is tail recursion</a></li>
<li><a href="http://blog.csdn.net/luoweifu/article/details/51470998" target="_blank" rel="external">C++ 性能分析</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>找不到工作，刷刷 Leetcode 来保持一下写代码的手感。从最简单的开始，也就是 Acceptance 最高的开始。目前接受率最高的是<a href="https://leetcode.com/problems/reverse-string/">逆序字符串</a></p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://en.ors-sro.com/tags/C/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Airbnb es6 编码风格翻译]]></title>
    <link href="http://en.ors-sro.com/Airbnb-es6-style-guide/"/>
    <id>http://en.ors-sro.com/Airbnb-es6-style-guide/</id>
    <published>2016-06-13T13:13:54.000Z</published>
    <updated>2016-06-26T09:11:02.491Z</updated>
    <content type="html"><![CDATA[<p>Airbnb JavaScript 的编码风格 原文地址: <a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb/JavaScript</a></p>
<a id="more"></a>
<p><strong>前言</strong></p>
<p>翻译 <em> Airbnb JavaScript Style Guide </em> 主要是为了学习 <code>JavaScript</code> 编码风格。因为不是专业的译者，翻译不足之处请指出。</p>
<h1 id="Airbnb_JavaScript_Style_Guide">Airbnb JavaScript Style Guide</h1><p><em>合理地编写 JavaScript </em></p>
<p>其他的风格指导</p>
<ul>
<li><a href="es5/">ES5</a></li>
<li><a href="react/">React</a></li>
<li><a href="https://github.com/airbnb/css" target="_blank" rel="external">CSS &amp; Sass</a></li>
<li><a href="https://github.com/airbnb/ruby" target="_blank" rel="external">Ruby</a></li>
</ul>
<h2 id="类型">类型</h2><p>  <a name="types--primitives"></a><a name="1.1"></a></p>
<ul>
<li><p><a href="#types--primitives">1.1</a> <strong>基本类型</strong>: 基本类型直接获取它的值</p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure>
<p><a name="types--complex"></a><a name="1.2"></a></p>
</li>
<li><p><a href="#types--complex">1.2</a>  <strong>复杂类型</strong>: 复杂类型通过引用获取值</p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><code>function</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="引用">引用</h2><p>  <a name="references--prefer-const"></a><a name="2.1"></a></p>
<ul>
<li><p><a href="#references--prefer-const">2.1</a> 请使用 <code>const</code> 修饰所有引用而不是 <code>var</code> 。eslint: <a href="http://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="external"><code>prefer-const</code></a>, <a href="http://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="external"><code>no-const-assign</code></a></p>
<blockquote>
<p>以此确保你不能对引用重新赋值，避免难以理解的代码和 Bug 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><a name="references--disallow-var"></a><a name="2.2"></a></p>
</li>
<li><p><a href="#references--disallow-var">2.2</a> 如果非要对引用重新复制，请使用 <code>let</code> 而不是 <code>var</code> 。eslint: <a href="http://eslint.org/docs/rules/no-var.html" target="_blank" rel="external"><code>no-var</code></a> jscs: <a href="http://jscs.info/rule/disallowVar" target="_blank" rel="external"><code>disallowVar</code></a></p>
<blockquote>
<p>原因是 <code>let</code> 为块级作用域，而 <code>var</code> 是 函数作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><a name="references--block-scope"></a><a name="2.3"></a></p>
</li>
<li><p><a href="#references--block-scope">2.3</a> 注意 <code>let</code> 和 <code>const</code> 都是块级作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const 和 let 只存在其定义的区块中。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="对象">对象</h2><p>  <a name="objects--no-new"></a><a name="3.1"></a></p>
<ul>
<li><p><a href="#objects--no-new">3.1</a> 请使用 literal syntax 创建对象. eslint: <a href="http://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="external"><code>no-new-object</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--reserved-words"></a><a name="3.2"></a></p>
</li>
<li><p><a href="#objects--reserved-words">3.2</a> 如果代码在浏览器的脚本环境中执行，请勿使用[保留字]当键值，IE8中会失效。<a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="external">详情请看</a>。在服务器代码和 ES6 模块中使用没问题。 jscs: <a href="http://jscs.info/rule/disallowIdentifierNames" target="_blank" rel="external"><code>disallowIdentifierNames</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  <span class="keyword">default</span>: &#123; clark: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  private: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  defaults: &#123; clark: <span class="string">'kent'</span> &#125;, <span class="comment">//default 多了个 s</span></span><br><span class="line">  hidden: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--reserved-words-2"></a><a name="3.3"></a></p>
</li>
<li><p><a href="#objects--reserved-words-2">3.3</a> 请使用易懂的符号代替保留字。 jscs: <a href="http://jscs.info/rule/disallowIdentifierNames" target="_blank" rel="external"><code>disallowIdentifierNames</code></a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const superman = &#123;</span><br><span class="line">  class: 'alien',</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const superman = &#123;</span><br><span class="line">  klass: 'alien',</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const superman = &#123;</span><br><span class="line">  type: 'alien',</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="es6-computed-properties"></a><a name="3.4"></a></p>
</li>
<li><p><a href="#es6-computed-properties">3.4</a> 请在创建带有动态属性名的对象时使用可计算的属性名。</p>
<blockquote>
<p>因为这样允许一次在一个位置定义对象的所有属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="es6-object-shorthand"></a><a name="3.5"></a></p>
</li>
<li><p><a href="#es6-object-shorthand">3.5</a> 请使用对象方法的简写。 eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="external"><code>object-shorthand</code></a> jscs: <a href="http://jscs.info/rule/requireEnhancedObjectLiterals" target="_blank" rel="external"><code>requireEnhancedObjectLiterals</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="es6-object-concise"></a><a name="3.6"></a></p>
</li>
<li><p><a href="#es6-object-concise">3.6</a> 请使用属性的简写。 eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="external"><code>object-shorthand</code></a> jscs: <a href="http://jscs.info/rule/requireEnhancedObjectLiterals" target="_blank" rel="external"><code>requireEnhancedObjectLiterals</code></a></p>
<blockquote>
<p>因为更短且更达意。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--grouped-shorthand"></a><a name="3.7"></a></p>
</li>
<li><p><a href="#objects--grouped-shorthand">3.7</a> 简写属性放在对象声明的头部。</p>
<blockquote>
<p>原因是更容易区分哪些属性使用了简写。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--quoted-props"></a><a name="3.8"></a></p>
</li>
<li><p><a href="#objects--quoted-props">3.8</a> 只给非法标识符的属性加引号。 eslint: <a href="http://eslint.org/docs/rules/quote-props.html" target="_blank" rel="external"><code>quote-props</code></a> jscs: <a href="http://jscs.info/rule/disallowQuotedKeysInObjects" target="_blank" rel="external"><code>disallowQuotedKeysInObjects</code></a></p>
<blockquote>
<p>因为这样更易读，且提供语法高亮，还可以更容易地被很多 JS 引擎优化。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bad = &#123;</span><br><span class="line">  <span class="string">'foo'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'bar'</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> good = &#123;</span><br><span class="line">  foo: <span class="number">3</span>,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--prototype-builtins"></a></p>
</li>
<li><p><a href="#objects--prototype-builtins">3.9</a> 请不要直接调用 <code>Object.prototype</code> 的方法。例如 <code>hasOwnProperty</code> 、<code>propertyIsEnumerabel</code> 和 <code>isPrototypeOf</code> </p>
<blockquote>
<p>因为这些方法可能被对象自身的属性覆盖。例如对象 <code>{ hasOwnProperty: false }</code> 又或者是空对象 (<code>Object.create(null)</code>) </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(object.hasOwnProperty(key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="built_in">Object</span>.prototype.hasOwnProperty; <span class="comment">// 在模块作用域中缓存查询。</span></span><br><span class="line"><span class="comment">/* or */</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="built_in">require</span>(<span class="string">'has'</span>);</span><br><span class="line">…</span><br><span class="line"><span class="built_in">console</span>.log(has.call(object, key));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="数组">数组</h2><p>  <a name="arrays--literals"></a><a name="4.1"></a></p>
<ul>
<li><p><a href="#arrays--literals">4.1</a> 请使用 literal syntax 创建数组。 eslint: <a href="http://eslint.org/docs/rules/no-array-constructor.html" target="_blank" rel="external"><code>no-array-constructor</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure>
<p><a name="arrays--push"></a><a name="4.2"></a></p>
</li>
<li><p><a href="#arrays--push">4.2</a> 请使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="external">Array#push</a> 添加元素而不是直接复制。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure>
<p><a name="es6-array-spreads"></a><a name="4.3"></a></p>
</li>
<li><p><a href="#es6-array-spreads">4.3</a> 请使用数组扩散符 <code>...</code> 拷贝数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure>
<p><a name="arrays--from"></a><a name="4.4"></a></p>
</li>
<li><p><a href="#arrays--from">4.4</a> 转化类数组对象到数组时，请使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="external">Array.from</a> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure>
<p><a name="arrays--callback-return"></a><a name="4.5"></a></p>
</li>
<li><p><a href="#arrays--callback-return">4.5</a> 请在数组回调方法中使用 <code>return</code> 语句。如果函数体只包含一条语句，可以省略  <code>return</code> 。 <a href="#8.2">8.2</a>. eslint: <a href="http://eslint.org/docs/rules/array-callback-return" target="_blank" rel="external"><code>array-callback-return</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> flat = &#123;&#125;;</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce((memo, item, index) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  flat[index] = flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> flat = &#123;&#125;;</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce((memo, item, index) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  flat[index] = flatten;</span><br><span class="line">  <span class="keyword">return</span> flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter((msg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter((msg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="解构">解构</h2><p>  <a name="destructuring--object"></a><a name="5.1"></a></p>
<ul>
<li><p><a href="#destructuring--object">5.1</a> 当访问和使用对象的多个属性时，请使用对象解构。 jscs: <a href="http://jscs.info/rule/requireObjectDestructuring" target="_blank" rel="external"><code>requireObjectDestructuring</code></a></p>
<blockquote>
<p>因为解构避免创建属性的临时引用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="destructuring--array"></a><a name="5.2"></a></p>
</li>
<li><p><a href="#destructuring--array">5.2</a> 请使用数组解构。 jscs: <a href="http://jscs.info/rule/requireArrayDestructuring" target="_blank" rel="external"><code>requireArrayDestructuring</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure>
<p><a name="destructuring--object-over-array"></a><a name="5.3"></a></p>
</li>
<li><p><a href="#destructuring--object-over-array">5.3</a> 使用对象解构返回多个值，而不是数组解构。 jscs: <a href="http://jscs.info/rule/disallowArrayDestructuringReturn" target="_blank" rel="external"><code>disallowArrayDestructuringReturn</code></a></p>
<blockquote>
<p>因为可以添加新属性或者改变顺序而不用修改。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接下来就是见证奇迹发生的时刻。</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者需要考虑返回数据中的顺序。</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接下来就是见证奇迹发生的时刻。</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者只取所需。</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="字符串">字符串</h2><p>  <a name="strings--quotes"></a><a name="6.1"></a></p>
<ul>
<li><p><a href="#strings--quotes">6.1</a> 请使用单引号 <code>&#39;&#39;</code> 括住字符串。 eslint: <a href="http://eslint.org/docs/rules/quotes.html" target="_blank" rel="external"><code>quotes</code></a> jscs: <a href="http://jscs.info/rule/validateQuoteMarks" target="_blank" rel="external"><code>validateQuoteMarks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="strings--line-length"></a><a name="6.2"></a></p>
</li>
<li><p><a href="#strings--line-length">6.2</a> 超过100个字符的字符串应该以多行拼接的方式书写。</p>
<p><a name="strings--concat-perf"></a><a name="6.3"></a></p>
</li>
<li><p><a href="#strings--concat-perf">6.3</a> 注意：如果滥用，可能会影响性能。 <a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a> 与 <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">讨论</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span><br><span class="line">of Batman. When you stop to think about how Batman had anything to do \</span><br><span class="line">with this, you would get nowhere \</span><br><span class="line">fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</span><br><span class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</span><br><span class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="es6-template-literals"></a><a name="6.4"></a></p>
</li>
<li><p><a href="#es6-template-literals">6.4</a> 动态地拼接字符串时，请使用字符串模板而不是拼接。 eslint: <a href="http://eslint.org/docs/rules/prefer-template.html" target="_blank" rel="external"><code>prefer-template</code></a> <a href="http://eslint.org/docs/rules/template-curly-spacing" target="_blank" rel="external"><code>template-curly-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireTemplateStrings" target="_blank" rel="external"><code>requireTemplateStrings</code></a></p>
<blockquote>
<p>因为字符串模板易读，语法简洁，行数适中，且支持字符串插值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="strings--eval"></a><a name="6.5"></a></p>
</li>
<li><p><a href="#strings--eval">6.5</a> 请勿对字符串使用 <code>eval()</code> ，因为会引入太多漏洞。</p>
<p><a name="strings--escaping"></a></p>
</li>
<li><p><a href="#strings--escaping">6.6</a> 只在必要时使用转义符。 eslint: <a href="http://eslint.org/docs/rules/no-useless-escape" target="_blank" rel="external"><code>no-useless-escape</code></a></p>
<blockquote>
<p>因为斜杠损害了可读性，所以若无必要请勿使用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' \i\s \"quoted\"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' is "quoted"'</span>;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">`'this' is "quoted"`</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="函数">函数</h2><p>  <a name="functions--declarations"></a><a name="7.1"></a></p>
<ul>
<li><p><a href="#functions--declarations">7.1</a> 请使用函数声明而不是函数表达式。 jscs: <a href="http://jscs.info/rule/requireFunctionDeclarations" target="_blank" rel="external"><code>requireFunctionDeclarations</code></a></p>
<blockquote>
<p>因为函数声明是有名字的，所以在调用栈中更容易识别出来。而且整个函数声明会被提升，但是只有函数表达式的引用会被提升。这样可以使用 <a href="#箭头函数">Arrow Functions</a> 代替函数表达式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--iife"></a><a name="7.2"></a></p>
</li>
<li><p><a href="#functions--iife">7.2</a> 用括号括住立即执行函数。 eslint: <a href="http://eslint.org/docs/rules/wrap-iife.html" target="_blank" rel="external"><code>wrap-iife</code></a> jscs: <a href="http://jscs.info/rule/requireParenthesesAroundIIFE" target="_blank" rel="external"><code>requireParenthesesAroundIIFE</code></a></p>
<blockquote>
<p>因为用括号括住立即执行函数表达式和调用括号更利落地表达出独立单元的感觉。在模块遍地的世界里，基本上用不到 IIFE 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// immediately-invoked function expression (IIFE)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p><a name="functions--in-blocks"></a><a name="7.3"></a></p>
</li>
<li><p><a href="#functions--in-blocks">7.3</a> 请勿在非函数区块（if，While 等）中声明函数。请将函数赋值给变量。浏览器虽然允许这么做，但是浏览器间的解释不一样。 eslint: <a href="http://eslint.org/docs/rules/no-loop-func.html" target="_blank" rel="external"><code>no-loop-func</code></a></p>
<p><a name="functions--note-on-blocks"></a><a name="7.4"></a></p>
</li>
<li><p><a href="#functions--note-on-blocks">7.4</a> <strong>注意：</strong> ECMA-262 定义 <code>block</code> 为一系列的语句。函数声明不是语句。 <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">查看 ECMA-262 关于这个问题的记录Read</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--arguments-shadow"></a><a name="7.5"></a></p>
</li>
<li><p><a href="#functions--arguments-shadow">7.5</a> 请勿将形参命名为 <code>arguments</code> 。这将覆盖每个函数的 <code>arguments</code> 对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="es6-rest"></a><a name="7.6"></a></p>
</li>
<li><p><a href="#es6-rest">7.6</a> 请勿使用 <code>arguments</code>。请选用不定参数 <code>...</code>。Never use <code>arguments</code>, opt to use rest syntax <code>...</code> instead. eslint: <a href="http://eslint.org/docs/rules/prefer-rest-params" target="_blank" rel="external"><code>prefer-rest-params</code></a></p>
<blockquote>
<p>因为 <code>...</code> 鲜明地表达传入的参数，再加上，不定参数是货真价实的数组，而不是像 <code>arguments</code>那样的类数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="es6-default-parameters"></a><a name="7.7"></a></p>
</li>
<li><p><a href="#es6-default-parameters">7.7</a> 请使用默认参数，而不是改变函数参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// No! 不应该改变函数参数。</span></span><br><span class="line">  <span class="comment">// Double bad: 如果 opts 是可判定为 false 的。它会被设为你可能想要的，但这会引入潜在的 Bug。</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--default-side-effects"></a><a name="7.8"></a></p>
</li>
<li><p><a href="#functions--default-side-effects">7.8</a> 避免默认参数的副作用。</p>
<blockquote>
<p>因为容易使人困惑，难以理解。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a = b++</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">count();  <span class="comment">// 1</span></span><br><span class="line">count();  <span class="comment">// 2</span></span><br><span class="line">count(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">count();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p><a name="functions--defaults-last"></a><a name="7.9"></a></p>
</li>
<li><p><a href="#functions--defaults-last">7.9</a> 默认参数始终置于最后。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">name, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--constructor"></a><a name="7.10"></a></p>
</li>
<li><p><a href="#functions--constructor">7.10</a> 请勿使用函数构造器创建新函数。</p>
<blockquote>
<p>因为这样创建函数对字符串求值类似于 eval() ，带来安全隐患。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="keyword">var</span> subtract = <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a - b'</span>);</span><br></pre></td></tr></table></figure>
<p><a name="functions--signature-spacing"></a><a name="7.11"></a></p>
</li>
<li><p><a href="#functions--signature-spacing">7.11</a> 请分隔函数签名。</p>
<blockquote>
<p>因为保持一致很好，而且不应该在增加或者移除函数名字时增加或移除空格</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="functions--mutate-params"></a><a name="7.12"></a></p>
</li>
<li><p><a href="#functions--mutate-params">7.12</a> 请勿修改形参。eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="external"><code>no-param-reassign</code></a></p>
<blockquote>
<p>因为操纵通过参数传递的对象可能给调用者造成意外的副作用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">'key'</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="functions--reassign-params"></a><a name="7.13"></a></p>
</li>
<li><p><a href="#functions--reassign-params">7.13</a> 请勿重新赋值形参。 eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="external"><code>no-param-reassign</code></a></p>
<blockquote>
<p>原因是重新赋值或导致预料外的行为，特别是在使用 <code>arguments</code> 对象时。也可能造成优化问题，尤其是在 V8 中。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = a || <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">a = 1</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="箭头函数">箭头函数</h2><p>  <a name="arrows--use-them"></a><a name="8.1"></a></p>
<ul>
<li><p><a href="#arrows--use-them">8.1</a> 必须使用函数表达式时（如传递匿名函数时），请使用箭头函数。 eslint: <a href="http://eslint.org/docs/rules/prefer-arrow-callback.html" target="_blank" rel="external"><code>prefer-arrow-callback</code></a>, <a href="http://eslint.org/docs/rules/arrow-spacing.html" target="_blank" rel="external"><code>arrow-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireArrowFunctions" target="_blank" rel="external"><code>requireArrowFunctions</code></a></p>
<blockquote>
<p>为什么呢？因为它创建的函数执行在当前上下文的 <code>this</code> 中，通常是所想要的，而且具有更准确的语义。</p>
<p>为什么不呢？当函数相当复杂时，可以将逻辑移入自己的函数中。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="arrows--implicit-return"></a><a name="8.2"></a></p>
</li>
<li><p><a href="#arrows--implicit-return">8.2</a> 如果函数体中包含单个表达式，请省略括号，使用隐式的 return 。否则保留括号且使用 <code>return</code> 语句。  eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="external"><code>arrow-parens</code></a>, <a href="http://eslint.org/docs/rules/arrow-body-style.html" target="_blank" rel="external"><code>arrow-body-style</code></a> jscs:  <a href="http://jscs.info/rule/disallowParenthesesAroundArrowParam" target="_blank" rel="external"><code>disallowParenthesesAroundArrowParam</code></a>, <a href="http://jscs.info/rule/requireShorthandArrowFunctions" target="_blank" rel="external"><code>requireShorthandArrowFunctions</code></a></p>
<blockquote>
<p>因为这是语法糖。语法糖使得多个函数串联的时候更易读。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((number) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((number, index) =&gt; (&#123;</span><br><span class="line">  index: number</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p><a name="arrows--paren-wrap"></a><a name="8.3"></a></p>
</li>
<li><p><a href="#arrows--paren-wrap">8.3</a> 请使用括号括住跨行的表达式以便更易读。</p>
<blockquote>
<p>原因是这样鲜明地展示了函数开始和结束的位置。 </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; <span class="string">'As time went by, the string containing the '</span> +</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;number&#125;</span> became much longer. So we needed to break it over multiple `</span> +</span><br><span class="line">  <span class="string">'lines.'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; (</span><br><span class="line">  <span class="string">`As time went by, the string containing the <span class="subst">$&#123;number&#125;</span> became much `</span> +</span><br><span class="line">  <span class="string">'longer. So we needed to break it over multiple lines.'</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure>
<p><a name="arrows--one-arg-parens"></a><a name="8.4"></a></p>
</li>
<li><p><a href="#arrows--one-arg-parens">8.4</a> 接受单个参数的函数请省略括号。反之，必须用括号括住参数。 eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="external"><code>arrow-parens</code></a> jscs:  <a href="http://jscs.info/rule/disallowParenthesesAroundArrowParam" target="_blank" rel="external"><code>disallowParenthesesAroundArrowParam</code></a></p>
<blockquote>
<p>Why? Less visual clutter.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; (</span><br><span class="line">  <span class="string">`A long string with the <span class="subst">$&#123;number&#125;</span>. It’s so long that we’ve broken it `</span> +</span><br><span class="line">  <span class="string">'over multiple lines!'</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="arrows--confusing"></a><a name="8.5"></a></p>
</li>
<li><p><a href="#arrows--confusing">8.5</a> 请避免混淆箭头函数记号 (<code>=&gt;</code>) 和 比较符号 (<code>&lt;=</code>,<code>&gt;=</code>) 。 eslint: <a href="http://eslint.org/docs/rules/no-confusing-arrow" target="_blank" rel="external"><code>no-confusing-arrow</code></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = item =&gt; item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = (item) =&gt; item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = (item) =&gt; &#123; <span class="keyword">return</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize; &#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="类_与_构造器">类 与 构造器</h2><p>  <a name="constructors--use-class"></a><a name="9.1"></a></p>
<ul>
<li><p><a href="#constructors--use-class">9.1</a> 请使用 <code>class</code> 避免直接操作 <code>prototype</code>。</p>
<blockquote>
<p>因为 <code>class</code> 语法语义更准确且容易理解。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  constructor(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="constructors--extends"></a><a name="9.2"></a></p>
</li>
<li><p><a href="#constructors--extends">9.2</a> 请使用 <code>extends</code> 继承。</p>
<blockquote>
<p>因为这是不打破 <code>instanceof</code> ，实现继承原型功能的内建方式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="constructors--chaining"></a><a name="9.3"></a></p>
</li>
<li><p><a href="#constructors--chaining">9.3</a> 方法可以返回 <code>this</code> 以便函数串联。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  jump() &#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p><a name="constructors--tostring"></a><a name="9.4"></a></p>
</li>
<li><p><a href="#constructors--tostring">9.4</a> 可以写一个自定义的 toString() 方法，只需保证有用且没有副作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Jedi - <span class="subst">$&#123;this.getName()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="constructors--no-useless"></a><a name="9.5"></a></p>
</li>
<li><p><a href="#constructors--no-useless">9.5</a> 没有声明构造函数的类拥有默认的构造函数。空的构造函数和仅仅是直接调用父类的构造函数是不必要的。eslint: <a href="http://eslint.org/docs/rules/no-useless-constructor" target="_blank" rel="external"><code>no-useless-constructor</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Rey'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="classes--no-duplicate-members"></a></p>
</li>
<li><p><a href="#classes--no-duplicate-members">9.6</a> 避免重复的类成员。 eslint: <a href="http://eslint.org/docs/rules/no-dupe-class-members" target="_blank" rel="external"><code>no-dupe-class-members</code></a></p>
<blockquote>
<p>因为重复的成员声明默认选择最后一个。拥有重复的成员基本上确定为 bug 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="模块">模块</h2><p>  <a name="modules--use-them"></a><a name="10.1"></a></p>
<ul>
<li><p><a href="#modules--use-them">10.1</a> 请使用 modules (<code>import</code>/<code>export</code>) 而不是一个非标准的模块系统。这样可以随时转译到喜欢的模块系统。</p>
<blockquote>
<p>因为 Modules 是未来。现在开始步入未来吧。 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">'./AirbnbStyleGuide'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-wildcard"></a><a name="10.2"></a></p>
</li>
<li><p><a href="#modules--no-wildcard">10.2</a> 请不要使用通配符导入。</p>
<blockquote>
<p>这样保证单个默认导出。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-export-from-import"></a><a name="10.3"></a></p>
</li>
<li><p><a href="#modules--no-export-from-import">10.3</a> 请不要直接在导入语句中导出。</p>
<blockquote>
<p>虽然一行更紧凑。但是清晰地导入和清晰地导出更具有一致性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; from <span class="string">'./airbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-duplicate-imports"></a></p>
</li>
<li><p><a href="#modules--no-duplicate-imports">10.4</a> 只在一个位置导入。eslint: <a href="http://eslint.org/docs/rules/no-duplicate-imports" target="_blank" rel="external"><code>no-duplicate-imports</code></a></p>
<blockquote>
<p>从同一个路径多行导入使得代码难以维护。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="comment">// … some other imports … //</span></span><br><span class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123;</span><br><span class="line">  named1,</span><br><span class="line">  named2,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-mutable-exports"></a></p>
</li>
<li><p><a href="#modules--no-mutable-exports">10.5</a> 请不要导出可变的绑定。eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md" target="_blank" rel="external"><code>import/no-mutable-exports</code></a></p>
<blockquote>
<p>因为可变量应当避免通用，尤其是在导出可变的绑定时。可能在某些特殊情况下用到，但是通常情况下应该只导出常量。 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure>
<p><a name="modules--prefer-default-export"></a></p>
</li>
<li><p><a href="#modules--prefer-default-export">10.6</a> 模块只有一个导出时，请使用默认导出而不是命名的导出。eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="external"><code>import/prefer-default-export</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><a name="modules--imports-first"></a></p>
</li>
<li><p><a href="#modules--imports-first">10.7</a> 请将所有的 <code>import</code> 放到非导入语句上面。eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/imports-first.md" target="_blank" rel="external"><code>import/imports-first</code></a></p>
<blockquote>
<p>既然 <code>import</code>会被提升，不如将其置顶以免出现意料之外的行为。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line">foo.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">foo.init();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="迭代器_与_生成器">迭代器 与 生成器</h2><p>  <a name="iterators--nope"></a><a name="11.1"></a></p>
<ul>
<li><p><a href="#iterators--nope">11.1</a> 请勿使用迭代器。请使用 JavaScript 的高阶函数像 <code>map()</code> 和 <code>reduce()</code> 而不是使用循环像 <code>for-of</code> 。 eslint: <a href="http://eslint.org/docs/rules/no-iterator.html" target="_blank" rel="external"><code>no-iterator</code></a></p>
<blockquote>
<p>因为这样迫使遵循不可变这个规则。处理只返回值的纯函数比副作用更容易解释。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(num =&gt; sum += num);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (use the functional force)</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce((total, num) =&gt; total + num, <span class="number">0</span>);</span><br><span class="line">sum === <span class="number">15</span>;</span><br></pre></td></tr></table></figure>
<p><a name="generators--nope"></a><a name="11.2"></a></p>
</li>
<li><p><a href="#generators--nope">11.2</a> 目前请勿使用生成器。</p>
<blockquote>
<p>因为转义到ES5效果不好。</p>
</blockquote>
<p><a name="generators--spacing"></a></p>
</li>
<li><p><a href="#generators--spacing">11.3</a> 如果非要使用生成器，或者不顾<a href="#generators--nope">我们的建议</a>，请确保函数签名合理地分隔。 eslint: <a href="http://eslint.org/docs/rules/generator-star-spacing" target="_blank" rel="external"><code>generator-star-spacing</code></a></p>
<blockquote>
<p>因为 <code>function</code> 和 <code>*</code> 属于同一个概念的关键字。<code>*</code> 不是 <code>function</code> 的修饰器， <code>function*</code> 是一个单独的构造器，与 <code>function</code> 不同。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> quux = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span></span><br><span class="line">*</span><br><span class="line"><span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wat = <span class="function"><span class="keyword">function</span></span><br><span class="line">*</span><br><span class="line">(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="属性">属性</h2><p>  <a name="properties--dot"></a><a name="12.1"></a></p>
<ul>
<li><p><a href="#properties--dot">12.1</a> 请使用点号访问属性。eslint: <a href="http://eslint.org/docs/rules/dot-notation.html" target="_blank" rel="external"><code>dot-notation</code></a> jscs: <a href="http://jscs.info/rule/requireDotNotation" target="_blank" rel="external"><code>requireDotNotation</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke[<span class="string">'jedi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure>
<p><a name="properties--bracket"></a><a name="12.2"></a></p>
</li>
<li><p><a href="#properties--bracket">12.2</a> 以变量访问属性时请使用方括号 <code>[]</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="变量">变量</h2><p>  <a name="variables--const"></a><a name="13.1"></a></p>
<ul>
<li><p><a href="#variables--const">13.1</a> 请总是使用 <code>const</code> 声明变量。否则将引入全局变量。避免污染全局命名空间。地球超人（Captain Planet）已经警告过我们了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure>
<p><a name="variables--one-const"></a><a name="13.2"></a></p>
</li>
<li><p><a href="#variables--one-const">13.2</a> 每个变量请使用一个 <code>const</code> 声明。 eslint: <a href="http://eslint.org/docs/rules/one-var.html" target="_blank" rel="external"><code>one-var</code></a> jscs: <a href="http://jscs.info/rule/disallowMultipleVarDecl" target="_blank" rel="external"><code>disallowMultipleVarDecl</code></a></p>
<blockquote>
<p>这样更容易增加新的变量声明。而且不用担心是用 <code>,</code> 还是 <code>;</code>，带来标点符号不一致。在调试器中可以步过每一个声明，而不是一次跳过全部。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// （与上面相比，请试着找出错误）</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> dragonball = <span class="string">'z'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="variables--const-let-group"></a><a name="13.3"></a></p>
</li>
<li><p><a href="#variables--const-let-group">13.3</a> <code>const</code> 分为一组，然后<code>let</code> 分为一组。</p>
<blockquote>
<p>因为这样在重新为变量赋值时很有用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">let</span> length;</span><br></pre></td></tr></table></figure>
<p><a name="variables--define-where-used"></a><a name="13.4"></a></p>
</li>
<li><p><a href="#variables--define-where-used">13.4</a> 请在使用变量的地方给变量赋值，但是须放置在合适的位置。</p>
<blockquote>
<p>因为 <code>let</code> 和 <code>const</code> 都是块级作用域而非函数级作用域。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - 不必要的函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="提升">提升</h2><p>  <a name="hoisting--about"></a><a name="14.1"></a></p>
<ul>
<li><p><a href="#hoisting--about">14.1</a> <code>var</code> 声明会被提升至作用域顶部，相应的赋值却不会。<code>const</code> 和 <code>let</code> 声明被一个叫做 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let" target="_blank" rel="external">临时性死区 (TDZ)</a> 的新概念所保护。所以知道为什么<a href="http://es-discourse.com/t/why-typeof-is-no-longer-safe/15" target="_blank" rel="external"> typeof 不再安全</a> 很重要。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没用（假设存在 notDefine 全局变量） 。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; 抛出 ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于变量提升，在引用变量后声明变量是有效的。</span></span><br><span class="line"><span class="comment">// 注意：赋值 `true` 没有被提升。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释器提升变量声明至作用域顶部。</span></span><br><span class="line"><span class="comment">// 也就是例子可以重写为：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 const 和 let </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; 抛出 ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> declaredButNotAssigned); <span class="comment">// =&gt; 抛出 ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="hoisting--anon-expressions"></a><a name="14.2"></a></p>
</li>
<li><p><a href="#hoisting--anon-expressions">14.2</a> 匿名函数的变量名会被提升，而不是函数赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="hoisting--named-expresions"></a><a name="14.3"></a></p>
</li>
<li><p><a href="#hoisting--named-expresions">14.3</a> 有名字的函数表达式的变量名会被提升，而不是函数名字或者函数体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数名与变量名一致时也会这样。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="hoisting--declarations"></a><a name="14.4"></a></p>
</li>
<li><p><a href="#hoisting--declarations">14.4</a> 函数声明中的函数名和函数体都会被提升。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>详情请参考 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/" target="_blank" rel="external">JavaScript 作用域与提升</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="external">Ben Cherry</a> 。</p>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="比较符_与_相等性">比较符 与 相等性</h2><p>  <a name="comparison--eqeqeq"></a><a name="15.1"></a></p>
<ul>
<li><p><a href="#comparison--eqeqeq">15.1</a> 请使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code> 。 eslint: <a href="http://eslint.org/docs/rules/eqeqeq.html" target="_blank" rel="external"><code>eqeqeq</code></a></p>
<p><a name="comparison--if"></a><a name="15.2"></a></p>
</li>
<li><p><a href="#comparison--if">15.2</a> 条件语句比如 <code>if</code> 语句对其表达式强制使用 <code>ToBoolean</code> 求值，且遵循以下几个简单的规则：</p>
<ul>
<li><strong>Objects</strong> 求值为 <strong>true</strong></li>
<li><strong>Undefined</strong> 求值为 <strong>false</strong></li>
<li><strong>Null</strong> 求值为 <strong>false</strong></li>
<li><strong>Booleans</strong> 求值为 <strong>相应的布尔值</strong></li>
<li><strong>Numbers</strong> 求值为 <strong>false</strong> 如果是 <strong>+0, -0, 或者 NaN</strong> ，否则为 <strong>true</strong></li>
<li><strong>String</strong> 求值为 <strong>false</strong> 如果是空字符串 <code>&#39;&#39;</code> ，否则为 <strong>true</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>] &amp;&amp; []) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// 数组（甚至是空数组）是对象，对象求值为 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--shortcuts"></a><a name="15.3"></a></p>
</li>
<li><p><a href="#comparison--shortcuts">15.3</a> 请使用快捷的方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--moreinfo"></a><a name="15.4"></a></p>
</li>
<li><p><a href="#comparison--moreinfo">15.4</a> 详情见 Angus Croll 的 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">相等的真相与 JavaScript</a> 。</p>
<p><a name="comparison--switch-blocks"></a><a name="15.5"></a></p>
</li>
<li><p><a href="#comparison--switch-blocks">15.5</a> 请使用括号在包含词法声明（如 <code>let</code> ，<code>const</code> ，<code>function</code> 和 <code>class</code>）的 <code>case</code> 和 <code>default</code> 中创建区块。</p>
<blockquote>
<p>因为词法声明在整个 <code>switch</code> 块中是可见的，但是只会在被赋值的时候初始化，这只会发生在相应的 <code>case</code> 到达时。引起多个 <code>case</code> 定义相同的东西的问题。</p>
</blockquote>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-case-declarations.html" target="_blank" rel="external"><code>no-case-declarations</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    bar();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--nested-ternaries"></a><a name="15.6"></a></p>
</li>
<li><p><a href="#comparison--nested-ternaries">15.6</a> 请勿嵌套三元表达式。一般情况下是单行表达式。</p>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-nested-ternary.html" target="_blank" rel="external"><code>no-nested-ternary</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">"bar"</span></span><br><span class="line">  : value1 &gt; value2 ? <span class="string">"baz"</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">'bar'</span></span><br><span class="line">  : maybeNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2 ? <span class="string">'bar'</span> : maybeNull;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--unneeded-ternary"></a><a name="15.7"></a></p>
</li>
<li><p><a href="#comparison--unneeded-ternary">15.7</a> 请避免不需要的三元表达式。</p>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-unneeded-ternary.html" target="_blank" rel="external"><code>no-unneeded-ternary</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a ? a : b;</span><br><span class="line"><span class="keyword">const</span> bar = c ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> baz = c ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = a || b;</span><br><span class="line"><span class="keyword">const</span> bar = !!c;</span><br><span class="line"><span class="keyword">const</span> baz = !c;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="块">块</h2><p>  <a name="blocks--braces"></a><a name="16.1"></a></p>
<ul>
<li><p><a href="#blocks--braces">16.1</a> 多行区块请使用括号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="blocks--cuddled-elses"></a><a name="16.2"></a></p>
</li>
<li><p><a href="#blocks--cuddled-elses">16.2</a> 请将 <code>else</code> 放到离 <code>if</code> 最近的括号那一行。 eslint: <a href="http://eslint.org/docs/rules/brace-style.html" target="_blank" rel="external"><code>brace-style</code></a> jscs:  <a href="http://jscs.info/rule/disallowNewlineBeforeBlockStatements" target="_blank" rel="external"><code>disallowNewlineBeforeBlockStatements</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="注释">注释</h2><p>  <a name="comments--multiline"></a><a name="17.1"></a></p>
<ul>
<li><p><a href="#comments--multiline">17.1</a> 多行注释请使用 <code>/** ... */</code>。包括说明，所有参数的类型和值，以及返回值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * make() returns a new element</span><br><span class="line"> * based on the passed in tag name</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;String&#125; tag</span><br><span class="line"> * @return &#123;Element&#125; element</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comments--singleline"></a><a name="17.2"></a></p>
</li>
<li><p><a href="#comments--singleline">17.2</a> 单行注释请使用 <code>//</code>。请将单行注释至于前一行。在注释前空一行除非是第一行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comments--actionitems"></a><a name="17.3"></a></p>
</li>
<li><p><a href="#comments--actionitems">17.3</a> 请在注释中使用 <code>FIXME</code> 或者 <code>TODO</code> 前缀以便其他开发者快速理解其中需要被解决的问题，或者问题解决的建议。与其他常规注释不同，这些注释可以被采取行动例如 <code>FIXME: -- 需要指出这里</code> 或者 <code>TODO: -- 待实现</code> 。</p>
<p><a name="comments--fixme"></a><a name="17.4"></a></p>
</li>
<li><p><a href="#comments--fixme">17.4</a> 请使用 <code>// FIXME:</code> 声明问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">FIXME</span></span>: 此处不应使用全局变量</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comments--todo"></a><a name="17.5"></a></p>
</li>
<li><p><a href="#comments--todo">17.5</a> 请使用 <code>// TODO:</code> 声明问题的解决方案。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>: total 应该可由参数配置</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="空白符">空白符</h2><p>  <a name="whitespace--spaces"></a><a name="18.1"></a></p>
<ul>
<li><p><a href="#whitespace--spaces">18.1</a> 请使用设为两个空格的 soft tabs 。 eslint: <a href="http://eslint.org/docs/rules/indent.html" target="_blank" rel="external"><code>indent</code></a> jscs: <a href="http://jscs.info/rule/validateIndentation" target="_blank" rel="external"><code>validateIndentation</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--before-blocks"></a><a name="18.2"></a></p>
</li>
<li><p><a href="#whitespace--before-blocks">18.2</a> 请在第一个大括号前空一格。 eslint: <a href="http://eslint.org/docs/rules/space-before-blocks.html" target="_blank" rel="external"><code>space-before-blocks</code></a> jscs: <a href="http://jscs.info/rule/requireSpaceBeforeBlockStatements" target="_blank" rel="external"><code>requireSpaceBeforeBlockStatements</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--around-keywords"></a><a name="18.3"></a></p>
</li>
<li><p><a href="#whitespace--around-keywords">18.3</a> 请在控制语句（<code>if</code> ，<code>while</code> 等）的开始空格前空一格。请勿在函数名字和参数列表间留空。 eslint: <a href="http://eslint.org/docs/rules/keyword-spacing.html" target="_blank" rel="external"><code>keyword-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireSpaceAfterKeywords" target="_blank" rel="external"><code>requireSpaceAfterKeywords</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--infix-ops"></a><a name="18.4"></a></p>
</li>
<li><p><a href="#whitespace--infix-ops">18.4</a> 请使用空格分离操作符。 eslint: <a href="http://eslint.org/docs/rules/space-infix-ops.html" target="_blank" rel="external"><code>space-infix-ops</code></a> jscs: <a href="http://jscs.info/rule/requireSpaceBeforeBinaryOperators" target="_blank" rel="external"><code>requireSpaceBeforeBinaryOperators</code></a>, <a href="http://jscs.info/rule/requireSpaceAfterBinaryOperators" target="_blank" rel="external"><code>requireSpaceAfterBinaryOperators</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--newline-at-end"></a><a name="18.5"></a></p>
</li>
<li><p><a href="#whitespace--newline-at-end">18.5</a> 请在文件尾部以换行符结尾。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--chains"></a><a name="18.6"></a></p>
</li>
<li><p><a href="#whitespace--chains">18.6</a> 请在长的方法链（多于两个方法）时使用缩进。请以点开头，这样强调该行为方法调用而不是新的语句。eslint: <a href="http://eslint.org/docs/rules/newline-per-chained-call" target="_blank" rel="external"><code>newline-per-chained-call</code></a> <a href="http://eslint.org/docs/rules/no-whitespace-before-property" target="_blank" rel="external"><code>no-whitespace-before-property</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data);</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--after-blocks"></a><a name="18.7"></a></p>
</li>
<li><p><a href="#whitespace--after-blocks">18.7</a> 请在区块和下一个语句间空一行。 jscs: <a href="http://jscs.info/rule/requirePaddingNewLinesAfterBlocks" target="_blank" rel="external"><code>requirePaddingNewLinesAfterBlocks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--padded-blocks"></a><a name="18.8"></a></p>
</li>
<li><p><a href="#whitespace--padded-blocks">18.8</a> 请勿在块中填充空行。eslint: <a href="http://eslint.org/docs/rules/padded-blocks.html" target="_blank" rel="external"><code>padded-blocks</code></a> jscs:  <a href="http://jscs.info/rule/disallowPaddingNewlinesInBlocks" target="_blank" rel="external"><code>disallowPaddingNewlinesInBlocks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also bad</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--in-parens"></a><a name="18.9"></a></p>
</li>
<li><p><a href="#whitespace--in-parens">18.9</a> 请勿在括号内加空格。eslint: <a href="http://eslint.org/docs/rules/space-in-parens.html" target="_blank" rel="external"><code>space-in-parens</code></a> jscs: <a href="http://jscs.info/rule/disallowSpacesInsideParentheses" target="_blank" rel="external"><code>disallowSpacesInsideParentheses</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"> foo </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> ( foo ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--in-brackets"></a><a name="18.10"></a></p>
</li>
<li><p><a href="#whitespace--in-brackets">18.10</a> 请勿在放括号中加空格。 eslint: <a href="http://eslint.org/docs/rules/array-bracket-spacing.html" target="_blank" rel="external"><code>array-bracket-spacing</code></a> jscs: <a href="http://jscs.info/rule/disallowSpacesInsideArrayBrackets" target="_blank" rel="external"><code>disallowSpacesInsideArrayBrackets</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(foo[ <span class="number">0</span> ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--in-braces"></a><a name="18.11"></a></p>
</li>
<li><p><a href="#whitespace--in-braces">18.11</a> 请在花括号中加空格。eslint: <a href="http://eslint.org/docs/rules/object-curly-spacing.html" target="_blank" rel="external"><code>object-curly-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireSpacesInsideObjectBrackets" target="_blank" rel="external"><code>requireSpacesInsideObjectBrackets</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123;clark: <span class="string">'kent'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123; clark: <span class="string">'kent'</span> &#125;;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--max-len"></a><a name="18.12"></a></p>
</li>
<li><p><a href="#whitespace--max-len">18.12</a> 请避免单行超过100个字符（含空白符）。 eslint: <a href="http://eslint.org/docs/rules/max-len.html" target="_blank" rel="external"><code>max-len</code></a> jscs: <a href="http://jscs.info/rule/maximumLineLength" target="_blank" rel="external"><code>maximumLineLength</code></a></p>
<blockquote>
<p>这样确保了可读性与可维护性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'Whatever national crop flips the window. The cartoon reverts within the screw. Whatever wizard constrains a helpful ally. The counterpart ascends!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$.ajax(&#123; method: <span class="string">'POST'</span>, url: <span class="string">'https://airbnb.com/'</span>, data: &#123; name: <span class="string">'John'</span> &#125; &#125;).done(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>)).fail(() =&gt; <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'Whatever national crop flips the window. The cartoon reverts within the screw. '</span> +</span><br><span class="line">  <span class="string">'Whatever wizard constrains a helpful ally. The counterpart ascends!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'https://airbnb.com/'</span>,</span><br><span class="line">  data: &#123; name: <span class="string">'John'</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .done(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>))</span><br><span class="line">  .fail(() =&gt; <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="逗号">逗号</h2><p><a name="commas--leading-trailing"></a><a name="19.1"></a></p>
<ul>
<li><p><a href="#commas--leading-trailing">19.1</a> 逗号开头: <strong>别啦</strong> eslint: <a href="http://eslint.org/docs/rules/comma-style.html" target="_blank" rel="external"><code>comma-style</code></a> jscs: <a href="http://jscs.info/rule/requireCommaBeforeLineBreak" target="_blank" rel="external"><code>requireCommaBeforeLineBreak</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">  once,</span><br><span class="line">  upon,</span><br><span class="line">  aTime,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Ada'</span></span><br><span class="line">  , lastName: <span class="string">'Lovelace'</span></span><br><span class="line">  , birthYear: <span class="number">1815</span></span><br><span class="line">  , superPower: <span class="string">'computers'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Ada'</span>,</span><br><span class="line">  lastName: <span class="string">'Lovelace'</span>,</span><br><span class="line">  birthYear: <span class="number">1815</span>,</span><br><span class="line">  superPower: <span class="string">'computers'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="commas--dangling"></a><a name="19.2"></a></p>
</li>
<li><p><a href="#commas--dangling">19.2</a> 附加的尾部逗号： <strong>好滴</strong> eslint: <a href="http://eslint.org/docs/rules/comma-dangle.html" target="_blank" rel="external"><code>comma-dangle</code></a> jscs: <a href="http://jscs.info/rule/requireTrailingComma" target="_blank" rel="external"><code>requireTrailingComma</code></a></p>
<blockquote>
<p>因为这样 git diffs 会更清晰。而且转译器比如 Babel 会移除尾部附加的逗号。这样不用担心在传统浏览器中的 <a href="es5/README.md#commas">尾部逗号问题</a>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - git diff without trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">-    lastName: <span class="string">'Nightingale'</span></span><br><span class="line">+    lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb graph'</span>, <span class="string">'modern nursing'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good - git diff with trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">     lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="分号">分号</h2><p>  <a name="semicolons--required"></a><a name="20.1"></a></p>
<ul>
<li><p><a href="#20.1">20.1</a> <strong>好滴</strong> eslint: <a href="http://eslint.org/docs/rules/semi.html" target="_blank" rel="external"><code>semi</code></a> jscs: <a href="http://jscs.info/rule/requireSemicolons" target="_blank" rel="external"><code>requireSemicolons</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, but legacy (guards against the function becoming an argument when two files with IIFEs are concatenated)</span></span><br><span class="line">;(() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214" target="_blank" rel="external">Read more</a>.</p>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="类型转换_与_强制转换">类型转换 与 强制转换</h2><p>  <a name="coercion--explicit"></a><a name="21.1"></a></p>
<ul>
<li><p><a href="#coercion--explicit">21.1</a> 语句还是前执行强制转换。</p>
<p><a name="coercion--strings"></a><a name="21.2"></a></p>
</li>
<li><p><a href="#coercion--strings">21.2</a>  Strings:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>; <span class="comment">// invokes this.reviewScore.valueOf()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore.toString(); <span class="comment">// 不保证返回 string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore);</span><br></pre></td></tr></table></figure>
<p><a name="coercion--numbers"></a><a name="21.3"></a></p>
</li>
<li><p><a href="#coercion--numbers">21.3</a> Numbers: 请在类型转换时使用 <code>Number</code> ，在使用 <code>parseInt</code> 解析字符串时带上进制。 eslint: <a href="http://eslint.org/docs/rules/radix" target="_blank" rel="external"><code>radix</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputValue = <span class="string">'4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p><a name="coercion--comment-deviations"></a><a name="21.4"></a></p>
</li>
<li><p><a href="#coercion--comment-deviations">21.4</a> 如果因为某种原因做了些很野性的事情，而且 <code>parseInt</code> 成为瓶颈，因为<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="external">性能原因</a>使用位移操作，请留注释解释原因和内容。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * parseInt 是代码变慢的罪魁祸首。</span><br><span class="line"> * 位移字符串强制将它转成 Number 会快很多。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p><a name="coercion--bitwise"></a><a name="21.5"></a></p>
</li>
<li><p><a href="#coercion--bitwise">21.5</a> <strong>注意：</strong> 请在使用位移操作小心。Number 是 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="external">64位值</a>，而位移操作总是返回32位整数 (<a href="http://es5.github.io/#x11.7" target="_blank" rel="external">source</a>)。位移可能导致整数值大于32位。 <a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="external">相关讨论</a>。最大的有符号32位值为2,147,483,647：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure>
<p><a name="coercion--booleans"></a><a name="21.6"></a></p>
</li>
<li><p><a href="#coercion--booleans">21.6</a> Booleans:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="命名约定">命名约定</h2><p>  <a name="naming--descriptive"></a><a name="22.1"></a></p>
<ul>
<li><p><a href="#naming--descriptive">22.1</a> 请避免使用单个字母名字。名字应具有自述性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="naming--camelCase"></a><a name="22.2"></a></p>
</li>
<li><p><a href="#naming--camelCase">22.2</a> 请在命名对象，函数和实例时使用小驼峰式（camelCase）。eslint: <a href="http://eslint.org/docs/rules/camelcase.html" target="_blank" rel="external"><code>camelcase</code></a> jscs: <a href="http://jscs.info/rule/requireCamelCaseOrUpperCaseIdentifiers" target="_blank" rel="external"><code>requireCamelCaseOrUpperCaseIdentifiers</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><a name="naming--PascalCase"></a><a name="22.3"></a></p>
</li>
<li><p><a href="#naming--PascalCase">22.3</a> 请仅在命名构造函数和类时使用大驼峰式。eslint: <a href="http://eslint.org/docs/rules/new-cap.html" target="_blank" rel="external"><code>new-cap</code></a> jscs: <a href="http://jscs.info/rule/requireCapitalizedConstructors" target="_blank" rel="external"><code>requireCapitalizedConstructors</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="naming--leading-underscore"></a><a name="22.4"></a></p>
</li>
<li><p><a href="#naming--leading-underscore">22.4</a> 请勿使用拖尾或者领头的下划线。eslint: <a href="http://eslint.org/docs/rules/no-underscore-dangle.html" target="_blank" rel="external"><code>no-underscore-dangle</code></a> jscs: <a href="http://jscs.info/rule/disallowDanglingUnderscores" target="_blank" rel="external"><code>disallowDanglingUnderscores</code></a></p>
<blockquote>
<p>因为 JavaScript 对于属性和方法而言没有私有性。虽然领头的下划线是一种约定俗成表达 private 的方式。实际上，这些属性全是 public 而且术语公共的 API 约定。这种约定可能会导致开发者错误地以为改变不算做打破或者不需要测试。太长不看：需要 <code>private</code> 的东西时，不能显示地表现（给其他人）。 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="naming--self-this"></a><a name="22.5"></a></p>
</li>
<li><p><a href="#naming--self-this">22.5</a> 请勿保存 <code>this</code> 的引用。请使用箭头函数或者 bind 函数。 jscs: <a href="http://jscs.info/rule/disallowNodeTypes" target="_blank" rel="external"><code>disallowNodeTypes</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="naming--filename-matches-export"></a><a name="22.6"></a></p>
</li>
<li><p><a href="#naming--filename-matches-export">22.6</a> 文件名应当与默认导出的名字完全一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件 1 内容</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件 2 内容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fortyTwo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件 3 内容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">insideDirectory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在同一个其他文件</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./checkBox'</span>; <span class="comment">// 大驼峰 import/export ，小驼峰文件名 </span></span><br><span class="line"><span class="keyword">import</span> FortyTwo <span class="keyword">from</span> <span class="string">'./FortyTwo'</span>; <span class="comment">// 大驼峰 import/filename ，小驼峰 export</span></span><br><span class="line"><span class="keyword">import</span> InsideDirectory <span class="keyword">from</span> <span class="string">'./InsideDirectory'</span>; <span class="comment">// 大驼峰 import/filename ，小驼峰 export</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./check_box'</span>; <span class="comment">// 大驼峰 import/export ，蛇_型文件名。</span></span><br><span class="line"><span class="keyword">import</span> forty_two <span class="keyword">from</span> <span class="string">'./forty_two'</span>; <span class="comment">// 蛇_型 import/export ，小驼峰 export </span></span><br><span class="line"><span class="keyword">import</span> inside_directory <span class="keyword">from</span> <span class="string">'./inside_directory'</span>; <span class="comment">// 蛇_型 import ，小驼峰 export </span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./inside_directory/index'</span>; <span class="comment">// 显示地导入 index 文件</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory/index'</span>; <span class="comment">// 显示地导入 index 文件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./CheckBox'</span>; <span class="comment">// 大驼峰 export/import/文件名 </span></span><br><span class="line"><span class="keyword">import</span> fortyTwo <span class="keyword">from</span> <span class="string">'./fortyTwo'</span>; <span class="comment">// 小驼峰 export/import/文件名 </span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory'</span>; <span class="comment">// 小驼峰 export/import/目录名/ ,隐式的"index"</span></span><br><span class="line"><span class="comment">// ^ 同时支持 insideDirectory.js 和 insideDirectory/index.js</span></span><br></pre></td></tr></table></figure>
<p><a name="naming--camelCase-default-export"></a><a name="22.7"></a></p>
</li>
<li><p><a href="#naming--camelCase-default-export">22.7</a> 请在导出默认函数时使用小驼峰。文件名应当与函数名一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure>
<p><a name="naming--PascalCase-singleton"></a><a name="22.8"></a></p>
</li>
<li><p><a href="#naming--PascalCase-singleton">22.8</a> 请在导出 构造器 / 类 / 单例 / 函数库 / 裸露的对象 时使用大驼峰。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="访问器">访问器</h2><p>  <a name="accessors--not-required"></a><a name="23.1"></a></p>
<ul>
<li><p><a href="#accessors--not-required">23.1</a> 属性的访问函数是不必要的。</p>
<p><a name="accessors--no-getters-setters"></a><a name="23.2"></a></p>
</li>
<li><p><a href="#accessors--no-getters-setters">23.2</a> 请勿使用 JavaScript 的 getters/setters 。因为会造成副作用，难以调试，维护和理清。相应地，如果有访问函数，请使用 getVal() 和 setVal(‘hello’) 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  get age() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set age(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="accessors--boolean-prefix"></a><a name="23.3"></a></p>
</li>
<li><p><a href="#accessors--boolean-prefix">23.3</a> 如果属性或方法是 <code>boolean</code> 请使用 <code>isVal()</code> 或者 <code>hasVal()</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="accessors--consistent"></a><a name="23.4"></a></p>
</li>
<li><p><a href="#accessors--consistent">23.4</a> 可以创建 get() 和 set() 函数，但请保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(key, val) &#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="事件">事件</h2><p>  <a name="events--hash"></a><a name="24.1"></a></p>
<ul>
<li><p><a href="#events--hash">24.1</a> 当给事件传递数据时（无论是 DOM 事件还是 Backbone 事件），传递一个带索引的对象而不是原始值。这样随后的贡献者可以在不更新每个处理函数的情况下添加更多数据。例如，相比于： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, listingId) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>不如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; listingId: listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, data) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
</li>
</ul>
<h2 id="jQuery">jQuery</h2><p>  <a name="jquery--dollar-prefix"></a><a name="25.1"></a></p>
<ul>
<li><p><a href="#jquery--dollar-prefix">25.1</a> 请给 jQuery对象加上 <code>$</code> 前缀。 jscs: <a href="http://jscs.info/rule/requireDollarBeforejQueryAssignment" target="_blank" rel="external"><code>requireDollarBeforejQueryAssignment</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebarBtn = $(<span class="string">'.sidebar-btn'</span>);</span><br></pre></td></tr></table></figure>
<p><a name="jquery--cache"></a><a name="25.2"></a></p>
</li>
<li><p><a href="#jquery--cache">25.2</a> 缓存 jQuery 查询。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="jquery--queries"></a><a name="25.3"></a></p>
</li>
<li><p><a href="#jquery--queries">25.3</a> DOM查询请使用自上而下 <code>$(&#39;.sidebar ul&#39;)</code> 或者 父 &gt; 子 <code>$(&#39;.sidebar &gt; ul&#39;)</code>。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="external">jsPerf</a></p>
<p><a name="jquery--find"></a><a name="25.4"></a></p>
</li>
<li><p><a href="#jquery--find">25.4</a> 请在 jQuery 对象中查询时使用 <code>find</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="ECMAScript_5_兼容性">ECMAScript 5 兼容性</h2><p>  <a name="es5-compat--kangax"></a><a name="26.1"></a></p>
<ul>
<li><a href="#es5-compat--kangax">26.1</a> 参见 <a href="https://twitter.com/kangax/" target="_blank" rel="external">Kangax</a> 的 ES5 <a href="http://kangax.github.io/es5-compat-table/" target="_blank" rel="external">compatibility table</a>.</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="ECMAScript_6_风格">ECMAScript 6 风格</h2><p>  <a name="es6-styles"></a><a name="27.1"></a></p>
<ul>
<li><a href="#es6-styles">27.1</a> 以下是 ES6 特性的链接集合。</li>
</ul>
<ol>
<li><a href="#箭头函数">箭头函数</a></li>
<li><a href="#类_与_构造器">类</a></li>
<li><a href="#es6-object-shorthand">对象快捷</a></li>
<li><a href="#es6-object-concise">对象简洁</a></li>
<li><a href="#es6-computed-properties">对象可计算属性</a></li>
<li><a href="#es6-template-literals">模板字符串</a></li>
<li><a href="#解构">解构</a></li>
<li><a href="#es6-default-parameters">默认参数</a></li>
<li><a href="#es6-rest">Rest</a></li>
<li><a href="#es6-array-spreads">数组扩散符</a></li>
<li><a href="#引用">Let 和 Const</a></li>
<li><a href="#迭代器_与_生成器">迭代器和生成器</a></li>
<li><a href="#模块">模块</a></li>
</ol>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="测试">测试</h2><p>  <a name="testing--yup"></a><a name="28.1"></a></p>
<ul>
<li><p><a href="#testing--yup">28.1</a> <strong>好呀好呀</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="testing--for-real"></a><a name="28.2"></a></p>
</li>
<li><a href="#testing--for-real">28.2</a> <strong>不了，但是正经地</strong>:<ul>
<li>无论使用哪种测试框架都需要写测试用例。</li>
<li>尽量编写许多小而纯的函数，并且最小化变动发生的地方。</li>
<li>小心 stubs 和 mocks 。可能使得测试变得脆弱。</li>
<li>Airbnb 主要使用 <a href="https://www.npmjs.com/package/mocha" target="_blank" rel="external"><code>mocha</code></a> 。<a href="https://www.npmjs.com/package/tape" target="_blank" rel="external"><code>tape</code></a> 偶尔也会用来测试小的，独立的模块。</li>
<li>100% 测试覆盖是一个很好的努力目标，尽管并不是每次都能做到。</li>
<li>无论何时修复一个 bug ，_请编写回归测试_，被修复又没有回归测试的 bug 基本上肯定会在将来出现。</li>
</ul>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="性能">性能</h2><ul>
<li><a href="http://www.kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="external">论布局和 web 性能</a></li>
<li><a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">String vs Array 拼接</a></li>
<li><a href="http://jsperf.com/try-catch-in-loop-cost" target="_blank" rel="external">Try/Catch 在循环中的代价</a></li>
<li><a href="http://jsperf.com/bang-function" target="_blank" rel="external">爆炸函数</a></li>
<li><a href="http://jsperf.com/jquery-find-vs-context-sel/13" target="_blank" rel="external">jQuery Find vs Context, Selector</a></li>
<li><a href="http://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="external">innerHTML vs textContent for script text</a></li>
<li><a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">长字符串拼接</a></li>
<li><a href="https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta" target="_blank" rel="external">JavaScript 的函数如 <code>map()</code> ，<code>reduce()</code> 和 <code>filter()</code> 比遍历数组更优化吗？</a></li>
<li>更多…</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Airbnb JavaScript 的编码风格 原文地址: <a href="https://github.com/airbnb/javascript">Airbnb/JavaScript</a></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://en.ors-sro.com/tags/JavaScript/"/>
    
      <category term="翻译" scheme="http://en.ors-sro.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[烦人的 null]]></title>
    <link href="http://en.ors-sro.com/Anonying-null/"/>
    <id>http://en.ors-sro.com/Anonying-null/</id>
    <published>2016-06-10T06:31:38.000Z</published>
    <updated>2016-07-29T08:26:41.556Z</updated>
    <content type="html"><![CDATA[<p>经常写程序的童鞋一定会遇到 <code>null Exception</code> ，但是大部分情况下出现 <code>null Exception</code> 就意味着错误地使用了 <code>null</code></p>
<a id="more"></a>
<h2 id="null_是什么">null 是什么</h2><p>null 被设计为用于表达应用类型的缺失。可是不得不说这个设计是失败的。因为 null 用起来方便了所以很多地方都用 null 而不是<strong>异常 (Exception) </strong>。</p>
<p>通常程序出错都是与 null 相关的 <code>null Exception</code> 。这是自然的，如果数据正常，也就是输入是正确的，自然就不会有问题。总不可能要求数据时时刻刻都是正确的吧？</p>
<p>再谈到这个问题时，先看一下另一种类型—— <strong>值类型</strong> 是怎么解决这个问题的。</p>
<p>值类型从来都不会出错。因为，很简单，值类型没有 null 的情况。 值类型拥有默认值。比如 <code>int</code> 的默认值是 0 ，所以程序上只会出逻辑问题，而不是运行时错误(异常)。值类型出错最常见的场景是，这个值怎么会是0啊？哦，原来是这个 <code>int</code> 类型没有初始化。值类型没有 null 所以不会去做空检查(null Check)。比如值类型 <code>bool</code> 只有 <code>true</code> 和 <code>false</code>，所以使用 <code>bool</code> 类型的时候通常是这样的。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isFinish = IsDownloadFinish();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFinish)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Ding. X-art Download Finish</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Nope. Plz Go to bed.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而不是</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isFinish = IsDownloadFinish();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFinish != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(isFinish)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Ding. X-art Download Finish</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Nope. Plz Go to bed.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Output X is null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种画蛇添足的做法。反之如果<strong>引用类型</strong>不做空检查就直接使用值，出问题程序很可能直接崩溃。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; studentNos = GetStudentNos();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> nos <span class="keyword">in</span> studentNos) <span class="comment">//No null check and Crash when null.</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Output Nos..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="null_is_nothing_but_everything">null is nothing but everything</h2><p>null 就像是病毒，能够躲过类型检查。一旦某个地方使用了 null 它就像病毒一样扩散开来。最后整个程序不得不充满空检查。</p>
<p>null 是二义的。它即可表示变量没有初始化，也可以表示值不存在。</p>
<p>null 什么都不是，它既不是 <code>List&lt;T&gt;</code> 类型，也不是 <code>String</code> 类型。甚至没有一个类型是 null。</p>
<p>null 又什么都是，它可以充当 <code>List&lt;T&gt;</code> ，也可以充当 <code>String</code> 类型。比如从字符串数组中查找以特定的字符串结尾时。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">FindStudent</span>(<span class="params">String[] Students,<span class="keyword">char</span> c</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">foreach</span>(<span class="keyword">var</span> student <span class="keyword">in</span> Students)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.EndWith(c))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> student;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数定义的最后返回的 null 是最常见的一种误用 null 的情况。而这个函数可以编译通过，代表着编译器认可 null 是 <code>String</code> 类型。</p>
<p>事实上并不是只有 <code>String</code> 类型会是这样，几乎所有的引用类型编译器都允许返回 null。 所以在使用数据的时候必须做空检查，因为不知道这个数据是否为空。这看起来是很正常的事情，毕竟输入有时候就是错的。但是问题的关键不在于不允许错误的输入，而在于使用了错误的方式来表达数据的异常。</p>
<h2 id="没有_null_的日子">没有 null 的日子</h2><p>null 看起来是现代编程语言的标配。其实不然，有不少语言是没有 null 的。比如以纯函数式编程而著称 <code>Haskell</code> 是没有 null 的。那么 <code>Haskell</code> 是怎么应对数据异常，或者说怎么表达数据不存在这种情况的呢？</p>
<p><strong>联合类型</strong> (Union Type)</p>
<p>这个联合类型指的不是C语言里面的Union类型。而是由多种类型组成的类型。在传统的编程语言类型是互斥的。例如一个变量要么是 <code>String</code> 类型要么是 <code>int</code> 类型。绝对不会出现即使 <code>String</code> 类型又是 <code>int</code> 类型的情况。</p>
<p>在 <code>Haskell</code> 中引入一种联合类型 <code>Maybe</code> 用于表达变量可能有值，也可能没有值。</p>
<p>因为缺少对值缺失的表达方式，在使用 <code>int</code> 类型的时候通常使用 -1 来表示数据异常也就是值缺失的情况。在值不会取到 -1 情况下这是没问题的。万一值可以取到 -1 呢？无计可施。</p>
<p>在 <code>Haskell</code> 中 <code>Maybe</code> 的 <code>Just</code> 类型用于表示有某种值类型， <code>None</code> 用于表示没有值类型。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Maybe</span> a = get a</span><br><span class="line"><span class="title">case</span> a <span class="keyword">of</span></span><br><span class="line">  <span class="type">Just</span> value -&gt; dosomething a</span><br><span class="line">  <span class="type">Nothing</span>    -&gt; show error</span><br></pre></td></tr></table></figure>
<p>看起来和使用 null 表示值缺失的情况并没有什么区别。实际上天差地别。 <code>Maybe</code> 中的 <code>None</code> 是有类型的，类型就是 <code>None</code>。而 null 却不是。null 是无类型的，它的类型不是 null。最重要的是，使用 <code>Maybe</code> 类型编译器会强制你去检查两种类型，迫使你去应对各种情况。换言之，使用 <code>Maybe</code> 检查和取值是原子操作，不可能取值而不检查。而 null 不是。编译器允许返回 null ，而且允许在使用的时候不检查即可取值。没错说了这么多，这就是 null 的万恶之源。理论上只要每次使用引用类型时做空检查就不会出现程序崩溃的问题。但是懒惰是人的天性，明明可以直接使用为什么还要做复杂的空检查。比如</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class Student</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> Name,</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> No,</span><br><span class="line">	pubilc <span class="keyword">string</span>[] Lessons, 	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student s</span><br><span class="line"></span><br><span class="line"><span class="comment">//...Init...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s != <span class="keyword">null</span> &amp;&amp; s.Lessons != <span class="keyword">null</span> &amp;&amp; s.Lessons[<span class="number">0</span>] != <span class="keyword">null</span>) <span class="comment">//WTF??</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Output First Lesson is s.Lessons[0]	</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么直接使用值不做空检查。等到有问题直接报异常就可以了。为什么不这么做呢。首先可能有 null 出现的地方直接使用，出现异常，而忽略是一种很被动的编程方式。相当于知道了问题的存在但是我不管，问题就是这样，爱咋咋地。其次在移动平台上异常如果没有被捕获(Catch)，整个应用很可能就直接崩溃了。就会上演经典的找Bug场景：找了半天的Bug，原来是这个地方为 null。如果一开始检查 null 然后做出应对，比如强制退出，或者界面提示错误码，又或者继续运行。都不会增加无意义的调试时间，用户的体验也更好。</p>
<h2 id="解决方案">解决方案</h2><p>解决方案很简单：避免 null 或 合理地使用 null</p>
<h3 id="避免_null">避免 null</h3><p>无论是 <code>Haskell</code> 的 <code>Maybe</code> 还是 <code>Java8</code> 的 <code>Optional</code> 在其他语言都有相应的实现。选择喜欢的即可。但是请一定要检查和取值一起操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line">Optional&lt;String&gt; upperName = name.map((value) -&gt; value.toUpperCase());</span><br><span class="line">System.out.println(upperName.orElse(<span class="string">"No value found"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad</span></span><br><span class="line">Optional&lt;String&gt; upperName = name.map((value) -&gt; value.toUpperCase());</span><br><span class="line"><span class="keyword">if</span>((name.isPresent())&#123;</span><br><span class="line">	System.out.println(upperName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"No value found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Code from http://www.importnew.com/6675.html</span></span><br></pre></td></tr></table></figure>
<p>后者的做法跟直接空检查后再使用没有什么区别。</p>
<h3 id="合理地使用_null">合理地使用 null</h3><p>合理地使用 null 从合理地返回 null 开始</p>
<p>null 表达的是一种值缺失的情况而且值缺失是很正常的情况。 比如从列表中查找某些元素，找不到是很正常的情况，所以这可以返回 null。又比如获得人物的性别，如果文件读写出错了，应该抛出异常，而不是返回 null。因为出错了就不是一种正常的情况。 null 只应该承担正常的值缺失的情况，出错了就应该用异常去承担。</p>
<p>合理地使用 null 还需合理地初始化引用类型。</p>
<p>有些编程语言中引用类型的默认值是 null ，其实在业务逻辑中可以做的更好。比如 <code>String</code> 类型可以初始化为空字符串 <code>&quot;&quot;</code> ，<code>List&lt;T&gt;</code>类型可以初始化为空列表 <code>new List&lt;T&gt;()</code> 。在业务逻辑允许的情况下，函数出错时可以返回空字符串或者空列表。这样就不必做空检查了。搭配 <code>Foreach</code> 使用,如果是空列表，<code>foreach</code> 里面的逻辑不会运行，也就不会出错。初始化时没有引入 null ，调用函数时也没有引入 null ,自然就不会出现 null 的情况。</p>
<p>尽可能消除 null 避免 null 的传播。</p>
<p>比如查找一个人的地址，认为找不到是可接受的，就返回一个空字符串，如果认为找不到是不可接受的，请直接抛出异常。这个时候也不会返回 null。 自然不会产生 null 也不用做 <code>null Check</code> （但是要捕捉异常） 。</p>
<p>除此之外还有些小技巧可以用上。</p>
<p>如果你使用面向对象编程，可以引用某种类型相应的 null 类型。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Class Student</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> String Name,</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> No,</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span><br><span class="line">	</span>&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">"My name is "</span> + name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class nullStudent : Student</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span><br><span class="line">	</span>&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">""</span>);</span><br><span class="line">		<span class="comment">// or</span></span><br><span class="line">		<span class="comment">// Console.WriteLine("I don't have name");</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; students = GetAllStudents();</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">FindStudent</span>(<span class="params"><span class="keyword">string</span> name</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">foreach</span>(student <span class="keyword">in</span> students)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.name == name)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> student;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> nullStudent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student s = <span class="keyword">new</span> nullStudent();</span><br><span class="line"></span><br><span class="line">s = FindStudent(<span class="string">"LeiFeng"</span>);</span><br><span class="line"></span><br><span class="line">s.Say(); <span class="comment">//No null check.</span></span><br></pre></td></tr></table></figure>
<p>如果你有福能使用<code>C# 6.0</code>，你可以使用新的操作符 <code>?.</code> 。这个操作符只会在不是 null 的情况下执行。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Before C# 6.0</span></span><br><span class="line"><span class="keyword">if</span>(s != <span class="keyword">null</span> &amp;&amp; s.name != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">	Console.WriteLine(s.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C# 6.0</span></span><br><span class="line">Console.WriteLine(s?.name);</span><br></pre></td></tr></table></figure>
<p>但是请注意，在第一次使用某个值得时候最后手动做空检查，如果为 null 就报错(出现这种情况其实应该使用异常)。这样方便调试。之后第二次使用某个值时就直接使用 <code>?.</code>吧。</p>
<h2 id="最后吐槽">最后吐槽</h2><p>null 真是一个烦人的小妖精。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经常写程序的童鞋一定会遇到 <code>null Exception</code> ，但是大部分情况下出现 <code>null Exception</code> 就意味着错误地使用了 <code>null</code></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[NGUI学习笔记之搭建可拖动面板]]></title>
    <link href="http://en.ors-sro.com/NGUI-build-a-draggable-panel/"/>
    <id>http://en.ors-sro.com/NGUI-build-a-draggable-panel/</id>
    <published>2016-04-04T05:39:00.000Z</published>
    <updated>2016-04-04T05:39:58.831Z</updated>
    <content type="html"><![CDATA[<p>往下拖可以看到内容噢~</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>往下拖可以看到内容噢~</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[NGUI学习笔记之Atlas和UITexture的取舍]]></title>
    <link href="http://en.ors-sro.com/NGUI-Atlas-UITexture-notes/"/>
    <id>http://en.ors-sro.com/NGUI-Atlas-UITexture-notes/</id>
    <published>2016-04-04T05:37:29.000Z</published>
    <updated>2016-04-04T05:39:41.732Z</updated>
    <content type="html"><![CDATA[<p>任性随便选</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>任性随便选</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Promise异步编程学习笔记]]></title>
    <link href="http://en.ors-sro.com/Promise-notes/"/>
    <id>http://en.ors-sro.com/Promise-notes/</id>
    <published>2016-04-03T07:35:56.000Z</published>
    <updated>2016-04-03T07:36:37.050Z</updated>
    <content type="html"><![CDATA[<p>Promise.Reject(‘鸽了’)</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>Promise.Reject(‘鸽了’)</p>]]>
    
    </summary>
    
  </entry>
  
</feed>