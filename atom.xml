<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[拖鞋党的拖鞋摊]]></title>
  <subtitle><![CDATA[写一些有的没的]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://en.ors-sro.com//"/>
  <updated>2016-09-25T09:21:25.018Z</updated>
  <id>http://en.ors-sro.com//</id>
  
  <author>
    <name><![CDATA[rtafip]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Quine]]></title>
    <link href="http://en.ors-sro.com/Quine/"/>
    <id>http://en.ors-sro.com/Quine/</id>
    <published>2016-09-25T05:07:23.000Z</published>
    <updated>2016-09-25T09:21:25.018Z</updated>
    <content type="html"><![CDATA[<p>编写程序输出其源代码。</p>
<a id="more"></a>
<p><img src="https://raw.githubusercontent.com/mame/quine-relay/master/langs.png"></p>
<h2 id="奇怪的要求">奇怪的要求</h2><p>有没有一种程序能够将自己的源代码丝毫不差地输出呢？比如最常见的 <code>Hello World</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "stdio.h"</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的是</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Hello</span> world！</span><br></pre></td></tr></table></figure>
<p>如果要达到题目要求应该还要把 <code>#include &quot;stdio.h&quot;</code> <code>int main()</code> <code>{}</code> 等内容输出。也就是符合要求的输出是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &#34;stdio.h&#34;&#10;int main()&#10;&#123;&#10;  printf(&#34;Hello world!&#34;);&#10;  return 0;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>如果要输出以上内容，程序可以是这样</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "stdio.h"</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"#include \"stdio.h\"\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"int main()\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#123;\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">" printf(\"Hello world!\");\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">" return 0;\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这么做的话，符合要求的输出就变了。变成了要输出这样的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &#34;stdio.h&#34;&#10;int main()&#10;&#123;&#10;  printf(&#34;#include \&#34;stdio.h\&#34;\n&#34;);&#10;  printf(&#34;int main()\n&#34;);&#10;  printf(&#34;&#123;\n&#34;);&#10;  printf(&#34; printf(\&#34;Hello world!\&#34;);\n&#34;);&#10;  printf(&#34; return 0;\n&#34;);&#10;  printf(&#34;&#125;\n&#34;);&#10;  return 0;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>似乎陷入了自我指涉的循环。因为要输出源代码的非输出语句（如 <code>main()</code> , <code>return 0</code>）所以增加了输出其他代码的语句。结果源代码发生变化，所以又要增加输出变化部分的代码，无穷无尽。</p>
<p>那么是否存在可以输出自身源码的代码呢？</p>
<p>答案是肯定的</p>
<h2 id="Quine">Quine</h2><p>先来看一段 <code>Java</code> 代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>; <span class="comment">// Quotation mark character</span></span><br><span class="line">  String[] l = &#123; <span class="comment">// Array of source code</span></span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main(String[] args)"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34; // Quotation mark character"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123; // Array of source code"</span>,</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; 6; i++) // Print opening code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++) // Print string array"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[6] + q + l[i] + q + ',');"</span>,</span><br><span class="line">  <span class="string">" for(int i = 7; i &lt; l.length; i++) // Print this code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="comment">// Print opening code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) <span class="comment">// Print string array</span></span><br><span class="line">  System.out.println(l[<span class="number">6</span>] + q + l[i] + q + <span class="string">','</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &lt; l.length; i++) <span class="comment">// Print this code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先来分析一下它的输出。代码中有三个输出语句</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="comment">// Print opening code</span></span><br><span class="line">System.out.println(l[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) <span class="comment">// Print string array</span></span><br><span class="line">System.out.println(l[<span class="number">6</span>] + q + l[i] + q + <span class="string">','</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &lt; l.length; i++) <span class="comment">// Print this code</span></span><br><span class="line">System.out.println(l[i]);</span><br></pre></td></tr></table></figure>
<p>第一个 <code>println</code> 很简单，就是打印 <code>l</code> 数组中的前六行。输出的内容是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Quine&#10;&#123;&#10;  public static void main(String[] args)&#10;  &#123;&#10;  char q = 34; // Quotation mark character&#10;  String[] l = &#123; // Array of source code</span><br></pre></td></tr></table></figure>
<p>第二个 <code>println</code> 相对复杂， <code>l[6]</code> 是 “  ” 也就是空白符。 <code>q</code> 是 <code>&quot;</code> 双引号。<code>l[i]</code> 是每一行的内容，最后附上一个 <code>,</code>。所以这个 <code>println</code> 主要做的是输出 <code>l</code> 中的每一行，并用双引号括起来，最后拼接上逗号。输出的内容是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;public class Quine&#34;,&#10;&#34;&#123;&#34;,&#10;&#34; public static void main(String[] args)&#34;,&#10;&#34; &#123;&#34;,&#10;&#34; char q = 34; // Quotation mark character&#34;,&#10;&#34; String[] l = &#123; // Array of source code&#34;,&#10;&#34; &#34;,&#10;&#34; &#125;;&#34;,&#10;&#34; for(int i = 0; i &#60; 6; i++) // Print opening code&#34;,&#10;&#34; System.out.println(l[i]);&#34;,&#10;&#34; for(int i = 0; i &#60; l.length; i++) // Print string array&#34;,&#10;&#34; System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#34;,&#10;&#34; for(int i = 7; i &#60; l.length; i++) // Print this code&#34;,&#10;&#34; System.out.println(l[i]);&#34;,&#10;&#34; &#125;&#34;,&#10;&#34;&#125;&#34;,</span><br></pre></td></tr></table></figure>
<p>第三个 <code>println</code> 打印 <code>l</code> 第7行之后的所有内容。输出的内容是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  &#125;;&#10;  for(int i = 0; i &#60; 6; i++) // Print opening code&#10;  System.out.println(l[i]);&#10;  for(int i = 0; i &#60; l.length; i++) // Print string array&#10;  System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#10;  for(int i = 7; i &#60; l.length; i++) // Print this code&#10;  System.out.println(l[i]);&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>三个输出凑一起</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Quine&#10;&#123;&#10;  public static void main(String[] args)&#10;  &#123;&#10;  char q = 34; // Quotation mark character&#10;  String[] l = &#123; // Array of source code&#10;  &#34;public class Quine&#34;,&#10;  &#34;&#123;&#34;,&#10;  &#34; public static void main(String[] args)&#34;,&#10;  &#34; &#123;&#34;,&#10;  &#34; char q = 34; // Quotation mark character&#34;,&#10;  &#34; String[] l = &#123; // Array of source code&#34;,&#10;  &#34; &#34;,&#10;  &#34; &#125;;&#34;,&#10;  &#34; for(int i = 0; i &#60; 6; i++) // Print opening code&#34;,&#10;  &#34; System.out.println(l[i]);&#34;,&#10;  &#34; for(int i = 0; i &#60; l.length; i++) // Print string array&#34;,&#10;  &#34; System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#34;,&#10;  &#34; for(int i = 7; i &#60; l.length; i++) // Print this code&#34;,&#10;  &#34; System.out.println(l[i]);&#34;,&#10;  &#34; &#125;&#34;,&#10;  &#34;&#125;&#34;,&#10;  &#125;;&#10;  for(int i = 0; i &#60; 6; i++) // Print opening code&#10;  System.out.println(l[i]);&#10;  for(int i = 0; i &#60; l.length; i++) // Print string array&#10;  System.out.println(l[6] + q + l[i] + q + &#39;,&#39;);&#10;  for(int i = 7; i &#60; l.length; i++) // Print this code&#10;  System.out.println(l[i]);&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>与源码比较</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>; <span class="comment">// Quotation mark character</span></span><br><span class="line">  String[] l = &#123; <span class="comment">// Array of source code</span></span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main(String[] args)"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34; // Quotation mark character"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123; // Array of source code"</span>,</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; 6; i++) // Print opening code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++) // Print string array"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[6] + q + l[i] + q + ',');"</span>,</span><br><span class="line">  <span class="string">" for(int i = 7; i &lt; l.length; i++) // Print this code"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) <span class="comment">// Print opening code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) <span class="comment">// Print string array</span></span><br><span class="line">  System.out.println(l[<span class="number">6</span>] + q + l[i] + q + <span class="string">','</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">7</span>; i &lt; l.length; i++) <span class="comment">// Print this code</span></span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完全一样。</p>
<p>这就是能够输出自身源码的代码。</p>
<p>通常把这类能够输出自身源码的代码称为 <code>Quine</code> 。<a href="https://en.wikipedia.org/wiki/Quine_(computing)" target="_blank" rel="external">Quine</a> 一词来源于逻辑学家，哲学家 <a href="https://en.wikipedia.org/wiki/Willard_Van_Orman_Quine" target="_blank" rel="external">Willard_Van_Orman_Quine</a></p>
<p>当然不仅是 <code>Java</code> 可以编写 <code>Quine</code>，<code>C</code> 也可以编写 <code>Quine</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main()&#123;<span class="keyword">char</span> q=<span class="number">34</span>,n=<span class="number">10</span>,*a=<span class="string">"main()&#123;char q=34,n=10,*a=%c%s%c;printf(a,q,a,q,n);&#125;%c"</span>;<span class="built_in">printf</span>(a,q,a,q,n);&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的原理跟之前 <code>Java</code> 版的差不多。此外还有不同的做法，比如使用 <code>C</code> 的<strong>宏</strong>来实现</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> T(a) main()&#123;printf(a,#a);&#125;</span></span><br><span class="line">T(<span class="string">"#define T(a) main()&#123;printf(a,#a);&#125;\nT(%s)"</span>)</span><br></pre></td></tr></table></figure>
<p>还有<a href="http://blog.chinaunix.net/uid-25299072-id-3077417.html" target="_blank" rel="external">很多很多的玩法</a>。通常一种语言的 <code>Quine</code> 不是唯一的。</p>
<p>除了编译型语言，解释形语言也可以编写 <code>Quine</code>。比如 <code>Python</code> 是这样的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'s = %r\nprint(s%%s)'</span></span><br><span class="line">print(s%s)</span><br></pre></td></tr></table></figure>
<p><code>Lua</code> 是这样的</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">[["x = [" .. "[" .. x .. "]" .. "]\nprint(" .. x)]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"x = ["</span> .. <span class="string">"["</span> .. x .. <span class="string">"]"</span> .. <span class="string">"]\nprint("</span> .. x)</span><br></pre></td></tr></table></figure>
<p><code>Javascript</code> 是这样的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Quine = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">var</span> str = <span class="built_in">arguments</span>.callee.toString(); Quine = <span class="built_in">console</span>.log(str.substring(<span class="number">52</span>, <span class="number">60</span>) + str +</span><br><span class="line"> str.substring(<span class="number">32</span>, <span class="number">37</span>) + str.substring(<span class="number">9</span>, <span class="number">11</span>));&#125;.call()</span><br></pre></td></tr></table></figure>
<h2 id="Ouroboros">Ouroboros</h2><p>输出源码还不够，有些人想到了将不同语言的 <code>Quine</code> 嵌套到一起。用一个语言的代码输出另一个语言的源码，该源码又可以输出之前语言的源码。于是就出现了这样的 <code>Java</code> 代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>;</span><br><span class="line">  String[] l = &#123;</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; C++ Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;============="</span>,</span><br><span class="line">  <span class="string">"#include &lt;iostream&gt;"</span>,</span><br><span class="line">  <span class="string">"#include &lt;string&gt;"</span>,</span><br><span class="line">  <span class="string">"using namespace std;"</span>,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">  <span class="string">"int main(int argc, char* argv[])"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" string l[] = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 20; i &lt;= 25; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[0] + q + l[i] + q + ',' &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 26; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" return 0;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Java Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;=========="</span>,</span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main( String[] args )"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 2; i &lt;= 9; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println( l[0] + q + l[i] + q + ',' );"</span>,</span><br><span class="line">  <span class="string">" for(int i = 10; i &lt;= 18; i++))"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.length; i++)</span><br><span class="line">  System.out.println( l[<span class="number">0</span>] + q + l[i] + q + <span class="string">','</span> );</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &lt;= <span class="number">18</span>; i++)</span><br><span class="line">  System.out.println(l[i]);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码输出的是一段 <code>C++</code> 代码</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> q = <span class="number">34</span>;</span><br><span class="line">  <span class="built_in">string</span> l[] = &#123;</span><br><span class="line">  <span class="string">" "</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; C++ Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;============="</span>,</span><br><span class="line">  <span class="string">"#include &lt;iostream&gt;"</span>,</span><br><span class="line">  <span class="string">"#include &lt;string&gt;"</span>,</span><br><span class="line">  <span class="string">"using namespace std;"</span>,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">  <span class="string">"int main(int argc, char* argv[])"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" string l[] = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 20; i &lt;= 25; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[0] + q + l[i] + q + ',' &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 26; i &lt;= 34; i++)"</span>,</span><br><span class="line">  <span class="string">" cout &lt;&lt; l[i] &lt;&lt; endl;"</span>,</span><br><span class="line">  <span class="string">" return 0;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  <span class="string">"=============&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Java Code &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;============="</span>,</span><br><span class="line">  <span class="string">"public class Quine"</span>,</span><br><span class="line">  <span class="string">"&#123;"</span>,</span><br><span class="line">  <span class="string">" public static void main(String[] args)"</span>,</span><br><span class="line">  <span class="string">" &#123;"</span>,</span><br><span class="line">  <span class="string">" char q = 34;"</span>,</span><br><span class="line">  <span class="string">" String[] l = &#123;"</span>,</span><br><span class="line">  <span class="string">" &#125;;"</span>,</span><br><span class="line">  <span class="string">" for(int i = 2; i &lt;= 9; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println( l[i] );"</span>,</span><br><span class="line">  <span class="string">" for(int i = 0; i &lt; l.length; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[0] + q + l[i] + q + ',');"</span>,</span><br><span class="line">  <span class="string">" for(int i = 10; i &lt;= 18; i++)"</span>,</span><br><span class="line">  <span class="string">" System.out.println(l[i]);"</span>,</span><br><span class="line">  <span class="string">" &#125;"</span>,</span><br><span class="line">  <span class="string">"&#125;"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">20</span>; i &lt;= <span class="number">25</span>; i++)</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; l[i] &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">34</span>; i++)</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; l[<span class="number">0</span>] + q + l[i] + q + <span class="string">','</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">26</span>; i &lt;= <span class="number">34</span>; i++)</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; l[i] &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段 <code>C++</code> 代码反过来生成上面的 <code>Java</code> 代码。</p>
<p>这样的代码被称为 <code>Quine Relay</code> 或者 <code>Ouroboros</code> 。</p>
<p>大家一看，原来还可以这么玩。于是一发不可收拾，更多语言的版本出现了。</p>
<ul>
<li><a href="http://blog.sigfpe.com/2008/02/third-order-quine-in-three-languages.html" target="_blank" rel="external">Haskell → Python → Ruby</a></li>
<li><a href="http://www.stratigery.com/source.html#Ouroboros" target="_blank" rel="external">Python → Bash → Perl</a></li>
<li><a href="http://archive.is/ACEce" target="_blank" rel="external">C → Haskell → Python → Perl</a></li>
<li><a href="http://blog.sigfpe.com/2011/01/quine-central.html" target="_blank" rel="external">Haskell → Perl → Python → Ruby → C → Java</a></li>
<li><a href="http://asiajin.com/blog/2009/09/22/uroboros-programming-with-11-programming-languages/" target="_blank" rel="external">Ruby → Python → Perl → Lua → OCaml → Haskell → C → Java → Brainfuck → Whitespace → Unlambda</a></li>
</ul>
<p>最后有一个聪（Sang）明（Xin）绝（Bing）世（Kuang）的人做出了<a href="https://github.com/mame/quine-relay" target="_blank" rel="external">100个语言的Quine</a> 。好了好了你赢了。</p>
<h2 id="后记">后记</h2><p>限于篇幅，很多语言的 <code>Quine</code> 还没有给出。感兴趣的童鞋可以去维基查看。编程语言除了这种玩法之外，还有另外一种玩法，也是涉及到多个语言的。<del>我懒得写了就不多说了</del>请相信我一定会在下次更新的！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>编写程序输出其源代码。</p>]]>
    
    </summary>
    
      <category term="Quine" scheme="http://en.ors-sro.com/tags/Quine/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[消除多余的 switch 语句]]></title>
    <link href="http://en.ors-sro.com/Remove-redundant-switch/"/>
    <id>http://en.ors-sro.com/Remove-redundant-switch/</id>
    <published>2016-07-27T06:27:54.000Z</published>
    <updated>2016-07-29T08:23:33.840Z</updated>
    <content type="html"><![CDATA[<p>编写程序遇到多分支的情况总是少不了 <code>switch/if</code> 语句。在面向对象编程里大部分的 <code>switch</code> 语句都是可以避免的。使用<strong>多态</strong>和<strong>简单工厂模式</strong>可以消除多余的 <code>switch</code> 语句。</p>
<a id="more"></a>
<h2 id="简单的需求">简单的需求</h2><blockquote>
<p>编写程序根据序号输出动物的名字和叫声。</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>名字</th>
<th>叫声</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>猫咪</td>
<td>喵喵喵？</td>
</tr>
<tr>
<td>2</td>
<td>青蛙</td>
<td>蛤？</td>
</tr>
</tbody>
</table>
<h2 id="过程式的实现方式">过程式的实现方式</h2><h3 id="思路">思路</h3><p>直接从输入读入数字，用 <code>switch</code> 判断并输出名字和叫声。</p>
<h3 id="代码">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"名为猫咪"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"叫了一声：喵喵喵？"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"名为青蛙"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"叫了一声：蛤？"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Console.WriteLine(<span class="string">"这种情况是要加钱的！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析">解析</h3><p>使用了传统的过程式的编程思想。没有多余的 <code>switch</code> 语句。本文完。。。。。。个屁嘞。实际情况中很可能不需要同时输出名字和叫声。所以需要将相关的逻辑封装。</p>
<h2 id="封装的实现方式">封装的实现方式</h2><h3 id="思路-1">思路</h3><p>将相关的逻辑代码封装到函数中。并将这两个函数封装到一个系统类中。需要时调用即可</p>
<h3 id="代码-1">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">       	<span class="comment">// 具体实现移到 AnimalSystem</span></span><br><span class="line">        Console.WriteLine(AnimalSystem.Name(no)); </span><br><span class="line">        Console.WriteLine(AnimalSystem.Sound(no));</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"名为猫咪"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"名为青蛙"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"叫了一声：喵喵喵？"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"叫了一声：蛤？"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析-1">解析</h3><p>名字和叫声的逻辑都封装到 <code>AnimalSystem</code> 中了。但还不够面向对象。</p>
<h2 id="面向对象的实现方式">面向对象的实现方式</h2><h3 id="思路-2">思路</h3><p>新建<strong>猫咪</strong>和<strong>青蛙</strong>类，继承于<strong>动物</strong>类。将名字和叫声移到相应的类中。</p>
<h3 id="代码-2">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(AnimalSystem.Name(no));</span><br><span class="line">        Console.WriteLine(AnimalSystem.Sound(no));</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 引入对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 第 1 个 switch</span></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat().Name();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Frog().Name();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Animal().Name();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 第 2 个 switch</span></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat().Sound();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Frog().Sound();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Animal().Sound();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)  </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为猫咪"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：喵喵喵？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Frog</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为青蛙"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：蛤？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析-2">解析</h3><p>现在的代码已经足够面向对象了。但是代码中出现了两次 <code>switch</code> 语句。过程式的代码可是只有一次。有没有什么办法既使用面向对象又只使用一次 <code>switch</code> 语句呢？答案是肯定的。使用<strong>简单工程模式</strong>搭配<strong>多态</strong>可以做到。</p>
<h2 id="简单工厂的实现方式">简单工厂的实现方式</h2><h3 id="思路-3">思路</h3><p>两次 <code>switch</code> 语句出现在 序号→名字 和 序号→叫声 中。先使用<strong>简单工厂模式</strong>产生 序号→类型 的转换，这时需要一次 <code>switch</code> 语句。之后利用面向对象的多台性质产生 类型→名字 和 类型→叫声 这两次转换。这次转换不需要 <code>switch</code> 语句。</p>
<h3 id="代码-3">代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        Console.Write(<span class="string">"请输入序号："</span>);</span><br><span class="line">        <span class="keyword">string</span> no = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序号 → 类型</span></span><br><span class="line">        Animal animal = AnimalFactory.GetAnimal(no);</span><br><span class="line">        Console.WriteLine(AnimalSystem.Name(animal));</span><br><span class="line">        Console.WriteLine(AnimalSystem.Sound(animal));</span><br><span class="line"></span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params">Animal animal</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 类型 → 名字</span></span><br><span class="line">        <span class="keyword">return</span> animal.Name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params">Animal animal</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// 类型 → 声音</span></span><br><span class="line">        <span class="keyword">return</span> animal.Sound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)  </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"这种情况是要加钱的！"</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为猫咪"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：喵喵喵？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Frog</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Name</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名为青蛙"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">Sound</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"叫了一声：蛤？"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AnimalFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">GetAnimal</span>(<span class="params"><span class="keyword">string</span> no</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="comment">// switch 语句移到这里。唯一一次 switch</span></span><br><span class="line">        <span class="keyword">switch</span> (no)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Frog();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Animal();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析-3">解析</h3><p>通过引入 <code>AnimalFactory</code> 这个简单工厂，之后通过多态特性消除了多次的 <code>switch</code> 语句。如果需要添加新的类型如美羊羊，则需要修改3个地方。</p>
<ol>
<li>新建类继承自 <code>Animal</code></li>
<li>实现相应的 <code>Name()</code> 和 <code>Sound()</code> 方法</li>
<li>在工厂类 <code>AnimalFactory</code> 中添加新的 <code>case</code></li>
</ol>
<p>实际上就算是不了解简单工程模式也很可能写出来。设计模式应该是自然而然的应用而不是刻意地使用，产生冗余的代码。</p>
<h2 id="总结">总结</h2><p>这个简单的例子还有很多可以优化的地方。例如 <code>Animal</code> 类应该是抽象类，不包含具体的实现。同时可以<a href="../Anonying-null/#合理地使用_Null">引入Null Class</a>来用于输出 <strong>这种情况是要加钱的！</strong>等类似没有实现的情况下的默认行为。还可以将简单工厂模式改成工厂模式以符合开放-封闭原则。不过这些都不是本文范围内的。我学膜法去了。 :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>编写程序遇到多分支的情况总是少不了 <code>switch/if</code> 语句。在面向对象编程里大部分的 <code>switch</code> 语句都是可以避免的。使用<strong>多态</strong>和<strong>简单工厂模式</strong>可以消除多余的 <code>switch</code> 语句。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://en.ors-sro.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="学习笔记" scheme="http://en.ors-sro.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode -- Reverse String]]></title>
    <link href="http://en.ors-sro.com/LeetCode-reverse-string/"/>
    <id>http://en.ors-sro.com/LeetCode-reverse-string/</id>
    <published>2016-07-18T07:09:14.000Z</published>
    <updated>2016-07-29T07:57:25.130Z</updated>
    <content type="html"><![CDATA[<p>找不到工作，刷刷 Leetcode 来保持一下写代码的手感。从最简单的开始，也就是 Acceptance 最高的开始。目前接受率最高的是<a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="external">逆序字符串</a></p>
<a id="more"></a>
<h2 id="题目">题目</h2><blockquote>
<p>编写一个函数能够逆序输出字符串<br><strong> 例子 </strong><br>给定 <code>s = &quot;hello&quot;</code> 返回 <code>olleh</code></p>
</blockquote>
<p>总的来说是一个很简单的题目。<code>CS</code> 的学生估计都做过这道练手题。</p>
<h2 id="In_Haskell_Way">In Haskell Way</h2><h3 id="思路">思路</h3><p>看到这个题目就很自然的想到使用<strong>分治</strong>的思想。如果是空字符串则不需要逆序，直接返回即可。如果是长度为1的字符串</p>
<ol>
<li>如果是空字符串，不需要逆序，直接返回即可</li>
<li>如果不是空字符串，将除了第一个字符外的子字符串逆序，之后拼接上第一个字符串即可。</li>
</ol>
<h3 id="代码">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.length() == <span class="number">0</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> reverseString(s.substr(<span class="number">1</span>, s.length())) + s[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果">结果</h3><p>在遇到超长字符时提示 <code>Memory Limit Exceeded</code> 。估计是因为递归的次数太多，调用次数太多而产生 <code>StackOverflow</code> （栈溢出）。所以下一步是要优化递归。通常的解决方案是将递归优化为<strong>尾递归</strong>。递归通常需要全部展开之后才能计算值。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"Hello"</span>)</span></span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"ello"</span>)</span></span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"llo"</span>)</span></span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"lo"</span>)</span></span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">				<span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">'o'</span>)</span></span> + <span class="string">'l'</span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">				<span class="string">'o'</span> + <span class="string">'l'</span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span> <span class="comment">// 完全展开 开始计算</span></span><br><span class="line"></span><br><span class="line">			<span class="string">"ol"</span> + <span class="string">'l'</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">		<span class="string">"oll"</span> + <span class="string">'e'</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"olle"</span> + <span class="string">'H'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"olleH"</span></span><br></pre></td></tr></table></figure>
<p>尾递归是将计算结果传递到下一次递归中。因此之前的任何信息都不需要保存了，清理栈中的参数和返回地址等。这样就不会出现 <code>StackOverflow</code> 。当然这一步是编译器做的优化工作。</p>
<h2 id="In_Tail_Recursion_Way">In Tail Recursion Way</h2><h3 id="思路-1">思路</h3><p>尾递归需要把计算结果传递到下一次递归中。纯函数的唯一输入只有参数。所以需要通过传递参数的方式将计算结果传递。</p>
<h3 id="代码-1">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseStringTailRecursion</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> result = "")</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> reverseStringTailRecursion(s.substr(<span class="number">1</span>, s.length()), s[<span class="number">0</span>] + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> reverseStringTailRecursion(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-1">结果</h3><p>先来看一下尾递归版本的计算过程</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">reverseString</span><span class="params">(<span class="string">"Hello"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"Hello"</span>,<span class="string">""</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"ello"</span>,<span class="string">'H'</span> + <span class="string">""</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"llo"</span>,<span class="string">'e'</span> + <span class="string">'H'</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">"lo"</span>,<span class="string">'l'</span> + <span class="string">"eH"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">'o'</span>,<span class="string">'l'</span> + <span class="string">"leH"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reverseStringTailRecursion</span><span class="params">(<span class="string">""</span>,<span class="string">'o'</span> + <span class="string">"lleH"</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="string">"olleH"</span></span><br></pre></td></tr></table></figure>
<p>可以发现每一次的计算都与之前的函数不再有关系，只与参数有关。从形状上来看，普通递归是一个箭头型 <code>&gt;</code> 。而尾递归是一个直筒型 <code>≡</code> 。信心满满的提交。最后报错，错误和上次一样 <code>StackOverflow</code> 。 看来编译环境没有开启尾递归优化。只好另行他法。既然不允许递归，那就想办法消除递归。通过观察普通递归的计算过程发现其分为<strong>展开</strong>和<strong>计算</strong>两个阶段。展开阶段会栈溢出。所以想办法去掉展开阶段，转为普通的循环即可。观察计算的过程，发现是从尾部开始拼接字符串。那么循环从尾部开始即可。</p>
<h2 id="In_Loop_Way">In Loop Way</h2><h3 id="思路-2">思路</h3><p>从尾部开始去字符串，一直拼接，拼接到字符串第一个字符。</p>
<h3 id="代码-2">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="built_in">string</span> result = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		result += s[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-2">结果</h3><p>通过 476 个测试用例，用时 13ms 。超过 25.5% 的人（C++）。总算是通过了。不过似乎成绩不是很理想，居然连一半的人都没有超过。仔细想想还是有优化空间的。现在的时间复杂度是 <code>O(n)</code>, 空间复杂度是 <code>O(1)</code> 。看起来似乎是很优秀的数据。但是逆序的过程需要额外的一个字符串来承载结果。能否做成原地（In Place）的呢？答案是肯定的。</p>
<h2 id="In_Place_Way">In Place Way</h2><h3 id="思路-3">思路</h3><p>交换首尾字符直至完成。</p>
<h3 id="代码-3">代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> j = s.length() - <span class="number">1</span>; <span class="comment">//s.length() 位置是 '\0'</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(s[i++], s[j--]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果-3">结果</h3><p>通过 476 个测试用例，用时 12ms 。超过 29% 的人（C++）。噗，只提升了 5% 。不知道前面的人是不是用了什么稀奇古怪的 <code>Hack</code> 。 尝试了传递参数时传递引用。发现时间没有变化。又尝试了其他方法，都没有什么效果。</p>
<h2 id="总结">总结</h2><p>先是根据直觉写出递归的方式，然后优化为尾递归，发现编译环境没有做优化。于是改为循环，此时时间复杂度为 <code>O(n)</code> 。之后使用原地交换的方法将时间复杂度降为 <code>O(n/2)</code> 。最后还是没有找到更快的解决方案。如果有更快的方案，欢迎交流。</p>
<h2 id="参考">参考</h2><ol>
<li><a href="https://www.zhihu.com/question/20761771/answer/19996299" target="_blank" rel="external">什么是尾递归</a></li>
<li><a href="http://stackoverflow.com/questions/33923/what-is-tail-recursion" target="_blank" rel="external">What is tail recursion</a></li>
<li><a href="http://blog.csdn.net/luoweifu/article/details/51470998" target="_blank" rel="external">C++ 性能分析</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>找不到工作，刷刷 Leetcode 来保持一下写代码的手感。从最简单的开始，也就是 Acceptance 最高的开始。目前接受率最高的是<a href="https://leetcode.com/problems/reverse-string/">逆序字符串</a></p>]]>
    
    </summary>
    
      <category term="C++" scheme="http://en.ors-sro.com/tags/C/"/>
    
      <category term="玩" scheme="http://en.ors-sro.com/categories/%E7%8E%A9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Airbnb es6 编码风格翻译]]></title>
    <link href="http://en.ors-sro.com/Airbnb-es6-style-guide/"/>
    <id>http://en.ors-sro.com/Airbnb-es6-style-guide/</id>
    <published>2016-06-13T13:13:54.000Z</published>
    <updated>2016-06-26T09:11:02.491Z</updated>
    <content type="html"><![CDATA[<p>Airbnb JavaScript 的编码风格 原文地址: <a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb/JavaScript</a></p>
<a id="more"></a>
<p><strong>前言</strong></p>
<p>翻译 <em> Airbnb JavaScript Style Guide </em> 主要是为了学习 <code>JavaScript</code> 编码风格。因为不是专业的译者，翻译不足之处请指出。</p>
<h1 id="Airbnb_JavaScript_Style_Guide">Airbnb JavaScript Style Guide</h1><p><em>合理地编写 JavaScript </em></p>
<p>其他的风格指导</p>
<ul>
<li><a href="es5/">ES5</a></li>
<li><a href="react/">React</a></li>
<li><a href="https://github.com/airbnb/css" target="_blank" rel="external">CSS &amp; Sass</a></li>
<li><a href="https://github.com/airbnb/ruby" target="_blank" rel="external">Ruby</a></li>
</ul>
<h2 id="类型">类型</h2><p>  <a name="types--primitives"></a><a name="1.1"></a></p>
<ul>
<li><p><a href="#types--primitives">1.1</a> <strong>基本类型</strong>: 基本类型直接获取它的值</p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure>
<p><a name="types--complex"></a><a name="1.2"></a></p>
</li>
<li><p><a href="#types--complex">1.2</a>  <strong>复杂类型</strong>: 复杂类型通过引用获取值</p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><code>function</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="引用">引用</h2><p>  <a name="references--prefer-const"></a><a name="2.1"></a></p>
<ul>
<li><p><a href="#references--prefer-const">2.1</a> 请使用 <code>const</code> 修饰所有引用而不是 <code>var</code> 。eslint: <a href="http://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="external"><code>prefer-const</code></a>, <a href="http://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="external"><code>no-const-assign</code></a></p>
<blockquote>
<p>以此确保你不能对引用重新赋值，避免难以理解的代码和 Bug 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><a name="references--disallow-var"></a><a name="2.2"></a></p>
</li>
<li><p><a href="#references--disallow-var">2.2</a> 如果非要对引用重新复制，请使用 <code>let</code> 而不是 <code>var</code> 。eslint: <a href="http://eslint.org/docs/rules/no-var.html" target="_blank" rel="external"><code>no-var</code></a> jscs: <a href="http://jscs.info/rule/disallowVar" target="_blank" rel="external"><code>disallowVar</code></a></p>
<blockquote>
<p>原因是 <code>let</code> 为块级作用域，而 <code>var</code> 是 函数作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><a name="references--block-scope"></a><a name="2.3"></a></p>
</li>
<li><p><a href="#references--block-scope">2.3</a> 注意 <code>let</code> 和 <code>const</code> 都是块级作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const 和 let 只存在其定义的区块中。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="对象">对象</h2><p>  <a name="objects--no-new"></a><a name="3.1"></a></p>
<ul>
<li><p><a href="#objects--no-new">3.1</a> 请使用 literal syntax 创建对象. eslint: <a href="http://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="external"><code>no-new-object</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--reserved-words"></a><a name="3.2"></a></p>
</li>
<li><p><a href="#objects--reserved-words">3.2</a> 如果代码在浏览器的脚本环境中执行，请勿使用[保留字]当键值，IE8中会失效。<a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="external">详情请看</a>。在服务器代码和 ES6 模块中使用没问题。 jscs: <a href="http://jscs.info/rule/disallowIdentifierNames" target="_blank" rel="external"><code>disallowIdentifierNames</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  <span class="keyword">default</span>: &#123; clark: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  private: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  defaults: &#123; clark: <span class="string">'kent'</span> &#125;, <span class="comment">//default 多了个 s</span></span><br><span class="line">  hidden: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--reserved-words-2"></a><a name="3.3"></a></p>
</li>
<li><p><a href="#objects--reserved-words-2">3.3</a> 请使用易懂的符号代替保留字。 jscs: <a href="http://jscs.info/rule/disallowIdentifierNames" target="_blank" rel="external"><code>disallowIdentifierNames</code></a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">const superman = &#123;</span><br><span class="line">  class: 'alien',</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">const superman = &#123;</span><br><span class="line">  klass: 'alien',</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">const superman = &#123;</span><br><span class="line">  type: 'alien',</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="es6-computed-properties"></a><a name="3.4"></a></p>
</li>
<li><p><a href="#es6-computed-properties">3.4</a> 请在创建带有动态属性名的对象时使用可计算的属性名。</p>
<blockquote>
<p>因为这样允许一次在一个位置定义对象的所有属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="es6-object-shorthand"></a><a name="3.5"></a></p>
</li>
<li><p><a href="#es6-object-shorthand">3.5</a> 请使用对象方法的简写。 eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="external"><code>object-shorthand</code></a> jscs: <a href="http://jscs.info/rule/requireEnhancedObjectLiterals" target="_blank" rel="external"><code>requireEnhancedObjectLiterals</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="es6-object-concise"></a><a name="3.6"></a></p>
</li>
<li><p><a href="#es6-object-concise">3.6</a> 请使用属性的简写。 eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="external"><code>object-shorthand</code></a> jscs: <a href="http://jscs.info/rule/requireEnhancedObjectLiterals" target="_blank" rel="external"><code>requireEnhancedObjectLiterals</code></a></p>
<blockquote>
<p>因为更短且更达意。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--grouped-shorthand"></a><a name="3.7"></a></p>
</li>
<li><p><a href="#objects--grouped-shorthand">3.7</a> 简写属性放在对象声明的头部。</p>
<blockquote>
<p>原因是更容易区分哪些属性使用了简写。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--quoted-props"></a><a name="3.8"></a></p>
</li>
<li><p><a href="#objects--quoted-props">3.8</a> 只给非法标识符的属性加引号。 eslint: <a href="http://eslint.org/docs/rules/quote-props.html" target="_blank" rel="external"><code>quote-props</code></a> jscs: <a href="http://jscs.info/rule/disallowQuotedKeysInObjects" target="_blank" rel="external"><code>disallowQuotedKeysInObjects</code></a></p>
<blockquote>
<p>因为这样更易读，且提供语法高亮，还可以更容易地被很多 JS 引擎优化。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bad = &#123;</span><br><span class="line">  <span class="string">'foo'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'bar'</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> good = &#123;</span><br><span class="line">  foo: <span class="number">3</span>,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="objects--prototype-builtins"></a></p>
</li>
<li><p><a href="#objects--prototype-builtins">3.9</a> 请不要直接调用 <code>Object.prototype</code> 的方法。例如 <code>hasOwnProperty</code> 、<code>propertyIsEnumerabel</code> 和 <code>isPrototypeOf</code> </p>
<blockquote>
<p>因为这些方法可能被对象自身的属性覆盖。例如对象 <code>{ hasOwnProperty: false }</code> 又或者是空对象 (<code>Object.create(null)</code>) </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(object.hasOwnProperty(key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="built_in">Object</span>.prototype.hasOwnProperty; <span class="comment">// 在模块作用域中缓存查询。</span></span><br><span class="line"><span class="comment">/* or */</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="built_in">require</span>(<span class="string">'has'</span>);</span><br><span class="line">…</span><br><span class="line"><span class="built_in">console</span>.log(has.call(object, key));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="数组">数组</h2><p>  <a name="arrays--literals"></a><a name="4.1"></a></p>
<ul>
<li><p><a href="#arrays--literals">4.1</a> 请使用 literal syntax 创建数组。 eslint: <a href="http://eslint.org/docs/rules/no-array-constructor.html" target="_blank" rel="external"><code>no-array-constructor</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure>
<p><a name="arrays--push"></a><a name="4.2"></a></p>
</li>
<li><p><a href="#arrays--push">4.2</a> 请使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="external">Array#push</a> 添加元素而不是直接复制。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure>
<p><a name="es6-array-spreads"></a><a name="4.3"></a></p>
</li>
<li><p><a href="#es6-array-spreads">4.3</a> 请使用数组扩散符 <code>...</code> 拷贝数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure>
<p><a name="arrays--from"></a><a name="4.4"></a></p>
</li>
<li><p><a href="#arrays--from">4.4</a> 转化类数组对象到数组时，请使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="external">Array.from</a> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure>
<p><a name="arrays--callback-return"></a><a name="4.5"></a></p>
</li>
<li><p><a href="#arrays--callback-return">4.5</a> 请在数组回调方法中使用 <code>return</code> 语句。如果函数体只包含一条语句，可以省略  <code>return</code> 。 <a href="#8.2">8.2</a>. eslint: <a href="http://eslint.org/docs/rules/array-callback-return" target="_blank" rel="external"><code>array-callback-return</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> flat = &#123;&#125;;</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce((memo, item, index) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  flat[index] = flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> flat = &#123;&#125;;</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce((memo, item, index) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = memo.concat(item);</span><br><span class="line">  flat[index] = flatten;</span><br><span class="line">  <span class="keyword">return</span> flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter((msg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter((msg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="解构">解构</h2><p>  <a name="destructuring--object"></a><a name="5.1"></a></p>
<ul>
<li><p><a href="#destructuring--object">5.1</a> 当访问和使用对象的多个属性时，请使用对象解构。 jscs: <a href="http://jscs.info/rule/requireObjectDestructuring" target="_blank" rel="external"><code>requireObjectDestructuring</code></a></p>
<blockquote>
<p>因为解构避免创建属性的临时引用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="destructuring--array"></a><a name="5.2"></a></p>
</li>
<li><p><a href="#destructuring--array">5.2</a> 请使用数组解构。 jscs: <a href="http://jscs.info/rule/requireArrayDestructuring" target="_blank" rel="external"><code>requireArrayDestructuring</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure>
<p><a name="destructuring--object-over-array"></a><a name="5.3"></a></p>
</li>
<li><p><a href="#destructuring--object-over-array">5.3</a> 使用对象解构返回多个值，而不是数组解构。 jscs: <a href="http://jscs.info/rule/disallowArrayDestructuringReturn" target="_blank" rel="external"><code>disallowArrayDestructuringReturn</code></a></p>
<blockquote>
<p>因为可以添加新属性或者改变顺序而不用修改。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接下来就是见证奇迹发生的时刻。</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者需要考虑返回数据中的顺序。</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接下来就是见证奇迹发生的时刻。</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者只取所需。</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="字符串">字符串</h2><p>  <a name="strings--quotes"></a><a name="6.1"></a></p>
<ul>
<li><p><a href="#strings--quotes">6.1</a> 请使用单引号 <code>&#39;&#39;</code> 括住字符串。 eslint: <a href="http://eslint.org/docs/rules/quotes.html" target="_blank" rel="external"><code>quotes</code></a> jscs: <a href="http://jscs.info/rule/validateQuoteMarks" target="_blank" rel="external"><code>validateQuoteMarks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="strings--line-length"></a><a name="6.2"></a></p>
</li>
<li><p><a href="#strings--line-length">6.2</a> 超过100个字符的字符串应该以多行拼接的方式书写。</p>
<p><a name="strings--concat-perf"></a><a name="6.3"></a></p>
</li>
<li><p><a href="#strings--concat-perf">6.3</a> 注意：如果滥用，可能会影响性能。 <a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a> 与 <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">讨论</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span><br><span class="line">of Batman. When you stop to think about how Batman had anything to do \</span><br><span class="line">with this, you would get nowhere \</span><br><span class="line">fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</span><br><span class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</span><br><span class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="es6-template-literals"></a><a name="6.4"></a></p>
</li>
<li><p><a href="#es6-template-literals">6.4</a> 动态地拼接字符串时，请使用字符串模板而不是拼接。 eslint: <a href="http://eslint.org/docs/rules/prefer-template.html" target="_blank" rel="external"><code>prefer-template</code></a> <a href="http://eslint.org/docs/rules/template-curly-spacing" target="_blank" rel="external"><code>template-curly-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireTemplateStrings" target="_blank" rel="external"><code>requireTemplateStrings</code></a></p>
<blockquote>
<p>因为字符串模板易读，语法简洁，行数适中，且支持字符串插值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="strings--eval"></a><a name="6.5"></a></p>
</li>
<li><p><a href="#strings--eval">6.5</a> 请勿对字符串使用 <code>eval()</code> ，因为会引入太多漏洞。</p>
<p><a name="strings--escaping"></a></p>
</li>
<li><p><a href="#strings--escaping">6.6</a> 只在必要时使用转义符。 eslint: <a href="http://eslint.org/docs/rules/no-useless-escape" target="_blank" rel="external"><code>no-useless-escape</code></a></p>
<blockquote>
<p>因为斜杠损害了可读性，所以若无必要请勿使用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' \i\s \"quoted\"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' is "quoted"'</span>;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">`'this' is "quoted"`</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="函数">函数</h2><p>  <a name="functions--declarations"></a><a name="7.1"></a></p>
<ul>
<li><p><a href="#functions--declarations">7.1</a> 请使用函数声明而不是函数表达式。 jscs: <a href="http://jscs.info/rule/requireFunctionDeclarations" target="_blank" rel="external"><code>requireFunctionDeclarations</code></a></p>
<blockquote>
<p>因为函数声明是有名字的，所以在调用栈中更容易识别出来。而且整个函数声明会被提升，但是只有函数表达式的引用会被提升。这样可以使用 <a href="#箭头函数">Arrow Functions</a> 代替函数表达式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--iife"></a><a name="7.2"></a></p>
</li>
<li><p><a href="#functions--iife">7.2</a> 用括号括住立即执行函数。 eslint: <a href="http://eslint.org/docs/rules/wrap-iife.html" target="_blank" rel="external"><code>wrap-iife</code></a> jscs: <a href="http://jscs.info/rule/requireParenthesesAroundIIFE" target="_blank" rel="external"><code>requireParenthesesAroundIIFE</code></a></p>
<blockquote>
<p>因为用括号括住立即执行函数表达式和调用括号更利落地表达出独立单元的感觉。在模块遍地的世界里，基本上用不到 IIFE 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// immediately-invoked function expression (IIFE)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p><a name="functions--in-blocks"></a><a name="7.3"></a></p>
</li>
<li><p><a href="#functions--in-blocks">7.3</a> 请勿在非函数区块（if，While 等）中声明函数。请将函数赋值给变量。浏览器虽然允许这么做，但是浏览器间的解释不一样。 eslint: <a href="http://eslint.org/docs/rules/no-loop-func.html" target="_blank" rel="external"><code>no-loop-func</code></a></p>
<p><a name="functions--note-on-blocks"></a><a name="7.4"></a></p>
</li>
<li><p><a href="#functions--note-on-blocks">7.4</a> <strong>注意：</strong> ECMA-262 定义 <code>block</code> 为一系列的语句。函数声明不是语句。 <a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">查看 ECMA-262 关于这个问题的记录Read</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--arguments-shadow"></a><a name="7.5"></a></p>
</li>
<li><p><a href="#functions--arguments-shadow">7.5</a> 请勿将形参命名为 <code>arguments</code> 。这将覆盖每个函数的 <code>arguments</code> 对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="es6-rest"></a><a name="7.6"></a></p>
</li>
<li><p><a href="#es6-rest">7.6</a> 请勿使用 <code>arguments</code>。请选用不定参数 <code>...</code>。Never use <code>arguments</code>, opt to use rest syntax <code>...</code> instead. eslint: <a href="http://eslint.org/docs/rules/prefer-rest-params" target="_blank" rel="external"><code>prefer-rest-params</code></a></p>
<blockquote>
<p>因为 <code>...</code> 鲜明地表达传入的参数，再加上，不定参数是货真价实的数组，而不是像 <code>arguments</code>那样的类数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="es6-default-parameters"></a><a name="7.7"></a></p>
</li>
<li><p><a href="#es6-default-parameters">7.7</a> 请使用默认参数，而不是改变函数参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// No! 不应该改变函数参数。</span></span><br><span class="line">  <span class="comment">// Double bad: 如果 opts 是可判定为 false 的。它会被设为你可能想要的，但这会引入潜在的 Bug。</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--default-side-effects"></a><a name="7.8"></a></p>
</li>
<li><p><a href="#functions--default-side-effects">7.8</a> 避免默认参数的副作用。</p>
<blockquote>
<p>因为容易使人困惑，难以理解。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a = b++</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">count();  <span class="comment">// 1</span></span><br><span class="line">count();  <span class="comment">// 2</span></span><br><span class="line">count(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">count();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p><a name="functions--defaults-last"></a><a name="7.9"></a></p>
</li>
<li><p><a href="#functions--defaults-last">7.9</a> 默认参数始终置于最后。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">name, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="functions--constructor"></a><a name="7.10"></a></p>
</li>
<li><p><a href="#functions--constructor">7.10</a> 请勿使用函数构造器创建新函数。</p>
<blockquote>
<p>因为这样创建函数对字符串求值类似于 eval() ，带来安全隐患。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="keyword">var</span> subtract = <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a - b'</span>);</span><br></pre></td></tr></table></figure>
<p><a name="functions--signature-spacing"></a><a name="7.11"></a></p>
</li>
<li><p><a href="#functions--signature-spacing">7.11</a> 请分隔函数签名。</p>
<blockquote>
<p>因为保持一致很好，而且不应该在增加或者移除函数名字时增加或移除空格</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="functions--mutate-params"></a><a name="7.12"></a></p>
</li>
<li><p><a href="#functions--mutate-params">7.12</a> 请勿修改形参。eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="external"><code>no-param-reassign</code></a></p>
<blockquote>
<p>因为操纵通过参数传递的对象可能给调用者造成意外的副作用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">'key'</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="functions--reassign-params"></a><a name="7.13"></a></p>
</li>
<li><p><a href="#functions--reassign-params">7.13</a> 请勿重新赋值形参。 eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="external"><code>no-param-reassign</code></a></p>
<blockquote>
<p>原因是重新赋值或导致预料外的行为，特别是在使用 <code>arguments</code> 对象时。也可能造成优化问题，尤其是在 V8 中。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = a || <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">a = 1</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="箭头函数">箭头函数</h2><p>  <a name="arrows--use-them"></a><a name="8.1"></a></p>
<ul>
<li><p><a href="#arrows--use-them">8.1</a> 必须使用函数表达式时（如传递匿名函数时），请使用箭头函数。 eslint: <a href="http://eslint.org/docs/rules/prefer-arrow-callback.html" target="_blank" rel="external"><code>prefer-arrow-callback</code></a>, <a href="http://eslint.org/docs/rules/arrow-spacing.html" target="_blank" rel="external"><code>arrow-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireArrowFunctions" target="_blank" rel="external"><code>requireArrowFunctions</code></a></p>
<blockquote>
<p>为什么呢？因为它创建的函数执行在当前上下文的 <code>this</code> 中，通常是所想要的，而且具有更准确的语义。</p>
<p>为什么不呢？当函数相当复杂时，可以将逻辑移入自己的函数中。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="arrows--implicit-return"></a><a name="8.2"></a></p>
</li>
<li><p><a href="#arrows--implicit-return">8.2</a> 如果函数体中包含单个表达式，请省略括号，使用隐式的 return 。否则保留括号且使用 <code>return</code> 语句。  eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="external"><code>arrow-parens</code></a>, <a href="http://eslint.org/docs/rules/arrow-body-style.html" target="_blank" rel="external"><code>arrow-body-style</code></a> jscs:  <a href="http://jscs.info/rule/disallowParenthesesAroundArrowParam" target="_blank" rel="external"><code>disallowParenthesesAroundArrowParam</code></a>, <a href="http://jscs.info/rule/requireShorthandArrowFunctions" target="_blank" rel="external"><code>requireShorthandArrowFunctions</code></a></p>
<blockquote>
<p>因为这是语法糖。语法糖使得多个函数串联的时候更易读。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((number) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((number, index) =&gt; (&#123;</span><br><span class="line">  index: number</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p><a name="arrows--paren-wrap"></a><a name="8.3"></a></p>
</li>
<li><p><a href="#arrows--paren-wrap">8.3</a> 请使用括号括住跨行的表达式以便更易读。</p>
<blockquote>
<p>原因是这样鲜明地展示了函数开始和结束的位置。 </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; <span class="string">'As time went by, the string containing the '</span> +</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;number&#125;</span> became much longer. So we needed to break it over multiple `</span> +</span><br><span class="line">  <span class="string">'lines.'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; (</span><br><span class="line">  <span class="string">`As time went by, the string containing the <span class="subst">$&#123;number&#125;</span> became much `</span> +</span><br><span class="line">  <span class="string">'longer. So we needed to break it over multiple lines.'</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure>
<p><a name="arrows--one-arg-parens"></a><a name="8.4"></a></p>
</li>
<li><p><a href="#arrows--one-arg-parens">8.4</a> 接受单个参数的函数请省略括号。反之，必须用括号括住参数。 eslint: <a href="http://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="external"><code>arrow-parens</code></a> jscs:  <a href="http://jscs.info/rule/disallowParenthesesAroundArrowParam" target="_blank" rel="external"><code>disallowParenthesesAroundArrowParam</code></a></p>
<blockquote>
<p>Why? Less visual clutter.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(number =&gt; (</span><br><span class="line">  <span class="string">`A long string with the <span class="subst">$&#123;number&#125;</span>. It’s so long that we’ve broken it `</span> +</span><br><span class="line">  <span class="string">'over multiple lines!'</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(x =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map((x) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="arrows--confusing"></a><a name="8.5"></a></p>
</li>
<li><p><a href="#arrows--confusing">8.5</a> 请避免混淆箭头函数记号 (<code>=&gt;</code>) 和 比较符号 (<code>&lt;=</code>,<code>&gt;=</code>) 。 eslint: <a href="http://eslint.org/docs/rules/no-confusing-arrow" target="_blank" rel="external"><code>no-confusing-arrow</code></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = item =&gt; item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = (item) =&gt; item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = (item) =&gt; &#123; <span class="keyword">return</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize; &#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="类_与_构造器">类 与 构造器</h2><p>  <a name="constructors--use-class"></a><a name="9.1"></a></p>
<ul>
<li><p><a href="#constructors--use-class">9.1</a> 请使用 <code>class</code> 避免直接操作 <code>prototype</code>。</p>
<blockquote>
<p>因为 <code>class</code> 语法语义更准确且容易理解。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  constructor(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="constructors--extends"></a><a name="9.2"></a></p>
</li>
<li><p><a href="#constructors--extends">9.2</a> 请使用 <code>extends</code> 继承。</p>
<blockquote>
<p>因为这是不打破 <code>instanceof</code> ，实现继承原型功能的内建方式。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="constructors--chaining"></a><a name="9.3"></a></p>
</li>
<li><p><a href="#constructors--chaining">9.3</a> 方法可以返回 <code>this</code> 以便函数串联。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  jump() &#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p><a name="constructors--tostring"></a><a name="9.4"></a></p>
</li>
<li><p><a href="#constructors--tostring">9.4</a> 可以写一个自定义的 toString() 方法，只需保证有用且没有副作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Jedi - <span class="subst">$&#123;this.getName()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="constructors--no-useless"></a><a name="9.5"></a></p>
</li>
<li><p><a href="#constructors--no-useless">9.5</a> 没有声明构造函数的类拥有默认的构造函数。空的构造函数和仅仅是直接调用父类的构造函数是不必要的。eslint: <a href="http://eslint.org/docs/rules/no-useless-constructor" target="_blank" rel="external"><code>no-useless-constructor</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Rey'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="classes--no-duplicate-members"></a></p>
</li>
<li><p><a href="#classes--no-duplicate-members">9.6</a> 避免重复的类成员。 eslint: <a href="http://eslint.org/docs/rules/no-dupe-class-members" target="_blank" rel="external"><code>no-dupe-class-members</code></a></p>
<blockquote>
<p>因为重复的成员声明默认选择最后一个。拥有重复的成员基本上确定为 bug 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="模块">模块</h2><p>  <a name="modules--use-them"></a><a name="10.1"></a></p>
<ul>
<li><p><a href="#modules--use-them">10.1</a> 请使用 modules (<code>import</code>/<code>export</code>) 而不是一个非标准的模块系统。这样可以随时转译到喜欢的模块系统。</p>
<blockquote>
<p>因为 Modules 是未来。现在开始步入未来吧。 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">'./AirbnbStyleGuide'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-wildcard"></a><a name="10.2"></a></p>
</li>
<li><p><a href="#modules--no-wildcard">10.2</a> 请不要使用通配符导入。</p>
<blockquote>
<p>这样保证单个默认导出。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-export-from-import"></a><a name="10.3"></a></p>
</li>
<li><p><a href="#modules--no-export-from-import">10.3</a> 请不要直接在导入语句中导出。</p>
<blockquote>
<p>虽然一行更紧凑。但是清晰地导入和清晰地导出更具有一致性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; from <span class="string">'./airbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-duplicate-imports"></a></p>
</li>
<li><p><a href="#modules--no-duplicate-imports">10.4</a> 只在一个位置导入。eslint: <a href="http://eslint.org/docs/rules/no-duplicate-imports" target="_blank" rel="external"><code>no-duplicate-imports</code></a></p>
<blockquote>
<p>从同一个路径多行导入使得代码难以维护。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="comment">// … some other imports … //</span></span><br><span class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123;</span><br><span class="line">  named1,</span><br><span class="line">  named2,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="modules--no-mutable-exports"></a></p>
</li>
<li><p><a href="#modules--no-mutable-exports">10.5</a> 请不要导出可变的绑定。eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md" target="_blank" rel="external"><code>import/no-mutable-exports</code></a></p>
<blockquote>
<p>因为可变量应当避免通用，尤其是在导出可变的绑定时。可能在某些特殊情况下用到，但是通常情况下应该只导出常量。 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure>
<p><a name="modules--prefer-default-export"></a></p>
</li>
<li><p><a href="#modules--prefer-default-export">10.6</a> 模块只有一个导出时，请使用默认导出而不是命名的导出。eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="external"><code>import/prefer-default-export</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><a name="modules--imports-first"></a></p>
</li>
<li><p><a href="#modules--imports-first">10.7</a> 请将所有的 <code>import</code> 放到非导入语句上面。eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/imports-first.md" target="_blank" rel="external"><code>import/imports-first</code></a></p>
<blockquote>
<p>既然 <code>import</code>会被提升，不如将其置顶以免出现意料之外的行为。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line">foo.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">foo.init();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="迭代器_与_生成器">迭代器 与 生成器</h2><p>  <a name="iterators--nope"></a><a name="11.1"></a></p>
<ul>
<li><p><a href="#iterators--nope">11.1</a> 请勿使用迭代器。请使用 JavaScript 的高阶函数像 <code>map()</code> 和 <code>reduce()</code> 而不是使用循环像 <code>for-of</code> 。 eslint: <a href="http://eslint.org/docs/rules/no-iterator.html" target="_blank" rel="external"><code>no-iterator</code></a></p>
<blockquote>
<p>因为这样迫使遵循不可变这个规则。处理只返回值的纯函数比副作用更容易解释。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(num =&gt; sum += num);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (use the functional force)</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce((total, num) =&gt; total + num, <span class="number">0</span>);</span><br><span class="line">sum === <span class="number">15</span>;</span><br></pre></td></tr></table></figure>
<p><a name="generators--nope"></a><a name="11.2"></a></p>
</li>
<li><p><a href="#generators--nope">11.2</a> 目前请勿使用生成器。</p>
<blockquote>
<p>因为转义到ES5效果不好。</p>
</blockquote>
<p><a name="generators--spacing"></a></p>
</li>
<li><p><a href="#generators--spacing">11.3</a> 如果非要使用生成器，或者不顾<a href="#generators--nope">我们的建议</a>，请确保函数签名合理地分隔。 eslint: <a href="http://eslint.org/docs/rules/generator-star-spacing" target="_blank" rel="external"><code>generator-star-spacing</code></a></p>
<blockquote>
<p>因为 <code>function</code> 和 <code>*</code> 属于同一个概念的关键字。<code>*</code> 不是 <code>function</code> 的修饰器， <code>function*</code> 是一个单独的构造器，与 <code>function</code> 不同。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> quux = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span></span><br><span class="line">*</span><br><span class="line"><span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wat = <span class="function"><span class="keyword">function</span></span><br><span class="line">*</span><br><span class="line">(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="属性">属性</h2><p>  <a name="properties--dot"></a><a name="12.1"></a></p>
<ul>
<li><p><a href="#properties--dot">12.1</a> 请使用点号访问属性。eslint: <a href="http://eslint.org/docs/rules/dot-notation.html" target="_blank" rel="external"><code>dot-notation</code></a> jscs: <a href="http://jscs.info/rule/requireDotNotation" target="_blank" rel="external"><code>requireDotNotation</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke[<span class="string">'jedi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure>
<p><a name="properties--bracket"></a><a name="12.2"></a></p>
</li>
<li><p><a href="#properties--bracket">12.2</a> 以变量访问属性时请使用方括号 <code>[]</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="变量">变量</h2><p>  <a name="variables--const"></a><a name="13.1"></a></p>
<ul>
<li><p><a href="#variables--const">13.1</a> 请总是使用 <code>const</code> 声明变量。否则将引入全局变量。避免污染全局命名空间。地球超人（Captain Planet）已经警告过我们了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure>
<p><a name="variables--one-const"></a><a name="13.2"></a></p>
</li>
<li><p><a href="#variables--one-const">13.2</a> 每个变量请使用一个 <code>const</code> 声明。 eslint: <a href="http://eslint.org/docs/rules/one-var.html" target="_blank" rel="external"><code>one-var</code></a> jscs: <a href="http://jscs.info/rule/disallowMultipleVarDecl" target="_blank" rel="external"><code>disallowMultipleVarDecl</code></a></p>
<blockquote>
<p>这样更容易增加新的变量声明。而且不用担心是用 <code>,</code> 还是 <code>;</code>，带来标点符号不一致。在调试器中可以步过每一个声明，而不是一次跳过全部。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// （与上面相比，请试着找出错误）</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> dragonball = <span class="string">'z'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="variables--const-let-group"></a><a name="13.3"></a></p>
</li>
<li><p><a href="#variables--const-let-group">13.3</a> <code>const</code> 分为一组，然后<code>let</code> 分为一组。</p>
<blockquote>
<p>因为这样在重新为变量赋值时很有用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">let</span> length;</span><br></pre></td></tr></table></figure>
<p><a name="variables--define-where-used"></a><a name="13.4"></a></p>
</li>
<li><p><a href="#variables--define-where-used">13.4</a> 请在使用变量的地方给变量赋值，但是须放置在合适的位置。</p>
<blockquote>
<p>因为 <code>let</code> 和 <code>const</code> 都是块级作用域而非函数级作用域。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - 不必要的函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="提升">提升</h2><p>  <a name="hoisting--about"></a><a name="14.1"></a></p>
<ul>
<li><p><a href="#hoisting--about">14.1</a> <code>var</code> 声明会被提升至作用域顶部，相应的赋值却不会。<code>const</code> 和 <code>let</code> 声明被一个叫做 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let" target="_blank" rel="external">临时性死区 (TDZ)</a> 的新概念所保护。所以知道为什么<a href="http://es-discourse.com/t/why-typeof-is-no-longer-safe/15" target="_blank" rel="external"> typeof 不再安全</a> 很重要。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没用（假设存在 notDefine 全局变量） 。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; 抛出 ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于变量提升，在引用变量后声明变量是有效的。</span></span><br><span class="line"><span class="comment">// 注意：赋值 `true` 没有被提升。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释器提升变量声明至作用域顶部。</span></span><br><span class="line"><span class="comment">// 也就是例子可以重写为：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 const 和 let </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; 抛出 ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> declaredButNotAssigned); <span class="comment">// =&gt; 抛出 ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="hoisting--anon-expressions"></a><a name="14.2"></a></p>
</li>
<li><p><a href="#hoisting--anon-expressions">14.2</a> 匿名函数的变量名会被提升，而不是函数赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="hoisting--named-expresions"></a><a name="14.3"></a></p>
</li>
<li><p><a href="#hoisting--named-expresions">14.3</a> 有名字的函数表达式的变量名会被提升，而不是函数名字或者函数体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数名与变量名一致时也会这样。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="hoisting--declarations"></a><a name="14.4"></a></p>
</li>
<li><p><a href="#hoisting--declarations">14.4</a> 函数声明中的函数名和函数体都会被提升。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>详情请参考 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/" target="_blank" rel="external">JavaScript 作用域与提升</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="external">Ben Cherry</a> 。</p>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="比较符_与_相等性">比较符 与 相等性</h2><p>  <a name="comparison--eqeqeq"></a><a name="15.1"></a></p>
<ul>
<li><p><a href="#comparison--eqeqeq">15.1</a> 请使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code> 。 eslint: <a href="http://eslint.org/docs/rules/eqeqeq.html" target="_blank" rel="external"><code>eqeqeq</code></a></p>
<p><a name="comparison--if"></a><a name="15.2"></a></p>
</li>
<li><p><a href="#comparison--if">15.2</a> 条件语句比如 <code>if</code> 语句对其表达式强制使用 <code>ToBoolean</code> 求值，且遵循以下几个简单的规则：</p>
<ul>
<li><strong>Objects</strong> 求值为 <strong>true</strong></li>
<li><strong>Undefined</strong> 求值为 <strong>false</strong></li>
<li><strong>Null</strong> 求值为 <strong>false</strong></li>
<li><strong>Booleans</strong> 求值为 <strong>相应的布尔值</strong></li>
<li><strong>Numbers</strong> 求值为 <strong>false</strong> 如果是 <strong>+0, -0, 或者 NaN</strong> ，否则为 <strong>true</strong></li>
<li><strong>String</strong> 求值为 <strong>false</strong> 如果是空字符串 <code>&#39;&#39;</code> ，否则为 <strong>true</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>] &amp;&amp; []) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// 数组（甚至是空数组）是对象，对象求值为 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--shortcuts"></a><a name="15.3"></a></p>
</li>
<li><p><a href="#comparison--shortcuts">15.3</a> 请使用快捷的方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--moreinfo"></a><a name="15.4"></a></p>
</li>
<li><p><a href="#comparison--moreinfo">15.4</a> 详情见 Angus Croll 的 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">相等的真相与 JavaScript</a> 。</p>
<p><a name="comparison--switch-blocks"></a><a name="15.5"></a></p>
</li>
<li><p><a href="#comparison--switch-blocks">15.5</a> 请使用括号在包含词法声明（如 <code>let</code> ，<code>const</code> ，<code>function</code> 和 <code>class</code>）的 <code>case</code> 和 <code>default</code> 中创建区块。</p>
<blockquote>
<p>因为词法声明在整个 <code>switch</code> 块中是可见的，但是只会在被赋值的时候初始化，这只会发生在相应的 <code>case</code> 到达时。引起多个 <code>case</code> 定义相同的东西的问题。</p>
</blockquote>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-case-declarations.html" target="_blank" rel="external"><code>no-case-declarations</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    bar();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--nested-ternaries"></a><a name="15.6"></a></p>
</li>
<li><p><a href="#comparison--nested-ternaries">15.6</a> 请勿嵌套三元表达式。一般情况下是单行表达式。</p>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-nested-ternary.html" target="_blank" rel="external"><code>no-nested-ternary</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">"bar"</span></span><br><span class="line">  : value1 &gt; value2 ? <span class="string">"baz"</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">'bar'</span></span><br><span class="line">  : maybeNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2 ? <span class="string">'bar'</span> : maybeNull;</span><br></pre></td></tr></table></figure>
<p><a name="comparison--unneeded-ternary"></a><a name="15.7"></a></p>
</li>
<li><p><a href="#comparison--unneeded-ternary">15.7</a> 请避免不需要的三元表达式。</p>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-unneeded-ternary.html" target="_blank" rel="external"><code>no-unneeded-ternary</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a ? a : b;</span><br><span class="line"><span class="keyword">const</span> bar = c ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> baz = c ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = a || b;</span><br><span class="line"><span class="keyword">const</span> bar = !!c;</span><br><span class="line"><span class="keyword">const</span> baz = !c;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="块">块</h2><p>  <a name="blocks--braces"></a><a name="16.1"></a></p>
<ul>
<li><p><a href="#blocks--braces">16.1</a> 多行区块请使用括号。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="blocks--cuddled-elses"></a><a name="16.2"></a></p>
</li>
<li><p><a href="#blocks--cuddled-elses">16.2</a> 请将 <code>else</code> 放到离 <code>if</code> 最近的括号那一行。 eslint: <a href="http://eslint.org/docs/rules/brace-style.html" target="_blank" rel="external"><code>brace-style</code></a> jscs:  <a href="http://jscs.info/rule/disallowNewlineBeforeBlockStatements" target="_blank" rel="external"><code>disallowNewlineBeforeBlockStatements</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="注释">注释</h2><p>  <a name="comments--multiline"></a><a name="17.1"></a></p>
<ul>
<li><p><a href="#comments--multiline">17.1</a> 多行注释请使用 <code>/** ... */</code>。包括说明，所有参数的类型和值，以及返回值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * make() returns a new element</span><br><span class="line"> * based on the passed in tag name</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;String&#125; tag</span><br><span class="line"> * @return &#123;Element&#125; element</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comments--singleline"></a><a name="17.2"></a></p>
</li>
<li><p><a href="#comments--singleline">17.2</a> 单行注释请使用 <code>//</code>。请将单行注释至于前一行。在注释前空一行除非是第一行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comments--actionitems"></a><a name="17.3"></a></p>
</li>
<li><p><a href="#comments--actionitems">17.3</a> 请在注释中使用 <code>FIXME</code> 或者 <code>TODO</code> 前缀以便其他开发者快速理解其中需要被解决的问题，或者问题解决的建议。与其他常规注释不同，这些注释可以被采取行动例如 <code>FIXME: -- 需要指出这里</code> 或者 <code>TODO: -- 待实现</code> 。</p>
<p><a name="comments--fixme"></a><a name="17.4"></a></p>
</li>
<li><p><a href="#comments--fixme">17.4</a> 请使用 <code>// FIXME:</code> 声明问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">FIXME</span></span>: 此处不应使用全局变量</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="comments--todo"></a><a name="17.5"></a></p>
</li>
<li><p><a href="#comments--todo">17.5</a> 请使用 <code>// TODO:</code> 声明问题的解决方案。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>: total 应该可由参数配置</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="空白符">空白符</h2><p>  <a name="whitespace--spaces"></a><a name="18.1"></a></p>
<ul>
<li><p><a href="#whitespace--spaces">18.1</a> 请使用设为两个空格的 soft tabs 。 eslint: <a href="http://eslint.org/docs/rules/indent.html" target="_blank" rel="external"><code>indent</code></a> jscs: <a href="http://jscs.info/rule/validateIndentation" target="_blank" rel="external"><code>validateIndentation</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--before-blocks"></a><a name="18.2"></a></p>
</li>
<li><p><a href="#whitespace--before-blocks">18.2</a> 请在第一个大括号前空一格。 eslint: <a href="http://eslint.org/docs/rules/space-before-blocks.html" target="_blank" rel="external"><code>space-before-blocks</code></a> jscs: <a href="http://jscs.info/rule/requireSpaceBeforeBlockStatements" target="_blank" rel="external"><code>requireSpaceBeforeBlockStatements</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--around-keywords"></a><a name="18.3"></a></p>
</li>
<li><p><a href="#whitespace--around-keywords">18.3</a> 请在控制语句（<code>if</code> ，<code>while</code> 等）的开始空格前空一格。请勿在函数名字和参数列表间留空。 eslint: <a href="http://eslint.org/docs/rules/keyword-spacing.html" target="_blank" rel="external"><code>keyword-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireSpaceAfterKeywords" target="_blank" rel="external"><code>requireSpaceAfterKeywords</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--infix-ops"></a><a name="18.4"></a></p>
</li>
<li><p><a href="#whitespace--infix-ops">18.4</a> 请使用空格分离操作符。 eslint: <a href="http://eslint.org/docs/rules/space-infix-ops.html" target="_blank" rel="external"><code>space-infix-ops</code></a> jscs: <a href="http://jscs.info/rule/requireSpaceBeforeBinaryOperators" target="_blank" rel="external"><code>requireSpaceBeforeBinaryOperators</code></a>, <a href="http://jscs.info/rule/requireSpaceAfterBinaryOperators" target="_blank" rel="external"><code>requireSpaceAfterBinaryOperators</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--newline-at-end"></a><a name="18.5"></a></p>
</li>
<li><p><a href="#whitespace--newline-at-end">18.5</a> 请在文件尾部以换行符结尾。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--chains"></a><a name="18.6"></a></p>
</li>
<li><p><a href="#whitespace--chains">18.6</a> 请在长的方法链（多于两个方法）时使用缩进。请以点开头，这样强调该行为方法调用而不是新的语句。eslint: <a href="http://eslint.org/docs/rules/newline-per-chained-call" target="_blank" rel="external"><code>newline-per-chained-call</code></a> <a href="http://eslint.org/docs/rules/no-whitespace-before-property" target="_blank" rel="external"><code>no-whitespace-before-property</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data);</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--after-blocks"></a><a name="18.7"></a></p>
</li>
<li><p><a href="#whitespace--after-blocks">18.7</a> 请在区块和下一个语句间空一行。 jscs: <a href="http://jscs.info/rule/requirePaddingNewLinesAfterBlocks" target="_blank" rel="external"><code>requirePaddingNewLinesAfterBlocks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--padded-blocks"></a><a name="18.8"></a></p>
</li>
<li><p><a href="#whitespace--padded-blocks">18.8</a> 请勿在块中填充空行。eslint: <a href="http://eslint.org/docs/rules/padded-blocks.html" target="_blank" rel="external"><code>padded-blocks</code></a> jscs:  <a href="http://jscs.info/rule/disallowPaddingNewlinesInBlocks" target="_blank" rel="external"><code>disallowPaddingNewlinesInBlocks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also bad</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--in-parens"></a><a name="18.9"></a></p>
</li>
<li><p><a href="#whitespace--in-parens">18.9</a> 请勿在括号内加空格。eslint: <a href="http://eslint.org/docs/rules/space-in-parens.html" target="_blank" rel="external"><code>space-in-parens</code></a> jscs: <a href="http://jscs.info/rule/disallowSpacesInsideParentheses" target="_blank" rel="external"><code>disallowSpacesInsideParentheses</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"> foo </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> ( foo ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--in-brackets"></a><a name="18.10"></a></p>
</li>
<li><p><a href="#whitespace--in-brackets">18.10</a> 请勿在放括号中加空格。 eslint: <a href="http://eslint.org/docs/rules/array-bracket-spacing.html" target="_blank" rel="external"><code>array-bracket-spacing</code></a> jscs: <a href="http://jscs.info/rule/disallowSpacesInsideArrayBrackets" target="_blank" rel="external"><code>disallowSpacesInsideArrayBrackets</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(foo[ <span class="number">0</span> ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--in-braces"></a><a name="18.11"></a></p>
</li>
<li><p><a href="#whitespace--in-braces">18.11</a> 请在花括号中加空格。eslint: <a href="http://eslint.org/docs/rules/object-curly-spacing.html" target="_blank" rel="external"><code>object-curly-spacing</code></a> jscs: <a href="http://jscs.info/rule/requireSpacesInsideObjectBrackets" target="_blank" rel="external"><code>requireSpacesInsideObjectBrackets</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123;clark: <span class="string">'kent'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123; clark: <span class="string">'kent'</span> &#125;;</span><br></pre></td></tr></table></figure>
<p><a name="whitespace--max-len"></a><a name="18.12"></a></p>
</li>
<li><p><a href="#whitespace--max-len">18.12</a> 请避免单行超过100个字符（含空白符）。 eslint: <a href="http://eslint.org/docs/rules/max-len.html" target="_blank" rel="external"><code>max-len</code></a> jscs: <a href="http://jscs.info/rule/maximumLineLength" target="_blank" rel="external"><code>maximumLineLength</code></a></p>
<blockquote>
<p>这样确保了可读性与可维护性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'Whatever national crop flips the window. The cartoon reverts within the screw. Whatever wizard constrains a helpful ally. The counterpart ascends!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$.ajax(&#123; method: <span class="string">'POST'</span>, url: <span class="string">'https://airbnb.com/'</span>, data: &#123; name: <span class="string">'John'</span> &#125; &#125;).done(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>)).fail(() =&gt; <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'Whatever national crop flips the window. The cartoon reverts within the screw. '</span> +</span><br><span class="line">  <span class="string">'Whatever wizard constrains a helpful ally. The counterpart ascends!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'https://airbnb.com/'</span>,</span><br><span class="line">  data: &#123; name: <span class="string">'John'</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .done(() =&gt; <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>))</span><br><span class="line">  .fail(() =&gt; <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="逗号">逗号</h2><p><a name="commas--leading-trailing"></a><a name="19.1"></a></p>
<ul>
<li><p><a href="#commas--leading-trailing">19.1</a> 逗号开头: <strong>别啦</strong> eslint: <a href="http://eslint.org/docs/rules/comma-style.html" target="_blank" rel="external"><code>comma-style</code></a> jscs: <a href="http://jscs.info/rule/requireCommaBeforeLineBreak" target="_blank" rel="external"><code>requireCommaBeforeLineBreak</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">  once,</span><br><span class="line">  upon,</span><br><span class="line">  aTime,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Ada'</span></span><br><span class="line">  , lastName: <span class="string">'Lovelace'</span></span><br><span class="line">  , birthYear: <span class="number">1815</span></span><br><span class="line">  , superPower: <span class="string">'computers'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Ada'</span>,</span><br><span class="line">  lastName: <span class="string">'Lovelace'</span>,</span><br><span class="line">  birthYear: <span class="number">1815</span>,</span><br><span class="line">  superPower: <span class="string">'computers'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a name="commas--dangling"></a><a name="19.2"></a></p>
</li>
<li><p><a href="#commas--dangling">19.2</a> 附加的尾部逗号： <strong>好滴</strong> eslint: <a href="http://eslint.org/docs/rules/comma-dangle.html" target="_blank" rel="external"><code>comma-dangle</code></a> jscs: <a href="http://jscs.info/rule/requireTrailingComma" target="_blank" rel="external"><code>requireTrailingComma</code></a></p>
<blockquote>
<p>因为这样 git diffs 会更清晰。而且转译器比如 Babel 会移除尾部附加的逗号。这样不用担心在传统浏览器中的 <a href="es5/README.md#commas">尾部逗号问题</a>。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - git diff without trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">-    lastName: <span class="string">'Nightingale'</span></span><br><span class="line">+    lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb graph'</span>, <span class="string">'modern nursing'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good - git diff with trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">     lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="分号">分号</h2><p>  <a name="semicolons--required"></a><a name="20.1"></a></p>
<ul>
<li><p><a href="#20.1">20.1</a> <strong>好滴</strong> eslint: <a href="http://eslint.org/docs/rules/semi.html" target="_blank" rel="external"><code>semi</code></a> jscs: <a href="http://jscs.info/rule/requireSemicolons" target="_blank" rel="external"><code>requireSemicolons</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, but legacy (guards against the function becoming an argument when two files with IIFEs are concatenated)</span></span><br><span class="line">;(() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214" target="_blank" rel="external">Read more</a>.</p>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="类型转换_与_强制转换">类型转换 与 强制转换</h2><p>  <a name="coercion--explicit"></a><a name="21.1"></a></p>
<ul>
<li><p><a href="#coercion--explicit">21.1</a> 语句还是前执行强制转换。</p>
<p><a name="coercion--strings"></a><a name="21.2"></a></p>
</li>
<li><p><a href="#coercion--strings">21.2</a>  Strings:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>; <span class="comment">// invokes this.reviewScore.valueOf()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore.toString(); <span class="comment">// 不保证返回 string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore);</span><br></pre></td></tr></table></figure>
<p><a name="coercion--numbers"></a><a name="21.3"></a></p>
</li>
<li><p><a href="#coercion--numbers">21.3</a> Numbers: 请在类型转换时使用 <code>Number</code> ，在使用 <code>parseInt</code> 解析字符串时带上进制。 eslint: <a href="http://eslint.org/docs/rules/radix" target="_blank" rel="external"><code>radix</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputValue = <span class="string">'4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p><a name="coercion--comment-deviations"></a><a name="21.4"></a></p>
</li>
<li><p><a href="#coercion--comment-deviations">21.4</a> 如果因为某种原因做了些很野性的事情，而且 <code>parseInt</code> 成为瓶颈，因为<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="external">性能原因</a>使用位移操作，请留注释解释原因和内容。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * parseInt 是代码变慢的罪魁祸首。</span><br><span class="line"> * 位移字符串强制将它转成 Number 会快很多。</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p><a name="coercion--bitwise"></a><a name="21.5"></a></p>
</li>
<li><p><a href="#coercion--bitwise">21.5</a> <strong>注意：</strong> 请在使用位移操作小心。Number 是 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="external">64位值</a>，而位移操作总是返回32位整数 (<a href="http://es5.github.io/#x11.7" target="_blank" rel="external">source</a>)。位移可能导致整数值大于32位。 <a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="external">相关讨论</a>。最大的有符号32位值为2,147,483,647：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure>
<p><a name="coercion--booleans"></a><a name="21.6"></a></p>
</li>
<li><p><a href="#coercion--booleans">21.6</a> Booleans:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="命名约定">命名约定</h2><p>  <a name="naming--descriptive"></a><a name="22.1"></a></p>
<ul>
<li><p><a href="#naming--descriptive">22.1</a> 请避免使用单个字母名字。名字应具有自述性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="naming--camelCase"></a><a name="22.2"></a></p>
</li>
<li><p><a href="#naming--camelCase">22.2</a> 请在命名对象，函数和实例时使用小驼峰式（camelCase）。eslint: <a href="http://eslint.org/docs/rules/camelcase.html" target="_blank" rel="external"><code>camelcase</code></a> jscs: <a href="http://jscs.info/rule/requireCamelCaseOrUpperCaseIdentifiers" target="_blank" rel="external"><code>requireCamelCaseOrUpperCaseIdentifiers</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><a name="naming--PascalCase"></a><a name="22.3"></a></p>
</li>
<li><p><a href="#naming--PascalCase">22.3</a> 请仅在命名构造函数和类时使用大驼峰式。eslint: <a href="http://eslint.org/docs/rules/new-cap.html" target="_blank" rel="external"><code>new-cap</code></a> jscs: <a href="http://jscs.info/rule/requireCapitalizedConstructors" target="_blank" rel="external"><code>requireCapitalizedConstructors</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  constructor(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a name="naming--leading-underscore"></a><a name="22.4"></a></p>
</li>
<li><p><a href="#naming--leading-underscore">22.4</a> 请勿使用拖尾或者领头的下划线。eslint: <a href="http://eslint.org/docs/rules/no-underscore-dangle.html" target="_blank" rel="external"><code>no-underscore-dangle</code></a> jscs: <a href="http://jscs.info/rule/disallowDanglingUnderscores" target="_blank" rel="external"><code>disallowDanglingUnderscores</code></a></p>
<blockquote>
<p>因为 JavaScript 对于属性和方法而言没有私有性。虽然领头的下划线是一种约定俗成表达 private 的方式。实际上，这些属性全是 public 而且术语公共的 API 约定。这种约定可能会导致开发者错误地以为改变不算做打破或者不需要测试。太长不看：需要 <code>private</code> 的东西时，不能显示地表现（给其他人）。 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure>
<p><a name="naming--self-this"></a><a name="22.5"></a></p>
</li>
<li><p><a href="#naming--self-this">22.5</a> 请勿保存 <code>this</code> 的引用。请使用箭头函数或者 bind 函数。 jscs: <a href="http://jscs.info/rule/disallowNodeTypes" target="_blank" rel="external"><code>disallowNodeTypes</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="naming--filename-matches-export"></a><a name="22.6"></a></p>
</li>
<li><p><a href="#naming--filename-matches-export">22.6</a> 文件名应当与默认导出的名字完全一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件 1 内容</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件 2 内容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fortyTwo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件 3 内容</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">insideDirectory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在同一个其他文件</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./checkBox'</span>; <span class="comment">// 大驼峰 import/export ，小驼峰文件名 </span></span><br><span class="line"><span class="keyword">import</span> FortyTwo <span class="keyword">from</span> <span class="string">'./FortyTwo'</span>; <span class="comment">// 大驼峰 import/filename ，小驼峰 export</span></span><br><span class="line"><span class="keyword">import</span> InsideDirectory <span class="keyword">from</span> <span class="string">'./InsideDirectory'</span>; <span class="comment">// 大驼峰 import/filename ，小驼峰 export</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./check_box'</span>; <span class="comment">// 大驼峰 import/export ，蛇_型文件名。</span></span><br><span class="line"><span class="keyword">import</span> forty_two <span class="keyword">from</span> <span class="string">'./forty_two'</span>; <span class="comment">// 蛇_型 import/export ，小驼峰 export </span></span><br><span class="line"><span class="keyword">import</span> inside_directory <span class="keyword">from</span> <span class="string">'./inside_directory'</span>; <span class="comment">// 蛇_型 import ，小驼峰 export </span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./inside_directory/index'</span>; <span class="comment">// 显示地导入 index 文件</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory/index'</span>; <span class="comment">// 显示地导入 index 文件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./CheckBox'</span>; <span class="comment">// 大驼峰 export/import/文件名 </span></span><br><span class="line"><span class="keyword">import</span> fortyTwo <span class="keyword">from</span> <span class="string">'./fortyTwo'</span>; <span class="comment">// 小驼峰 export/import/文件名 </span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory'</span>; <span class="comment">// 小驼峰 export/import/目录名/ ,隐式的"index"</span></span><br><span class="line"><span class="comment">// ^ 同时支持 insideDirectory.js 和 insideDirectory/index.js</span></span><br></pre></td></tr></table></figure>
<p><a name="naming--camelCase-default-export"></a><a name="22.7"></a></p>
</li>
<li><p><a href="#naming--camelCase-default-export">22.7</a> 请在导出默认函数时使用小驼峰。文件名应当与函数名一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure>
<p><a name="naming--PascalCase-singleton"></a><a name="22.8"></a></p>
</li>
<li><p><a href="#naming--PascalCase-singleton">22.8</a> 请在导出 构造器 / 类 / 单例 / 函数库 / 裸露的对象 时使用大驼峰。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="访问器">访问器</h2><p>  <a name="accessors--not-required"></a><a name="23.1"></a></p>
<ul>
<li><p><a href="#accessors--not-required">23.1</a> 属性的访问函数是不必要的。</p>
<p><a name="accessors--no-getters-setters"></a><a name="23.2"></a></p>
</li>
<li><p><a href="#accessors--no-getters-setters">23.2</a> 请勿使用 JavaScript 的 getters/setters 。因为会造成副作用，难以调试，维护和理清。相应地，如果有访问函数，请使用 getVal() 和 setVal(‘hello’) 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  get age() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set age(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="accessors--boolean-prefix"></a><a name="23.3"></a></p>
</li>
<li><p><a href="#accessors--boolean-prefix">23.3</a> 如果属性或方法是 <code>boolean</code> 请使用 <code>isVal()</code> 或者 <code>hasVal()</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="accessors--consistent"></a><a name="23.4"></a></p>
</li>
<li><p><a href="#accessors--consistent">23.4</a> 可以创建 get() 和 set() 函数，但请保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  constructor(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(key, val) &#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="事件">事件</h2><p>  <a name="events--hash"></a><a name="24.1"></a></p>
<ul>
<li><p><a href="#events--hash">24.1</a> 当给事件传递数据时（无论是 DOM 事件还是 Backbone 事件），传递一个带索引的对象而不是原始值。这样随后的贡献者可以在不更新每个处理函数的情况下添加更多数据。例如，相比于： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, listingId) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>不如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; listingId: listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, data) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
</li>
</ul>
<h2 id="jQuery">jQuery</h2><p>  <a name="jquery--dollar-prefix"></a><a name="25.1"></a></p>
<ul>
<li><p><a href="#jquery--dollar-prefix">25.1</a> 请给 jQuery对象加上 <code>$</code> 前缀。 jscs: <a href="http://jscs.info/rule/requireDollarBeforejQueryAssignment" target="_blank" rel="external"><code>requireDollarBeforejQueryAssignment</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebarBtn = $(<span class="string">'.sidebar-btn'</span>);</span><br></pre></td></tr></table></figure>
<p><a name="jquery--cache"></a><a name="25.2"></a></p>
</li>
<li><p><a href="#jquery--cache">25.2</a> 缓存 jQuery 查询。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="jquery--queries"></a><a name="25.3"></a></p>
</li>
<li><p><a href="#jquery--queries">25.3</a> DOM查询请使用自上而下 <code>$(&#39;.sidebar ul&#39;)</code> 或者 父 &gt; 子 <code>$(&#39;.sidebar &gt; ul&#39;)</code>。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="external">jsPerf</a></p>
<p><a name="jquery--find"></a><a name="25.4"></a></p>
</li>
<li><p><a href="#jquery--find">25.4</a> 请在 jQuery 对象中查询时使用 <code>find</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="ECMAScript_5_兼容性">ECMAScript 5 兼容性</h2><p>  <a name="es5-compat--kangax"></a><a name="26.1"></a></p>
<ul>
<li><a href="#es5-compat--kangax">26.1</a> 参见 <a href="https://twitter.com/kangax/" target="_blank" rel="external">Kangax</a> 的 ES5 <a href="http://kangax.github.io/es5-compat-table/" target="_blank" rel="external">compatibility table</a>.</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="ECMAScript_6_风格">ECMAScript 6 风格</h2><p>  <a name="es6-styles"></a><a name="27.1"></a></p>
<ul>
<li><a href="#es6-styles">27.1</a> 以下是 ES6 特性的链接集合。</li>
</ul>
<ol>
<li><a href="#箭头函数">箭头函数</a></li>
<li><a href="#类_与_构造器">类</a></li>
<li><a href="#es6-object-shorthand">对象快捷</a></li>
<li><a href="#es6-object-concise">对象简洁</a></li>
<li><a href="#es6-computed-properties">对象可计算属性</a></li>
<li><a href="#es6-template-literals">模板字符串</a></li>
<li><a href="#解构">解构</a></li>
<li><a href="#es6-default-parameters">默认参数</a></li>
<li><a href="#es6-rest">Rest</a></li>
<li><a href="#es6-array-spreads">数组扩散符</a></li>
<li><a href="#引用">Let 和 Const</a></li>
<li><a href="#迭代器_与_生成器">迭代器和生成器</a></li>
<li><a href="#模块">模块</a></li>
</ol>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="测试">测试</h2><p>  <a name="testing--yup"></a><a name="28.1"></a></p>
<ul>
<li><p><a href="#testing--yup">28.1</a> <strong>好呀好呀</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="testing--for-real"></a><a name="28.2"></a></p>
</li>
<li><a href="#testing--for-real">28.2</a> <strong>不了，但是正经地</strong>:<ul>
<li>无论使用哪种测试框架都需要写测试用例。</li>
<li>尽量编写许多小而纯的函数，并且最小化变动发生的地方。</li>
<li>小心 stubs 和 mocks 。可能使得测试变得脆弱。</li>
<li>Airbnb 主要使用 <a href="https://www.npmjs.com/package/mocha" target="_blank" rel="external"><code>mocha</code></a> 。<a href="https://www.npmjs.com/package/tape" target="_blank" rel="external"><code>tape</code></a> 偶尔也会用来测试小的，独立的模块。</li>
<li>100% 测试覆盖是一个很好的努力目标，尽管并不是每次都能做到。</li>
<li>无论何时修复一个 bug ，<em>请编写回归测试</em>，被修复又没有回归测试的 bug 基本上肯定会在将来出现。</li>
</ul>
</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
<h2 id="性能">性能</h2><ul>
<li><a href="http://www.kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="external">论布局和 web 性能</a></li>
<li><a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">String vs Array 拼接</a></li>
<li><a href="http://jsperf.com/try-catch-in-loop-cost" target="_blank" rel="external">Try/Catch 在循环中的代价</a></li>
<li><a href="http://jsperf.com/bang-function" target="_blank" rel="external">爆炸函数</a></li>
<li><a href="http://jsperf.com/jquery-find-vs-context-sel/13" target="_blank" rel="external">jQuery Find vs Context, Selector</a></li>
<li><a href="http://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="external">innerHTML vs textContent for script text</a></li>
<li><a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">长字符串拼接</a></li>
<li><a href="https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta" target="_blank" rel="external">JavaScript 的函数如 <code>map()</code> ，<code>reduce()</code> 和 <code>filter()</code> 比遍历数组更优化吗？</a></li>
<li>更多…</li>
</ul>
<p><strong><a href="#Airbnb_JavaScript_Style_Guide">↑ 回到顶部</a></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Airbnb JavaScript 的编码风格 原文地址: <a href="https://github.com/airbnb/javascript">Airbnb/JavaScript</a></p>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://en.ors-sro.com/tags/JavaScript/"/>
    
      <category term="翻译" scheme="http://en.ors-sro.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[烦人的 null]]></title>
    <link href="http://en.ors-sro.com/Anonying-null/"/>
    <id>http://en.ors-sro.com/Anonying-null/</id>
    <published>2016-06-10T06:31:38.000Z</published>
    <updated>2016-07-29T08:26:41.556Z</updated>
    <content type="html"><![CDATA[<p>经常写程序的童鞋一定会遇到 <code>null Exception</code> ，但是大部分情况下出现 <code>null Exception</code> 就意味着错误地使用了 <code>null</code></p>
<a id="more"></a>
<h2 id="null_是什么">null 是什么</h2><p>null 被设计为用于表达应用类型的缺失。可是不得不说这个设计是失败的。因为 null 用起来方便了所以很多地方都用 null 而不是<strong>异常 (Exception) </strong>。</p>
<p>通常程序出错都是与 null 相关的 <code>null Exception</code> 。这是自然的，如果数据正常，也就是输入是正确的，自然就不会有问题。总不可能要求数据时时刻刻都是正确的吧？</p>
<p>再谈到这个问题时，先看一下另一种类型—— <strong>值类型</strong> 是怎么解决这个问题的。</p>
<p>值类型从来都不会出错。因为，很简单，值类型没有 null 的情况。 值类型拥有默认值。比如 <code>int</code> 的默认值是 0 ，所以程序上只会出逻辑问题，而不是运行时错误(异常)。值类型出错最常见的场景是，这个值怎么会是0啊？哦，原来是这个 <code>int</code> 类型没有初始化。值类型没有 null 所以不会去做空检查(null Check)。比如值类型 <code>bool</code> 只有 <code>true</code> 和 <code>false</code>，所以使用 <code>bool</code> 类型的时候通常是这样的。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isFinish = IsDownloadFinish();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFinish)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Ding. X-art Download Finish</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Nope. Plz Go to bed.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而不是</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isFinish = IsDownloadFinish();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isFinish != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(isFinish)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Ding. X-art Download Finish</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//Nope. Plz Go to bed.</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Output X is null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种画蛇添足的做法。反之如果<strong>引用类型</strong>不做空检查就直接使用值，出问题程序很可能直接崩溃。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">int</span>&gt; studentNos = GetStudentNos();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> nos <span class="keyword">in</span> studentNos) <span class="comment">//No null check and Crash when null.</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Output Nos..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="null_is_nothing_but_everything">null is nothing but everything</h2><p>null 就像是病毒，能够躲过类型检查。一旦某个地方使用了 null 它就像病毒一样扩散开来。最后整个程序不得不充满空检查。</p>
<p>null 是二义的。它即可表示变量没有初始化，也可以表示值不存在。</p>
<p>null 什么都不是，它既不是 <code>List&lt;T&gt;</code> 类型，也不是 <code>String</code> 类型。甚至没有一个类型是 null。</p>
<p>null 又什么都是，它可以充当 <code>List&lt;T&gt;</code> ，也可以充当 <code>String</code> 类型。比如从字符串数组中查找以特定的字符串结尾时。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">FindStudent</span>(<span class="params">String[] Students,<span class="keyword">char</span> c</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">foreach</span>(<span class="keyword">var</span> student <span class="keyword">in</span> Students)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.EndWith(c))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> student;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数定义的最后返回的 null 是最常见的一种误用 null 的情况。而这个函数可以编译通过，代表着编译器认可 null 是 <code>String</code> 类型。</p>
<p>事实上并不是只有 <code>String</code> 类型会是这样，几乎所有的引用类型编译器都允许返回 null。 所以在使用数据的时候必须做空检查，因为不知道这个数据是否为空。这看起来是很正常的事情，毕竟输入有时候就是错的。但是问题的关键不在于不允许错误的输入，而在于使用了错误的方式来表达数据的异常。</p>
<h2 id="没有_null_的日子">没有 null 的日子</h2><p>null 看起来是现代编程语言的标配。其实不然，有不少语言是没有 null 的。比如以纯函数式编程而著称 <code>Haskell</code> 是没有 null 的。那么 <code>Haskell</code> 是怎么应对数据异常，或者说怎么表达数据不存在这种情况的呢？</p>
<p><strong>联合类型</strong> (Union Type)</p>
<p>这个联合类型指的不是C语言里面的Union类型。而是由多种类型组成的类型。在传统的编程语言类型是互斥的。例如一个变量要么是 <code>String</code> 类型要么是 <code>int</code> 类型。绝对不会出现即使 <code>String</code> 类型又是 <code>int</code> 类型的情况。</p>
<p>在 <code>Haskell</code> 中引入一种联合类型 <code>Maybe</code> 用于表达变量可能有值，也可能没有值。</p>
<p>因为缺少对值缺失的表达方式，在使用 <code>int</code> 类型的时候通常使用 -1 来表示数据异常也就是值缺失的情况。在值不会取到 -1 情况下这是没问题的。万一值可以取到 -1 呢？无计可施。</p>
<p>在 <code>Haskell</code> 中 <code>Maybe</code> 的 <code>Just</code> 类型用于表示有某种值类型， <code>None</code> 用于表示没有值类型。</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Maybe</span> a = get a</span><br><span class="line"><span class="title">case</span> a <span class="keyword">of</span></span><br><span class="line">  <span class="type">Just</span> value -&gt; dosomething a</span><br><span class="line">  <span class="type">Nothing</span>    -&gt; show error</span><br></pre></td></tr></table></figure>
<p>看起来和使用 null 表示值缺失的情况并没有什么区别。实际上天差地别。 <code>Maybe</code> 中的 <code>None</code> 是有类型的，类型就是 <code>None</code>。而 null 却不是。null 是无类型的，它的类型不是 null。最重要的是，使用 <code>Maybe</code> 类型编译器会强制你去检查两种类型，迫使你去应对各种情况。换言之，使用 <code>Maybe</code> 检查和取值是原子操作，不可能取值而不检查。而 null 不是。编译器允许返回 null ，而且允许在使用的时候不检查即可取值。没错说了这么多，这就是 null 的万恶之源。理论上只要每次使用引用类型时做空检查就不会出现程序崩溃的问题。但是懒惰是人的天性，明明可以直接使用为什么还要做复杂的空检查。比如</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class Student</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">string</span> Name,</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> No,</span><br><span class="line">	pubilc <span class="keyword">string</span>[] Lessons, 	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student s</span><br><span class="line"></span><br><span class="line"><span class="comment">//...Init...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s != <span class="keyword">null</span> &amp;&amp; s.Lessons != <span class="keyword">null</span> &amp;&amp; s.Lessons[<span class="number">0</span>] != <span class="keyword">null</span>) <span class="comment">//WTF??</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Output First Lesson is s.Lessons[0]	</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么直接使用值不做空检查。等到有问题直接报异常就可以了。为什么不这么做呢。首先可能有 null 出现的地方直接使用，出现异常，而忽略是一种很被动的编程方式。相当于知道了问题的存在但是我不管，问题就是这样，爱咋咋地。其次在移动平台上异常如果没有被捕获(Catch)，整个应用很可能就直接崩溃了。就会上演经典的找Bug场景：找了半天的Bug，原来是这个地方为 null。如果一开始检查 null 然后做出应对，比如强制退出，或者界面提示错误码，又或者继续运行。都不会增加无意义的调试时间，用户的体验也更好。</p>
<h2 id="解决方案">解决方案</h2><p>解决方案很简单：避免 null 或 合理地使用 null</p>
<h3 id="避免_null">避免 null</h3><p>无论是 <code>Haskell</code> 的 <code>Maybe</code> 还是 <code>Java8</code> 的 <code>Optional</code> 在其他语言都有相应的实现。选择喜欢的即可。但是请一定要检查和取值一起操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line">Optional&lt;String&gt; upperName = name.map((value) -&gt; value.toUpperCase());</span><br><span class="line">System.out.println(upperName.orElse(<span class="string">"No value found"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad</span></span><br><span class="line">Optional&lt;String&gt; upperName = name.map((value) -&gt; value.toUpperCase());</span><br><span class="line"><span class="keyword">if</span>((name.isPresent())&#123;</span><br><span class="line">	System.out.println(upperName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"No value found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Code from http://www.importnew.com/6675.html</span></span><br></pre></td></tr></table></figure>
<p>后者的做法跟直接空检查后再使用没有什么区别。</p>
<h3 id="合理地使用_null">合理地使用 null</h3><p>合理地使用 null 从合理地返回 null 开始</p>
<p>null 表达的是一种值缺失的情况而且值缺失是很正常的情况。 比如从列表中查找某些元素，找不到是很正常的情况，所以这可以返回 null。又比如获得人物的性别，如果文件读写出错了，应该抛出异常，而不是返回 null。因为出错了就不是一种正常的情况。 null 只应该承担正常的值缺失的情况，出错了就应该用异常去承担。</p>
<p>合理地使用 null 还需合理地初始化引用类型。</p>
<p>有些编程语言中引用类型的默认值是 null ，其实在业务逻辑中可以做的更好。比如 <code>String</code> 类型可以初始化为空字符串 <code>&quot;&quot;</code> ，<code>List&lt;T&gt;</code>类型可以初始化为空列表 <code>new List&lt;T&gt;()</code> 。在业务逻辑允许的情况下，函数出错时可以返回空字符串或者空列表。这样就不必做空检查了。搭配 <code>Foreach</code> 使用,如果是空列表，<code>foreach</code> 里面的逻辑不会运行，也就不会出错。初始化时没有引入 null ，调用函数时也没有引入 null ,自然就不会出现 null 的情况。</p>
<p>尽可能消除 null 避免 null 的传播。</p>
<p>比如查找一个人的地址，认为找不到是可接受的，就返回一个空字符串，如果认为找不到是不可接受的，请直接抛出异常。这个时候也不会返回 null。 自然不会产生 null 也不用做 <code>null Check</code> （但是要捕捉异常） 。</p>
<p>除此之外还有些小技巧可以用上。</p>
<p>如果你使用面向对象编程，可以引用某种类型相应的 null 类型。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Class Student</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> String Name,</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> No,</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span><br><span class="line">	</span>&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">"My name is "</span> + name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class nullStudent : Student</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"></span>)</span><br><span class="line">	</span>&#123;</span><br><span class="line">		Console.WriteLine(<span class="string">""</span>);</span><br><span class="line">		<span class="comment">// or</span></span><br><span class="line">		<span class="comment">// Console.WriteLine("I don't have name");</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; students = GetAllStudents();</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">FindStudent</span>(<span class="params"><span class="keyword">string</span> name</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">foreach</span>(student <span class="keyword">in</span> students)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.name == name)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> student;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> nullStudent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student s = <span class="keyword">new</span> nullStudent();</span><br><span class="line"></span><br><span class="line">s = FindStudent(<span class="string">"LeiFeng"</span>);</span><br><span class="line"></span><br><span class="line">s.Say(); <span class="comment">//No null check.</span></span><br></pre></td></tr></table></figure>
<p>如果你有福能使用<code>C# 6.0</code>，你可以使用新的操作符 <code>?.</code> 。这个操作符只会在不是 null 的情况下执行。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Before C# 6.0</span></span><br><span class="line"><span class="keyword">if</span>(s != <span class="keyword">null</span> &amp;&amp; s.name != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">	Console.WriteLine(s.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C# 6.0</span></span><br><span class="line">Console.WriteLine(s?.name);</span><br></pre></td></tr></table></figure>
<p>但是请注意，在第一次使用某个值得时候最后手动做空检查，如果为 null 就报错(出现这种情况其实应该使用异常)。这样方便调试。之后第二次使用某个值时就直接使用 <code>?.</code>吧。</p>
<h2 id="最后吐槽">最后吐槽</h2><p>null 真是一个烦人的小妖精。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经常写程序的童鞋一定会遇到 <code>null Exception</code> ，但是大部分情况下出现 <code>null Exception</code> 就意味着错误地使用了 <code>null</code></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[NGUI学习笔记之搭建可拖动面板]]></title>
    <link href="http://en.ors-sro.com/NGUI-build-a-draggable-panel/"/>
    <id>http://en.ors-sro.com/NGUI-build-a-draggable-panel/</id>
    <published>2016-04-04T05:39:00.000Z</published>
    <updated>2016-04-04T05:39:58.831Z</updated>
    <content type="html"><![CDATA[<p>往下拖可以看到内容噢~</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>往下拖可以看到内容噢~</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[NGUI学习笔记之Atlas和UITexture的取舍]]></title>
    <link href="http://en.ors-sro.com/NGUI-Atlas-UITexture-notes/"/>
    <id>http://en.ors-sro.com/NGUI-Atlas-UITexture-notes/</id>
    <published>2016-04-04T05:37:29.000Z</published>
    <updated>2016-04-04T05:39:41.732Z</updated>
    <content type="html"><![CDATA[<p>任性随便选</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>任性随便选</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Promise异步编程学习笔记]]></title>
    <link href="http://en.ors-sro.com/Promise-notes/"/>
    <id>http://en.ors-sro.com/Promise-notes/</id>
    <published>2016-04-03T07:35:56.000Z</published>
    <updated>2016-04-03T07:36:37.050Z</updated>
    <content type="html"><![CDATA[<p>Promise.Reject(‘鸽了’)</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>Promise.Reject(‘鸽了’)</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lambda表达式学习笔记]]></title>
    <link href="http://en.ors-sro.com/Lambda-notes/"/>
    <id>http://en.ors-sro.com/Lambda-notes/</id>
    <published>2016-04-03T07:34:15.000Z</published>
    <updated>2016-04-03T07:34:50.737Z</updated>
    <content type="html"><![CDATA[<p>由于没有去过希腊，所以看不懂希腊字母，学习失败！</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>由于没有去过希腊，所以看不懂希腊字母，学习失败！</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C#学习笔记之命名规范]]></title>
    <link href="http://en.ors-sro.com/C#-naming-style/"/>
    <id>http://en.ors-sro.com/C#-naming-style/</id>
    <published>2016-04-03T07:30:52.000Z</published>
    <updated>2016-04-03T07:31:48.284Z</updated>
    <content type="html"><![CDATA[<p>现在改用c++做底层了，不用C#了</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>现在改用c++做底层了，不用C#了</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[旧版NGUI层级研究]]></title>
    <link href="http://en.ors-sro.com/Study-on-NGUI-depth/"/>
    <id>http://en.ors-sro.com/Study-on-NGUI-depth/</id>
    <published>2016-04-03T07:29:51.000Z</published>
    <updated>2016-04-03T07:30:19.305Z</updated>
    <content type="html"><![CDATA[<p>换新版NGUI了。所以就不研究了呃呃呃</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>换新版NGUI了。所以就不研究了呃呃呃</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Optional学习笔记]]></title>
    <link href="http://en.ors-sro.com/Optional-notes/"/>
    <id>http://en.ors-sro.com/Optional-notes/</id>
    <published>2016-04-03T07:27:04.000Z</published>
    <updated>2016-04-03T07:27:34.496Z</updated>
    <content type="html"><![CDATA[<p>学习到一半就玩游戏去了，然后就没然后了</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>学习到一半就玩游戏去了，然后就没然后了</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Monad学习笔记]]></title>
    <link href="http://en.ors-sro.com/Monad-notes/"/>
    <id>http://en.ors-sro.com/Monad-notes/</id>
    <published>2016-04-03T07:25:56.000Z</published>
    <updated>2016-04-04T08:55:39.994Z</updated>
    <content type="html"><![CDATA[<p>都说不要写Monad教程了。所以下面就没有了= =</p>
<a id="more"></a>
<h2 id="Monad是什么">Monad是什么</h2><blockquote>
<p>Monad不就是幺半群上的自函子么？    —— wadler</p>
</blockquote>
<p>这是将Monad引入Haskell的人对Monad的解释。没有范畴论基础的人估计听了也是一知半解。其实Monad是一种特殊的函数，并没有看上去那么复杂。有栗子为证。</p>
<h3 id="大写的数字">大写的数字</h3><p>在金融业中填写金额时通常会用到大写的数字，如<code>壹</code>、<code>贰</code>、<code>叁</code>、<code>肆</code>、<code>伍</code>、<code>陆</code>、<code>柒</code>、<code>捌</code>、<code>玖</code>等。分别对应阿拉伯数字中的1到9。现在需求是编写程序实现大写数字的相加。例如<code>壹 + 壹 = 贰</code>。这个需求不难，只需要转化成数字运算把结果转化成大写数字即可。但在这个简单的例子中就有Monad的存在。</p>
<h3 id="需求分析">需求分析</h3><p>目前有两个集合，一个<strong>整数</strong>集合，一个<strong>大写整数</strong>集合。所以需要一个函数把<strong>整数</strong>转化成<strong>大写整数</strong>，其实就是数学上的映射，<strong>整数</strong> -&gt; <strong>大写整数</strong>。把<strong>整数</strong>集合按照一定的规则映射到<strong>大写整数</strong>集合。<br>同时还需要一个函数把<strong>大写整数</strong>集合映射到<strong>整数</strong>集合。映射的规则是很明显的</p>
<blockquote>
<p>1 ⇔ 壹<br>2 ⇔ 贰<br>3 ⇔ 叁<br>…<br>9 ⇔ 玖</p>
</blockquote>
<h3 id="码代码">码代码</h3><p>映射关系很自然就联想到使用<code>Map</code>这种数据结构。以<code>C#</code>为例，<code>Map</code>在<code>C#</code>中的实现是<code>Dictionary</code>。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Public Const Dictionary&lt;<span class="keyword">int</span>,<span class="keyword">string</span>&gt; digit2CapDigit = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>,<span class="keyword">string</span>&gt;()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="number">1</span>,壹</span><br><span class="line">	<span class="number">2</span>,贰</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编写<strong>整数</strong>集合映射为<strong>大写整数</strong>集合的函数<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">string</span> <span class="title">ToCap</span>(<span class="params"><span class="keyword">int</span> digit</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//if digit between 0~9</span></span><br><span class="line">	<span class="keyword">return</span> digit2CapDigit[digit];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编写这样一个神奇的函数，他有两个参数。第一个参数是<strong>大写整数</strong>，第二个参数是一个接收<strong>整数</strong>返回<strong>大写整数</strong>的函数。最后这个神奇的函数返回<strong>大写整数</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">string</span> <span class="title">MagicFunc</span>(<span class="params"><span class="keyword">string</span> caps,Func&lt;<span class="keyword">int</span>,<span class="keyword">string</span>&gt; func</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> func(ToInt(Caps));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为了应用这个神奇的函数，需要传递一个函数作为第二个参数。现在编写一个函数，能够将输入的<strong>整数</strong>加一并返回对应的<strong>大写整数</strong><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">string</span> <span class="title">Plus</span>(<span class="params"><span class="keyword">int</span> digit,<span class="keyword">string</span> caps</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ToCap(digit + ToInt(Caps));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在计算<code>壹 + 壹</code>可以这么来<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MagicFun(<span class="string">"壹"</span>,Plus(ToInt(<span class="string">"壹"</span>)));</span><br></pre></td></tr></table></figure></p>
<h2 id="为什么要用Monad">为什么要用Monad</h2><h2 id="怎么用Monad">怎么用Monad</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>都说不要写Monad教程了。所以下面就没有了= =</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Chrome插件编写]]></title>
    <link href="http://en.ors-sro.com/Develop-a-chrome-plugin/"/>
    <id>http://en.ors-sro.com/Develop-a-chrome-plugin/</id>
    <published>2016-04-03T07:25:00.000Z</published>
    <updated>2016-04-03T07:25:19.611Z</updated>
    <content type="html"><![CDATA[<p>这个坑就更大了哈哈哈</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>这个坑就更大了哈哈哈</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unity图片压缩格式]]></title>
    <link href="http://en.ors-sro.com/Unity-picture-compression/"/>
    <id>http://en.ors-sro.com/Unity-picture-compression/</id>
    <published>2016-04-03T07:23:35.000Z</published>
    <updated>2016-04-03T07:24:21.476Z</updated>
    <content type="html"><![CDATA[<p>先挖坑，之后再填</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<p>先挖坑，之后再填</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[压缩博客图片]]></title>
    <link href="http://en.ors-sro.com/Compress-blog-image/"/>
    <id>http://en.ors-sro.com/Compress-blog-image/</id>
    <published>2015-08-04T13:56:42.000Z</published>
    <updated>2015-08-04T14:44:51.671Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>使用静态博客，空间的容量都是有一定的上限。通常情况下图片占据了空间的大部分。虽然说不要过早的优化。我也不知道能不能写到1G大小左右的博客（神奇的衡量方式- -）但当我发现<strong>PNG</strong>图片一般还有50%左右的空间可以压缩后就把持不住了。</p>
<a id="more"></a>
<h2 id="压缩工具">压缩工具</h2><p>目前两个比较好的<strong>PNG</strong>压缩工具有</p>
<ol>
<li><a href="https://tinypng.com/" target="_blank" rel="external">Tiny PNG</a></li>
<li>PhotoShop</li>
</ol>
<p>我尝试使用了<strong>Tiny Png</strong>和<strong>PhotoShop</strong>压缩同一张图片。结果是<strong>PhotoShop</strong>费心费力压缩后还比不上<strong>Tiny PNG</strong>的简单粗暴的压缩。</p>
<h2 id="压缩原理">压缩原理</h2><h2 id="后续">后续</h2><p>想为<strong>Hexo</strong>编写一个<strong>Tiny PNG</strong>的插件。但是最近实在是太忙了= =</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>使用静态博客，空间的容量都是有一定的上限。通常情况下图片占据了空间的大部分。虽然说不要过早的优化。我也不知道能不能写到1G大小左右的博客（神奇的衡量方式- -）但当我发现<strong>PNG</strong>图片一般还有50%左右的空间可以压缩后就把持不住了。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[yilia主题使用体验]]></title>
    <link href="http://en.ors-sro.com/Try-theme-yilia/"/>
    <id>http://en.ors-sro.com/Try-theme-yilia/</id>
    <published>2015-07-27T12:58:39.000Z</published>
    <updated>2015-07-27T13:36:55.496Z</updated>
    <content type="html"><![CDATA[<p><strong>yilia</strong>主题结合了<strong>pacman</strong>和常见的平板式主题。界面清爽简洁。在使用过程中，我发现了一些作者没有公布的接口因此针对自身的情况对主题进行了修改。</p>
<a id="more"></a>
<h2 id="yilia主题现存问题">yilia主题现存问题</h2><p>虽然作者说<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">不会支持低版本的IE</a>，但在我电脑上<strong>IE11</strong>打开时整个排版全都乱了。调出控制台查看发现是渲染引擎的问题。默认的渲染引擎被降到了<strong>IE7</strong>,经过测试<strong>yilia</strong>主题至少需要<strong>IE9</strong>排版才不会乱。问题的关键是这个现象只在我的电脑上出现。朋友的电脑的<strong>IE11</strong>访问排版并不会乱。我查看了一下默认的渲染引擎是<strong>Edge</strong>。我也不清楚是怎么回事，所以只好自己修改主题，加上强制使用<strong>IE9</strong>渲染引擎的代码。添加到了<code>\yilia\layout\_partial\head.ejs</code>文件下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"x-ua-compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=9"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重启电脑后一切都好了。</p>
<h2 id="小坑">小坑</h2><ol>
<li><p>多说ID<br> 我原以为<strong>多说ID</strong>应在是写在整个网站的配置文件<strong>_config.yaml</strong>中，但我仔细查看了yilia主题的配置发现<code>duoshuo: true</code>应该是没问题的。但是却出现了别人的评论。我去了主题作者的博客发现也有人遇到这个问题。后来我查看了多说的<strong>JS</strong>代码才发现。原来多说的ID被设置成了<strong>true</strong>。虽然作者有在主题文件中提示改为<strong>duoshuo key</strong>但是下面的值是<strong>true</strong>太容易误导了。作者应该这么改比较好。</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#26159;&#21542;&#24320;&#21551;&#22810;&#35828;&#35780;&#35770;&#65292;&#22635;&#20889;&#20320;&#22312;&#22810;&#35828;&#30003;&#35831;&#30340;&#39033;&#30446;&#21517;&#31216; duoshuo: duoshuo-key&#10;#&#33509;&#20351;&#29992;disqus&#65292;&#35831;&#22312;&#21338;&#23458;config&#25991;&#20214;&#20013;&#22635;&#20889;disqus_shortname&#65292;&#24182;&#20851;&#38381;&#22810;&#35828;&#35780;&#35770;&#10;duoshuo: your-duoshuo-key #&#60;-&#36825;&#37324;&#36755;&#20837;&#20320;&#30340;&#22810;&#35828;ID</span><br></pre></td></tr></table></figure>
</li>
<li><p>站长昵称没有中文字体<br> 网站头像下面就是站长昵称。主题作者的昵称是英文的所以看不出来问题。但我的是中文的，很容易看出来因为没有指定中文字体，而被默认设为了宋体。非常难看。这里我本来想修改他的类加上<code>font-family:&#39;MicroSoft YaHei&#39;</code>但尝试了几种方案都没有奏效。只好直接加行内样式了。解决方案如下。打开<code>themes\yilia\layout\_partial\left-col.ejs</code>找到<code>&lt;hgroup&gt;</code>标签。改为以下代码。</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">hgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"header-author"</span> <span class="attribute">style</span>=<span class="value">"font-family: 'MicroSoft YaHei'"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span><span class="tag">&lt;<span class="title">%=theme.author%</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>头像的圆形遮罩<br> 我把头像换了之后发现两边居然还有蓝色的背景。最后决定将头像的背景颜色改为我头像自带的背景颜色。</p>
</li>
</ol>
<h2 id="隐藏参数">隐藏参数</h2><p>有些参数作者并没有在<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">主题介绍页</a>中说明，但我观察作者的博客发现了这些特性的存在。</p>
<ol>
<li><p>博客介绍<br> 头像下面还可以有一行文字用于介绍博客。对应的参数是</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#subtitle&#10;subtitle: &#21548;&#35828;&#25302;&#38795;&#25165;&#26159;&#26412;&#20307;</span><br></pre></td></tr></table></figure>
<p> 只需要将这个参数添加到主题的<strong>_config.yaml</strong>中即可。</p>
</li>
<li><p>其他<br> 其他小的想不起来了。改天再来填坑吧。（根本不可能好吗，之前的坑还没填呢！再摔！）</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>yilia</strong>主题结合了<strong>pacman</strong>和常见的平板式主题。界面清爽简洁。在使用过程中，我发现了一些作者没有公布的接口因此针对自身的情况对主题进行了修改。</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://en.ors-sro.com/tags/Hexo/"/>
    
      <category term="yilia" scheme="http://en.ors-sro.com/tags/yilia/"/>
    
      <category term="主题" scheme="http://en.ors-sro.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MDL+AngularJS制作TodoList]]></title>
    <link href="http://en.ors-sro.com/Develop-a-todo-list-with-MDL-and-AngularJS/"/>
    <id>http://en.ors-sro.com/Develop-a-todo-list-with-MDL-and-AngularJS/</id>
    <published>2015-07-27T12:44:29.000Z</published>
    <updated>2016-04-03T06:58:18.687Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>有时候会有很多事情要做。但又不是私事不想记在手机上的<strong>Inbox</strong>上。申请马甲邮箱网页登陆<strong>Inbox</strong>还得在手机客户端激活一下才能使用。太麻烦了。找了一段时间没有找到比较简单纯粹的<strong>TodoList</strong>应用。干脆自己做一个。顺便学习<strong>AngularJS</strong>和<strong>Material Design Light</strong>的用法。</p>
<a id="more"></a>
<h2 id="框架简介">框架简介</h2><h3 id="Material_Design_Lite(MDL)">Material Design Lite(MDL)</h3><p><a href="http://www.getmdl.io/" target="_blank" rel="external"><strong>Material Design Lite</strong></a>是<strong>Google</strong>推出的一个<strong>CSS</strong>框架，作用类似于<strong>Bootstrap</strong>，用于快速开发出符合<strong>Material Design</strong>风格的网页。</p>
<h3 id="AngularJS">AngularJS</h3><p><a href="https://angularjs.org/" target="_blank" rel="external"><strong>AngularJS</strong></a>是<strong>Google</strong>推出的一个<strong>JS</strong>框架，用于制作网页应用。其特点是<strong>双向数据绑定</strong>，<strong>MVC</strong>等。</p>
<h2 id="需求定义">需求定义</h2><p>这个<strong>清单</strong>（TodoList）需求很简单。只需要能够记录待办事项即可。稍微详细的需求如下</p>
<ol>
<li>支持输入待办事项</li>
<li>支持标记待办事项为完成</li>
<li>支持储存。关闭网页后再打开待办事项还在</li>
<li>拥有良好的交互界面</li>
</ol>
<h2 id="实现">实现</h2><h3 id="实现思路">实现思路</h3><p>其实完全可以用纯<strong>HTML</strong>和<strong>jQuery</strong>来制作。甚至不需要<strong>jQuery</strong>只需要原生<strong>JS</strong>。整个页面只需要有一个输入框，一个确定按钮，一个列表(无序列表<code>&lt;ul&gt;</code>或有序列表<code>&lt;ol&gt;</code>均可)。使用<strong>jQuery</strong>来做就是一个操纵<strong>DOM</strong>的过程。而使用<strong>AngularJS</strong>框架的<strong>双向数据绑定</strong>功能就不需要操纵<strong>DOM</strong>，只需要关注逻辑，修改数据存储的变量即可。</p>
<h3 id="获取Material_Design_Lite">获取Material Design Lite</h3><p>打开<a href="http://www.getmdl.io/started/index.html" target="_blank" rel="external">Material Design Lite的起步页面</a>，选择获取方式。因为国内连接比较慢，所以我选择了下载的方式。</p>
<h3 id="获取AngularJS">获取AngularJS</h3><p>打开<a href="https://angularjs.org/" target="_blank" rel="external">AngularJS</a>的主页，点击<strong>Download</strong>，因为要开发所以选择<strong>Uncompressed</strong>不压缩版。</p>
<h3 id="第一版">第一版</h3><p>工程的目录结构如下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">F:\</span><br><span class="line">├─MDL</span><br><span class="line">│  └─material.css</span><br><span class="line">├─AngularJS</span><br><span class="line">│  └─angular.js</span><br><span class="line">└─TodoList</span><br><span class="line">   └─TodoList.html</span><br></pre></td></tr></table></figure>
<ol>
<li><p>引入<strong>MDL</strong>和<strong>AngularJS</strong><br> 通过<code>&lt;script&gt;</code>标签和<code>&lt;link&gt;</code>标签在<code>&lt;head&gt;</code>引入即可</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"../MDL/material.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"../MDL/material.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"../AngularJS/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>搭建<strong>AngularJS</strong>的Hello World<br> 因为会写一些<strong>AngularJS</strong>代码。所以我们在TodoList文件夹下新建一个<strong>Javascript</strong>文件，名称是<strong>todolist.js</strong>。输入以下代码</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todoList = angular.module(<span class="string">'todo-list'</span>,[]);</span><br></pre></td></tr></table></figure>
<p> 在TodoList.html中的<code>&lt;html&gt;</code>标签加入属性<code>ng-app</code>，在<code>&lt;body&gt;</code>中添加以下代码。</p>
 <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">ng-model</span>=<span class="value">"helloworld"</span>&gt;</span><span class="tag">&lt;<span class="title">button</span>&gt;</span>DO IT<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello,</span><span class="expression">&#123;&#123;<span class="variable">helloworld</span>&#125;&#125;</span><span class="xml"> !<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="第一版测试">第一版测试</h3><p>运行发现输入什么就会显示什么。没有使用任何<strong>Javascript</strong>代码就实现了输入的数据同步到<strong>helloworld</strong>这个变量（暂且这么认为），<strong>helloworld</strong>变量的改变有同步到了引用它的地方这一个双向的过程。</p>
<p>目前的问题有</p>
<ol>
<li>没有实现记事功能</li>
<li>太丑</li>
</ol>
<h3 id="第二版">第二版</h3><p><strong>Hello World</strong>搭建完毕后，接下来就是引入<strong>Material Design Lite</strong>的样式。首先我们需要一个<strong>输入框</strong>和<strong>按钮</strong>的样式，还有一个<strong>列表</strong>的样式。<strong>按钮</strong>的样式可以在<a href="http://www.getmdl.io/components/index.html#buttons-section" target="_blank" rel="external">Material Design Lite的按钮组件</a>页面获取。这里选择了带<strong>ripple</strong>的按钮，样式如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"</span>&gt;</span></span><br><span class="line">  Button</span><br><span class="line"><span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>输入框</strong>的样式可以在<a href="http://www.getmdl.io/components/index.html#textfields-section" target="_blank" rel="external">Material Design Lite的输入框组件</a>页面获取。这里选择了简单的输入框。样式如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Simple Textfield --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mdl-textfield mdl-js-textfield textfield-demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"mdl-textfield__input"</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"sample1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"mdl-textfield__label"</span> <span class="attribute">for</span>=<span class="value">"sample1"</span>&gt;</span>Text...<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>列表</strong>的样式可以在<a href="http://www.getmdl.io/components/index.html#tables-section" target="_blank" rel="external">Material Design Lite的表格组件</a>页面获取。这里是因为看起来差不多才选择了表格组件。样式如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">table</span> <span class="attribute">class</span>=<span class="value">"mdl-data-table mdl-js-data-table mdl-data-table--selectable mdl-shadow--2dp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">th</span> <span class="attribute">class</span>=<span class="value">"mdl-data-table__cell--non-numeric"</span>&gt;</span>Material<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">th</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">th</span>&gt;</span>Unit price<span class="tag">&lt;/<span class="title">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span> <span class="attribute">class</span>=<span class="value">"mdl-data-table__cell--non-numeric"</span>&gt;</span>Acrylic (Transparent)<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>25<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>$2.90<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span> <span class="attribute">class</span>=<span class="value">"mdl-data-table__cell--non-numeric"</span>&gt;</span>Plywood (Birch)<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>50<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>$1.25<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span> <span class="attribute">class</span>=<span class="value">"mdl-data-table__cell--non-numeric"</span>&gt;</span>Laminate (Gold on Blue)<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>10<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">td</span>&gt;</span>$2.35<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将代码整合一下。完整的代码如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"../MDL/material.min.css"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"../MDL/material.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"../AngularJS/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">form</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"mdl-textfield mdl-js-textfield textfield-demo"</span>&gt;</span></span><br><span class="line">  	  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"mdl-textfield__input"</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"sample1"</span> <span class="attribute">ng-model</span>=<span class="value">"helloworld"</span> /&gt;</span></span><br><span class="line">  	  <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"mdl-textfield__label"</span> <span class="attribute">for</span>=<span class="value">"sample1"</span>&gt;</span>想做啥？<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent"</span>&gt;</span>DO IT<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">table</span> <span class="attribute">class</span>=<span class="value">"mdl-data-table mdl-js-data-table mdl-data-table--selectable mdl-shadow--2dp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>Hello, &#123;&#123; helloworld &#125;&#125;!<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第二版测试">第二版测试</h3><p>虽然还是很丑，但是基本的外观还是有的。现在的主要问题有</p>
<ol>
<li>没有实现记事功能</li>
<li><del>太丑</del></li>
<li>丑</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>有时候会有很多事情要做。但又不是私事不想记在手机上的<strong>Inbox</strong>上。申请马甲邮箱网页登陆<strong>Inbox</strong>还得在手机客户端激活一下才能使用。太麻烦了。找了一段时间没有找到比较简单纯粹的<strong>TodoList</strong>应用。干脆自己做一个。顺便学习<strong>AngularJS</strong>和<strong>Material Design Light</strong>的用法。</p>]]>
    
    </summary>
    
      <category term="AngularJS" scheme="http://en.ors-sro.com/tags/AngularJS/"/>
    
      <category term="Material Design Lite" scheme="http://en.ors-sro.com/tags/Material-Design-Lite/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo多平台部署遇到的一个坑]]></title>
    <link href="http://en.ors-sro.com/Problem-in-hexo-deployment/"/>
    <id>http://en.ors-sro.com/Problem-in-hexo-deployment/</id>
    <published>2015-07-25T12:56:06.000Z</published>
    <updated>2015-07-27T12:39:40.815Z</updated>
    <content type="html"><![CDATA[<p>在尝试部署网站到Github和Gitcafe的时候，一直出现以下问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: http://hexo.io/do&#10;cs/troubleshooting.html&#10;JS-YAML: bad indentation of a mapping entry at line 75, column 8:&#10;       repo:&#10;           ^</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>尝试了各种解决方案</p>
<ol>
<li><p>方案一<br> 在repo:冒号后面加一个空格变成</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo: #&#60;-&#65283;&#21069;&#38754;&#26377;&#19968;&#20010;&#31354;&#26684; &#10;   github: git@github.com:rtafip/rtafip.github.io.git&#10;   gitcafe: https://gitcafe.com/rtafip/rtafip.git</span><br></pre></td></tr></table></figure>
<p> 还是报相同的错误</p>
</li>
<li><p>方案二<br> 将repo:git@github.com:rtafip/rtafip.github.io.git使用双引号包住</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo: &#10;   github: &#34;git@github.com:rtafip/rtafip.github.io.git&#34;&#10;   gitcafe: https://gitcafe.com/rtafip/rtafip.git</span><br></pre></td></tr></table></figure>
<p> 还是提示相同的问题</p>
</li>
</ol>
<p>……<br>……<br>……</p>
<p>最后要都要抓狂了才找到解决方案<br>原来的代码是这样的<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:&#10;  type: git&#10;   repo:  &#10;    github: git@github.com:rtafip/rtafip.github.io.git&#10;    gitcafe: https://gitcafe.com/rtafip/rtafip.git</span><br></pre></td></tr></table></figure></p>
<p>最后的代码是这样的<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:&#10;  type: git&#10;  repo:  &#10;    github: git@github.com:rtafip/rtafip.github.io.git&#10;    gitcafe: https://gitcafe.com/rtafip/rtafip.git</span><br></pre></td></tr></table></figure></p>
<p>看出区别了吗？</p>
<p>原来只是repo前面多了一个空格！！！</p>
<p>YAML真是一种脆弱的格式！多一个空格不行，少一个空格不行，空格位置不对不行。而且我也不知道怎么把这个空格引进来的。最重要是提示的位置不对啊。提示的是冒号后面啊。应该这么提示才对</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: http://hexo.io/do&#10;cs/troubleshooting.html&#10;JS-YAML: bad indentation of a mapping entry at line 75, column 8:&#10;       repo:&#10;      ^</span><br></pre></td></tr></table></figure>
<p>替我问候写这个分析工具的人母亲。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在尝试部署网站到Github和Gitcafe的时候，一直出现以下问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: http://hexo.io/do&#10;cs/troubleshooting.html&#10;JS-YAML: bad indentation of a mapping entry at line 75, column 8:&#10;       repo:&#10;           ^</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://en.ors-sro.com/tags/Hexo/"/>
    
      <category term="YAML" scheme="http://en.ors-sro.com/tags/YAML/"/>
    
      <category term="多平台部署" scheme="http://en.ors-sro.com/tags/%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo3.0迁移]]></title>
    <link href="http://en.ors-sro.com/Migrate-to-hexo3/"/>
    <id>http://en.ors-sro.com/Migrate-to-hexo3/</id>
    <published>2015-07-25T12:55:45.000Z</published>
    <updated>2015-07-26T15:44:23.299Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>因为折腾多平台部署，以为是<code>hexo</code>版本过低，所以升级了<code>hexo</code>到了3.0版本。结果却发现<code>hexo d</code>和<code>hexo g</code>等命令都失效了。运行会有类似提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Commands:&#10;  help     Get help on Hexo.&#10;  init     Create a new Hexo folder.&#10;  version  Display version information.&#10;&#10;Global Options:&#10;  --config  Specify config file instead of using _config.yml&#10;  --cwd     Specify the CWD&#10;  --debug   Display all verbose messages in the terminal&#10;  --safe    Disable all plugins and scripts&#10;  --silent  Hide output on console&#10;&#10;For more help, you can use &#39;hexo help [command]&#39; for the detailed information&#10;or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="尝试官方迁移方案">尝试官方迁移方案</h2><p>由<strong>Hexo2.X</strong> —&gt; <strong>Hexo3.0</strong>，官方给出了具体的<a href="https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0" target="_blank" rel="external">升级方案</a>。</p>
<p>但是我在升级的时候遇到了几个问题</p>
<ol>
<li>连接<strong>npm</strong>速度慢</li>
<li>安装<strong>Hexo</strong>其他插件位置不当</li>
</ol>
<p>之后我放弃了官方的解决方案。自己尝试从头开始</p>
<h2 id="自己的解决方案">自己的解决方案</h2><p>从头开始并不是把之前的博文都删掉。而是重新建立一个文件夹，运行<code>hexo init</code>后将原来的文章和<strong>.git</strong>文件复制过来。</p>
<ol>
<li><p>切换淘宝npm镜像<br> 连接<strong>npm</strong>国外镜像速度太慢，解决方案是切换<strong>npm</strong>的镜像。在<strong>npm</strong>的目录下找到<strong>.npmrc</strong>添加以下代码</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Hexo命令行</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>&gt;<span class="title">npm</span> <span class="title">install</span> <span class="title">hexo</span>-<span class="title">cli</span> -<span class="title">g</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建文件夹<br> 这里为文件夹的名字为test</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>&gt;<span class="title">F</span>:</span><br><span class="line"></span><br><span class="line"><span class="title">F</span>:\&gt;<span class="title">mkdir</span> <span class="title">test</span></span><br><span class="line"></span><br><span class="line"><span class="title">F</span>:\&gt;<span class="title">cd</span> <span class="title">test</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化目录<br> 使用<code>hexo init</code>初始化目录即可</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">F:\<span class="title">test</span>&gt;<span class="title">hexo</span> <span class="title">init</span></span></span><br></pre></td></tr></table></figure>
<p> 初始化成功后会有类似提示</p>
<blockquote>
<p>INFO  Copying data to F:\test<br>INFO  You are almost done! Don’t forget to run ‘npm install’ before you start bl<br>ogging with Hexo!</p>
</blockquote>
</li>
<li><p>安装相应的插件<br> Hexo3.0最大的变化是将很多原来的功能都独立成了插件。这里的插件有文章生成插件，部署插件等。根据上面的提示使用<code>npm install</code>即可。</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">F:\<span class="title">test</span>&gt;<span class="title">npm</span> <span class="title">install</span></span></span><br></pre></td></tr></table></figure>
<p> 等待一段时间后，所有插件会自动下载完毕。如果出现一下类似提示请重新运行<code>npm install</code>直至不再提示</p>
<blockquote>
<p>npm ERR! registry error parsing json</p>
</blockquote>
<p> <code>npm install</code>完成后<strong>node_modules</strong>的文件夹结构应该是这样的。</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">├─hexo</span><br><span class="line">│</span><br><span class="line">├─hexo-generator-archive</span><br><span class="line">│</span><br><span class="line">├─hexo-generator-category</span><br><span class="line">│</span><br><span class="line">├─hexo-generator-index</span><br><span class="line">│</span><br><span class="line">├─hexo-generator-tag</span><br><span class="line">│</span><br><span class="line">├─hexo-renderer-ejs</span><br><span class="line">│</span><br><span class="line">├─hexo-renderer-marked</span><br><span class="line">│</span><br><span class="line">├─hexo-renderer-stylus</span><br><span class="line">│</span><br><span class="line">└─hexo-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制原来的文章和主题当前文件夹<br> 如果你有使用git管理整个网站的习惯还可以将原来的<strong>.git</strong>文件夹复制过来。但是请不要直接将原来的<strong>_config.yaml</strong>复制过来。而是<strong>用到的</strong>内容才复制</p>
</li>
<li><p>生成静态文件和运行博客</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">F:\<span class="title">test</span>&gt;<span class="title">hexo</span> <span class="title">g</span></span></span><br></pre></td></tr></table></figure>
<p> 运行完成，生成网页成功以下类似提示</p>
<blockquote>
<p>INFO  Files loaded in 3.6 s<br>INFO  Generated: js/script.js<br>INFO  Generated: fancybox/jquery.fancybox.pack.js<br>INFO  Generated: fancybox/jquery.fancybox.js<br>…<br>INFO  Generated: archives/2015/index.html<br>INFO  Generated: archives/2015/07/index.html<br>INFO  Generated: index.html<br>INFO  28 files generated in 1.32 s</p>
</blockquote>
<p> 使用<code>hexo s</code>运行博客</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">F:\<span class="title">test</span>&gt;<span class="title">hexo</span> <span class="title">s</span></span></span><br></pre></td></tr></table></figure>
<p> 运行成功有以下类似提示</p>
<blockquote>
<p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="external">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p> 使用浏览器打开<code>http://localhost:4000</code>查看博客。<strong>Hello World Again！</strong></p>
<p> 如果运行<code>hexo s</code>出现<code>hexo</code>的帮助页面。也就是类似下面的提示</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: hexo &#60;command&#62;&#10;&#10;Commands:&#10;  clean     Removed generated files and cache.&#10;  config    Get or set configurations.&#10;  deploy    Deploy your website.&#10;  generate  Generate static files.&#10;  help      Get help on a command.&#10;  init      Create a new Hexo folder.&#10;  list      List the information of the site&#10;  migrate   Migrate your site from other system to Hexo.&#10;  new       Create a new post.&#10;  publish   Moves a draft post from _drafts to _posts folder.&#10;  render    Render files with renderer plugins.&#10;  version   Display version information.&#10;&#10;Global Options:&#10;  --config  Specify config file instead of using _config.yml&#10;  --cwd     Specify the CWD&#10;  --debug   Display all verbose messages in the terminal&#10;  --draft   Display draft posts&#10;  --safe    Disable all plugins and scripts&#10;  --silent  Hide output on console&#10;&#10;For more help, you can use &#39;hexo help [command]&#39; for the detailed information&#10;or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>
<p> 请使用<code>npm install hexo-server --save</code>安装<code>hexo</code>服务器。</p>
<p> 类似的如果运行命令没有得到应有的效果。请安装对应的插件。以下是一些常用的插件列表安装命令</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save @安装hexo 服务器</span><br><span class="line">npm install hexo-deployer-git --save @安装hexo git部署插件</span><br><span class="line">npm install hexo-deployer-heroku --save @安装hexo heroku 部署插件</span><br><span class="line">npm install hexo-deployer-rsync --save @安装hexo同步插件</span><br><span class="line">npm install hexo-deployer-openshift --save @不知道什么鬼</span><br><span class="line">npm install hexo-renderer-marked@<span class="number">0</span>.<span class="number">2</span> --save @安装hexo markdown渲染插件</span><br><span class="line">npm install hexo-renderer-stylus@<span class="number">0</span>.<span class="number">2</span> --save @安装hexo 模板插件</span><br><span class="line">npm install hexo-generator-feed@<span class="number">1</span> --save @安装hexo RSS插件</span><br><span class="line">npm install hexo-generator-sitemap@<span class="number">1</span> --save @安装hexo站点地图插件</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>因为折腾多平台部署，以为是<code>hexo</code>版本过低，所以升级了<code>hexo</code>到了3.0版本。结果却发现<code>hexo d</code>和<code>hexo g</code>等命令都失效了。运行会有类似提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Commands:&#10;  help     Get help on Hexo.&#10;  init     Create a new Hexo folder.&#10;  version  Display version information.&#10;&#10;Global Options:&#10;  --config  Specify config file instead of using _config.yml&#10;  --cwd     Specify the CWD&#10;  --debug   Display all verbose messages in the terminal&#10;  --safe    Disable all plugins and scripts&#10;  --silent  Hide output on console&#10;&#10;For more help, you can use &#39;hexo help [command]&#39; for the detailed information&#10;or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://en.ors-sro.com/tags/Hexo/"/>
    
  </entry>
  
</feed>